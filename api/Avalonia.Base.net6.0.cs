//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Roslyn-based GenAPI
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class AttachedProperty<TValue> : Avalonia.StyledProperty<TValue>
    {
        public AttachedProperty(string name, System.Type ownerType, Avalonia.StyledPropertyMetadata<TValue> metadata, bool inherits = false, System.Func<TValue, bool> validate = null) { throw null; }
        public override bool IsAttached { get { throw null; } }
        public Avalonia.AttachedProperty<TValue> AddOwner<TOwner>() where TOwner : Avalonia.AvaloniaObject { throw null; }
    }
    public partial class AvaloniaInternalException
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public AvaloniaInternalException(string message) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AvaloniaLocator : Avalonia.IAvaloniaDependencyResolver
    {
        public partial class RegistrationHelper<TService>
        {
            public RegistrationHelper(Avalonia.AvaloniaLocator locator) { throw null; }
            public Avalonia.AvaloniaLocator ToConstant<TImpl>(TImpl constant) where TImpl : TService { throw null; }
            public Avalonia.AvaloniaLocator ToFunc<TImlp>(System.Func<TImlp> func) where TImlp : TService { throw null; }
            public Avalonia.AvaloniaLocator ToLazy<TImlp>(System.Func<TImlp> func) where TImlp : TService { throw null; }
            public Avalonia.AvaloniaLocator ToSingleton<TImpl>() where TImpl : class, TService, new() { throw null; }
            public Avalonia.AvaloniaLocator ToTransient<TImpl>() where TImpl : class, TService, new() { throw null; }
        }
        public AvaloniaLocator() { throw null; }
        public AvaloniaLocator(Avalonia.IAvaloniaDependencyResolver parentScope) { throw null; }
        public static Avalonia.IAvaloniaDependencyResolver Current { get { throw null; } set { throw null; } }
        public static Avalonia.AvaloniaLocator CurrentMutable { get { throw null; } set { throw null; } }
        public static System.IDisposable EnterScope() { throw null; }
        public Avalonia.AvaloniaLocator.RegistrationHelper<T> Bind<T>() { throw null; }
        public Avalonia.AvaloniaLocator BindToSelf<T>(T constant) { throw null; }
        public Avalonia.AvaloniaLocator BindToSelfSingleton<T>() where T : class, new() { throw null; }
        public object? GetService(System.Type t) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class AvaloniaObject : Avalonia.Diagnostics.IAvaloniaObjectDebug
    {
        public AvaloniaObject() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public object? this[Avalonia.AvaloniaProperty property] { get { throw null; } set { throw null; } }
        public Avalonia.Data.IBinding this[Avalonia.Data.IndexerDescriptor binding] { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        protected internal Avalonia.AvaloniaObject? InheritanceParent { get { throw null; } set { throw null; } }
        public System.IDisposable Bind(Avalonia.AvaloniaProperty property, System.IObservable<object?> source, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public System.IDisposable Bind<T>(Avalonia.StyledPropertyBase<T> property, System.IObservable<object?> source, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public System.IDisposable Bind<T>(Avalonia.StyledPropertyBase<T> property, System.IObservable<T> source, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public System.IDisposable Bind<T>(Avalonia.StyledPropertyBase<T> property, System.IObservable<Avalonia.Data.BindingValue<T>> source, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public System.IDisposable Bind<T>(Avalonia.DirectPropertyBase<T> property, System.IObservable<object?> source) { throw null; }
        public System.IDisposable Bind<T>(Avalonia.DirectPropertyBase<T> property, System.IObservable<T> source) { throw null; }
        public System.IDisposable Bind<T>(Avalonia.DirectPropertyBase<T> property, System.IObservable<Avalonia.Data.BindingValue<T>> source) { throw null; }
        public bool CheckAccess() { throw null; }
        public void ClearValue(Avalonia.AvaloniaProperty property) { throw null; }
        public void ClearValue<T>(Avalonia.AvaloniaProperty<T> property) { throw null; }
        public void ClearValue<T>(Avalonia.StyledPropertyBase<T> property) { throw null; }
        public void ClearValue<T>(Avalonia.DirectPropertyBase<T> property) { throw null; }
        public void CoerceValue(Avalonia.AvaloniaProperty property) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override sealed bool? Equals(object? obj) { throw null; }
        public Avalonia.Data.Optional<T> GetBaseValue<T>(Avalonia.StyledPropertyBase<T> property) { throw null; }
        public override sealed int GetHashCode() { throw null; }
        public object? GetValue(Avalonia.AvaloniaProperty property) { throw null; }
        public T GetValue<T>(Avalonia.StyledPropertyBase<T> property) { throw null; }
        public T GetValue<T>(Avalonia.DirectPropertyBase<T> property) { throw null; }
        public bool IsAnimating(Avalonia.AvaloniaProperty property) { throw null; }
        public bool IsSet(Avalonia.AvaloniaProperty property) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.AvaloniaPropertyChangedEventArgs>? PropertyChanged { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable? SetValue(Avalonia.AvaloniaProperty property, object? value, Avalonia.Data.BindingPriority? priority = 0) { throw null; }
        public System.IDisposable? SetValue<T>(Avalonia.StyledPropertyBase<T> property, T value, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public void SetValue<T>(Avalonia.DirectPropertyBase<T> property, T value) { throw null; }
        public void VerifyAccess() { throw null; }
        protected virtual void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected virtual void OnPropertyChangedCore(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected void RaisePropertyChanged<T>(Avalonia.DirectPropertyBase<T> property, Avalonia.Data.Optional<T> oldValue, Avalonia.Data.BindingValue<T> newValue, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        protected bool SetAndRaise<T>(Avalonia.AvaloniaProperty<T> property, ref T field, T value) { throw null; }
        protected virtual void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class AvaloniaObjectExtensions
    {
        public static System.IDisposable AddClassHandler<TTarget>(this System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs> observable, System.Action<TTarget, Avalonia.AvaloniaPropertyChangedEventArgs> action) where TTarget : Avalonia.AvaloniaObject { throw null; }
        public static System.IDisposable AddClassHandler<TTarget, TValue>(this System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs<TValue>> observable, System.Action<TTarget, Avalonia.AvaloniaPropertyChangedEventArgs<TValue>> action) where TTarget : Avalonia.AvaloniaObject { throw null; }
        public static System.IDisposable Bind<T>(this Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty<T> property, System.IObservable<Avalonia.Data.BindingValue<T>> source, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public static System.IDisposable Bind<T>(this Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty<T> property, System.IObservable<T> source, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public static System.IDisposable Bind(this Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty property, Avalonia.Data.IBinding binding, object? anchor = null) { throw null; }
        public static object? GetBaseValue(this Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty property) { throw null; }
        public static Avalonia.Data.Optional<T> GetBaseValue<T>(this Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty<T> property) { throw null; }
        public static System.IObservable<Avalonia.Data.BindingValue<object?>> GetBindingObservable(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty property) { throw null; }
        public static System.IObservable<Avalonia.Data.BindingValue<T>> GetBindingObservable<T>(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty<T> property) { throw null; }
        public static System.IObservable<object?> GetObservable(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty property) { throw null; }
        public static System.IObservable<T> GetObservable<T>(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty<T> property) { throw null; }
        public static System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs> GetPropertyChangedObservable(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty property) { throw null; }
        public static T GetValue<T>(this Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty<T> property) { throw null; }
        public static Avalonia.Data.IBinding ToBinding<T>(this System.IObservable<T> source) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class AvaloniaProperty : Avalonia.Data.Core.IPropertyInfo
    {
        protected AvaloniaProperty(string name, System.Type valueType, System.Type ownerType, Avalonia.AvaloniaPropertyMetadata metadata, System.Action<Avalonia.AvaloniaObject, bool> notifying = null) { throw null; }
        protected AvaloniaProperty(Avalonia.AvaloniaProperty source, System.Type ownerType, Avalonia.AvaloniaPropertyMetadata? metadata) { throw null; }
        public static readonly object UnsetValue;
        public System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs> Changed { get { throw null; } }
        public virtual bool Inherits { get { throw null; } }
        public virtual bool IsAttached { get { throw null; } }
        public virtual bool IsDirect { get { throw null; } }
        public virtual bool IsReadOnly { get { throw null; } }
        public string Name { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Action<Avalonia.AvaloniaObject, bool> Notifying { get { throw null; } }
        public System.Type OwnerType { get { throw null; } }
        public System.Type PropertyType { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator ==(Avalonia.AvaloniaProperty? a, Avalonia.AvaloniaProperty? b) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator !=(Avalonia.AvaloniaProperty? a, Avalonia.AvaloniaProperty? b) { throw null; }
        public static Avalonia.Data.IndexerDescriptor operator !(Avalonia.AvaloniaProperty property) { throw null; }
        public static Avalonia.Data.IndexerDescriptor operator ~(Avalonia.AvaloniaProperty property) { throw null; }
        public static Avalonia.StyledProperty<TValue> Register<TOwner, TValue>(string name, TValue defaultValue = default, bool inherits = false, Avalonia.Data.BindingMode defaultBindingMode = 1, System.Func<TValue, bool> validate = null, System.Func<Avalonia.AvaloniaObject, TValue, TValue>? coerce = null, System.Action<Avalonia.AvaloniaObject, bool> notifying = null) where TOwner : Avalonia.AvaloniaObject { throw null; }
        public static Avalonia.AttachedProperty<TValue> RegisterAttached<TOwner, THost, TValue>(string name, TValue defaultValue = default, bool inherits = false, Avalonia.Data.BindingMode defaultBindingMode = 1, System.Func<TValue, bool> validate = null, System.Func<Avalonia.AvaloniaObject, TValue, TValue>? coerce = null) where THost : Avalonia.AvaloniaObject { throw null; }
        public static Avalonia.AttachedProperty<TValue> RegisterAttached<THost, TValue>(string name, System.Type ownerType, TValue defaultValue = default, bool inherits = false, Avalonia.Data.BindingMode defaultBindingMode = 1, System.Func<TValue, bool> validate = null, System.Func<Avalonia.AvaloniaObject, TValue, TValue>? coerce = null) where THost : Avalonia.AvaloniaObject { throw null; }
        public static Avalonia.DirectProperty<TOwner, TValue> RegisterDirect<TOwner, TValue>(string name, System.Func<TOwner, TValue> getter, System.Action<TOwner, TValue>? setter = null, TValue unsetValue = default, Avalonia.Data.BindingMode defaultBindingMode = 1, bool enableDataValidation = false) where TOwner : Avalonia.AvaloniaObject { throw null; }
        public Avalonia.Data.IndexerDescriptor Bind() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool? Equals(Avalonia.AvaloniaProperty? other) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.AvaloniaPropertyMetadata GetMetadata<T>() where T : Avalonia.AvaloniaObject { throw null; }
        public Avalonia.AvaloniaPropertyMetadata GetMetadata(System.Type type) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public bool? IsValidValue(object? value) { throw null; }
        public override string ToString() { throw null; }
        protected abstract System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs> GetChanged();
        protected void OverrideMetadata(System.Type type, Avalonia.AvaloniaPropertyMetadata metadata) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class AvaloniaProperty<TValue> : Avalonia.AvaloniaProperty
    {
        protected AvaloniaProperty(string name, System.Type ownerType, Avalonia.AvaloniaPropertyMetadata metadata, System.Action<Avalonia.AvaloniaObject, bool> notifying = null) { throw null; }
        protected AvaloniaProperty(Avalonia.AvaloniaProperty<TValue> source, System.Type ownerType, Avalonia.AvaloniaPropertyMetadata? metadata) { throw null; }
        public System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs<TValue>> Changed { get { throw null; } }
        protected override System.IObservable<Avalonia.AvaloniaPropertyChangedEventArgs> GetChanged() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute[missing](null, null, Justification = null)]
        protected Avalonia.Data.BindingValue<object?> TryConvert(object? value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class AvaloniaPropertyChangedEventArgs
    {
        public AvaloniaPropertyChangedEventArgs(Avalonia.AvaloniaObject sender, Avalonia.Data.BindingPriority priority) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public object? NewValue { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public object? OldValue { get { throw null; } }
        public Avalonia.Data.BindingPriority Priority { get { throw null; } }
        public Avalonia.AvaloniaProperty Property { get { throw null; } }
        public Avalonia.AvaloniaObject Sender { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected abstract object? GetNewValue();
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected abstract object? GetOldValue();
        protected abstract Avalonia.AvaloniaProperty GetProperty();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AvaloniaPropertyChangedEventArgs<T> : Avalonia.AvaloniaPropertyChangedEventArgs
    {
        public AvaloniaPropertyChangedEventArgs(Avalonia.AvaloniaObject sender, Avalonia.AvaloniaProperty<T> property, Avalonia.Data.Optional<T> oldValue, Avalonia.Data.BindingValue<T> newValue, Avalonia.Data.BindingPriority priority) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public Avalonia.Data.BindingValue<T> NewValue { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public Avalonia.Data.Optional<T> OldValue { get { throw null; } }
        public Avalonia.AvaloniaProperty<T> Property { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override object? GetNewValue() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override object? GetOldValue() { throw null; }
        protected override Avalonia.AvaloniaProperty GetProperty() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class AvaloniaPropertyChangedExtensions
    {
        public static T GetNewValue<T>(this Avalonia.AvaloniaPropertyChangedEventArgs e) { throw null; }
        public static (T, T) GetOldAndNewValue<T>(this Avalonia.AvaloniaPropertyChangedEventArgs e) { throw null; }
        public static T GetOldValue<T>(this Avalonia.AvaloniaPropertyChangedEventArgs e) { throw null; }
    }
    public static partial class AvaloniaPropertyExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool CanValueAffectRender(this Avalonia.AvaloniaProperty property) { throw null; }
    }
    public partial class AvaloniaPropertyMetadata
    {
        public AvaloniaPropertyMetadata(Avalonia.Data.BindingMode defaultBindingMode = 0) { throw null; }
        public Avalonia.Data.BindingMode DefaultBindingMode { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public virtual void Merge(Avalonia.AvaloniaPropertyMetadata baseMetadata, Avalonia.AvaloniaProperty property) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AvaloniaPropertyRegistry
    {
        public AvaloniaPropertyRegistry() { throw null; }
        public static Avalonia.AvaloniaPropertyRegistry Instance { get { throw null; } }
        public Avalonia.AvaloniaProperty? FindRegistered(System.Type type, string name) { throw null; }
        public Avalonia.AvaloniaProperty? FindRegistered(Avalonia.AvaloniaObject o, string name) { throw null; }
        public Avalonia.DirectPropertyBase<T>? FindRegisteredDirect<T>(Avalonia.AvaloniaObject o, Avalonia.DirectPropertyBase<T> property) { throw null; }
        [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute[missing](null, null, Justification = null)]
        public System.Collections.Generic.IReadOnlyList<Avalonia.AvaloniaProperty> GetRegistered(System.Type type) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.AvaloniaProperty> GetRegistered(Avalonia.AvaloniaObject o) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.AvaloniaProperty> GetRegisteredAttached(System.Type type) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.AvaloniaProperty> GetRegisteredDirect(System.Type type) { throw null; }
        public Avalonia.DirectPropertyBase<T> GetRegisteredDirect<T>(Avalonia.AvaloniaObject o, Avalonia.DirectPropertyBase<T> property) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.AvaloniaProperty> GetRegisteredInherited(System.Type type) { throw null; }
        public bool IsRegistered(System.Type type, Avalonia.AvaloniaProperty property) { throw null; }
        public bool IsRegistered(object o, Avalonia.AvaloniaProperty property) { throw null; }
        public void Register(System.Type type, Avalonia.AvaloniaProperty property) { throw null; }
        public void RegisterAttached(System.Type type, Avalonia.AvaloniaProperty property) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class CornerRadius
    {
        public CornerRadius(double uniformRadius) { throw null; }
        public CornerRadius(double top, double bottom) { throw null; }
        public CornerRadius(double topLeft, double topRight, double bottomRight, double bottomLeft) { throw null; }
        public double BottomLeft { get { throw null; } }
        public double BottomRight { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        [System.ObsoleteAttribute[missing](null)]
        public bool IsEmpty { get { throw null; } }
        public bool IsUniform { get { throw null; } }
        public double TopLeft { get { throw null; } }
        public double TopRight { get { throw null; } }
        public static bool operator ==(Avalonia.CornerRadius left, Avalonia.CornerRadius right) { throw null; }
        public static bool operator !=(Avalonia.CornerRadius left, Avalonia.CornerRadius right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.CornerRadius Parse(string s) { throw null; }
        public bool Equals(Avalonia.CornerRadius other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class DirectProperty<TOwner, TValue> : Avalonia.DirectPropertyBase<TValue> where TOwner : Avalonia.AvaloniaObject
    {
        public DirectProperty(string name, System.Func<TOwner, TValue> getter, System.Action<TOwner, TValue>? setter, Avalonia.DirectPropertyMetadata<TValue> metadata) { throw null; }
        public System.Func<TOwner, TValue> Getter { get { throw null; } }
        public override bool IsDirect { get { throw null; } }
        public override bool IsReadOnly { get { throw null; } }
        public override System.Type Owner { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public System.Action<TOwner, TValue>? Setter { get { throw null; } }
        public Avalonia.DirectProperty<TNewOwner, TValue> AddOwner<TNewOwner>(System.Func<TNewOwner, TValue> getter, System.Action<TNewOwner, TValue>? setter = null, TValue unsetValue = default, Avalonia.Data.BindingMode defaultBindingMode = 0, bool enableDataValidation = false) where TNewOwner : Avalonia.AvaloniaObject { throw null; }
        public Avalonia.DirectProperty<TNewOwner, TValue> AddOwnerWithDataValidation<TNewOwner>(System.Func<TNewOwner, TValue> getter, System.Action<TNewOwner, TValue> setter, TValue unsetValue = default, Avalonia.Data.BindingMode defaultBindingMode = 0, bool enableDataValidation = false) where TNewOwner : Avalonia.AvaloniaObject { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public abstract partial class DirectPropertyBase<TValue> : Avalonia.AvaloniaProperty<TValue>
    {
        protected DirectPropertyBase(string name, System.Type ownerType, Avalonia.AvaloniaPropertyMetadata metadata) { throw null; }
        protected DirectPropertyBase(Avalonia.DirectPropertyBase<TValue> source, System.Type ownerType, Avalonia.AvaloniaPropertyMetadata metadata) { throw null; }
        public abstract System.Type Owner { get; }
        public Avalonia.DirectPropertyMetadata<TValue> GetMetadata(System.Type type) { throw null; }
        public TValue GetUnsetValue(System.Type type) { throw null; }
        public void OverrideMetadata<T>(Avalonia.DirectPropertyMetadata<TValue> metadata) where T : Avalonia.AvaloniaObject { throw null; }
        public void OverrideMetadata(System.Type type, Avalonia.DirectPropertyMetadata<TValue> metadata) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DirectPropertyMetadata<TValue> : Avalonia.AvaloniaPropertyMetadata, Avalonia.IDirectPropertyMetadata
    {
        public DirectPropertyMetadata(TValue unsetValue = default, Avalonia.Data.BindingMode defaultBindingMode = 0, System.Nullable<bool> enableDataValidation = null) { throw null; }
        public System.Nullable<bool> EnableDataValidation { get { throw null; } }
        public TValue UnsetValue { get { throw null; } }
        public override void Merge(Avalonia.AvaloniaPropertyMetadata baseMetadata, Avalonia.AvaloniaProperty property) { throw null; }
    }
    public static partial class EnumExtensions
    {
        public static bool HasAllFlags<T>(this T value, T flags) where T : struct, , System.Enum { throw null; }
        public static bool HasAnyFlag<T>(this T value, T flags) where T : struct, , System.Enum { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IAvaloniaDependencyResolver
    {
        object? GetService(System.Type t);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IDataContextProvider
    {
        object? DataContext { get; set; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IDescription
    {
        string? Description { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IDirectPropertyMetadata
    {
        System.Nullable<bool?>? EnableDataValidation { get; }
        object? UnsetValue { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface INamed
    {
        string? Name { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStyledPropertyMetadata
    {
        object? DefaultValue { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class LocatorExtensions
    {
        public static object GetRequiredService(this Avalonia.IAvaloniaDependencyResolver resolver, System.Type t) { throw null; }
        public static T GetRequiredService<T>(this Avalonia.IAvaloniaDependencyResolver resolver) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static T? GetService<T>(this Avalonia.IAvaloniaDependencyResolver resolver) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Matrix
    {
        public sealed partial class Decomposed
        {
            public double Angle;
            public Avalonia.Vector Scale;
            public Avalonia.Vector Skew;
            public Avalonia.Vector Translate;
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator ==(Avalonia.Matrix.Decomposed left, Avalonia.Matrix.Decomposed right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator !=(Avalonia.Matrix.Decomposed left, Avalonia.Matrix.Decomposed right) { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public bool Equals(Avalonia.Matrix.Decomposed other) { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override string ToString() { throw null; }
        }
        public Matrix(double scaleX, double skewY, double skewX, double scaleY, double offsetX, double offsetY) { throw null; }
        public Matrix(double scaleX, double skewY, double perspX, double skewX, double scaleY, double perspY, double offsetX, double offsetY, double perspZ) { throw null; }
        public bool HasInverse { get { throw null; } }
        public static Avalonia.Matrix Identity { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        public double M11 { get { throw null; } }
        public double M12 { get { throw null; } }
        public double M13 { get { throw null; } }
        public double M21 { get { throw null; } }
        public double M22 { get { throw null; } }
        public double M23 { get { throw null; } }
        public double M31 { get { throw null; } }
        public double M32 { get { throw null; } }
        public double M33 { get { throw null; } }
        public static Avalonia.Matrix CreateRotation(double radians) { throw null; }
        public static Avalonia.Matrix CreateScale(double xScale, double yScale) { throw null; }
        public static Avalonia.Matrix CreateScale(Avalonia.Vector scales) { throw null; }
        public static Avalonia.Matrix CreateSkew(double xAngle, double yAngle) { throw null; }
        public static Avalonia.Matrix CreateTranslation(Avalonia.Vector position) { throw null; }
        public static Avalonia.Matrix CreateTranslation(double xPosition, double yPosition) { throw null; }
        public static bool operator ==(Avalonia.Matrix value1, Avalonia.Matrix value2) { throw null; }
        public static bool operator !=(Avalonia.Matrix value1, Avalonia.Matrix value2) { throw null; }
        public static Avalonia.Matrix operator *(Avalonia.Matrix value1, Avalonia.Matrix value2) { throw null; }
        public static Avalonia.Matrix operator -(Avalonia.Matrix value) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Matrix Parse(string s) { throw null; }
        public static double ToRadians(double angle) { throw null; }
        public static bool TryDecomposeTransform(Avalonia.Matrix matrix, out Avalonia.Matrix.Decomposed decomposed) { throw null; }
        public Avalonia.Matrix Append(Avalonia.Matrix value) { throw null; }
        public bool ContainsPerspective() { throw null; }
        public bool Equals(Avalonia.Matrix other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public double GetDeterminant() { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Matrix Invert() { throw null; }
        public Avalonia.Matrix Prepend(Avalonia.Matrix value) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.Point Transform(Avalonia.Point p) { throw null; }
        public bool TryInvert(out Avalonia.Matrix inverted) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class PixelPoint
    {
        public PixelPoint(int x, int y) { throw null; }
        public static readonly Avalonia.PixelPoint Origin;
        public int X { get { throw null; } }
        public int Y { get { throw null; } }
        public static Avalonia.PixelPoint FromPoint(Avalonia.Point point, double scale) { throw null; }
        public static Avalonia.PixelPoint FromPoint(Avalonia.Point point, Avalonia.Vector scale) { throw null; }
        public static Avalonia.PixelPoint FromPointWithDpi(Avalonia.Point point, double dpi) { throw null; }
        public static Avalonia.PixelPoint FromPointWithDpi(Avalonia.Point point, Avalonia.Vector dpi) { throw null; }
        public static Avalonia.PixelPoint operator +(Avalonia.PixelPoint a, Avalonia.PixelPoint b) { throw null; }
        public static Avalonia.PixelPoint operator +(Avalonia.PixelPoint a, Avalonia.PixelVector b) { throw null; }
        public static bool operator ==(Avalonia.PixelPoint left, Avalonia.PixelPoint right) { throw null; }
        public static implicit operator Avalonia.PixelVector(Avalonia.PixelPoint p) { throw null; }
        public static bool operator !=(Avalonia.PixelPoint left, Avalonia.PixelPoint right) { throw null; }
        public static Avalonia.PixelPoint operator -(Avalonia.PixelPoint a, Avalonia.PixelPoint b) { throw null; }
        public static Avalonia.PixelPoint operator -(Avalonia.PixelPoint a, Avalonia.PixelVector b) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.PixelPoint Parse(string s) { throw null; }
        public bool Equals(Avalonia.PixelPoint other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Point ToPoint(double scale) { throw null; }
        public Avalonia.Point ToPoint(Avalonia.Vector scale) { throw null; }
        public Avalonia.Point ToPointWithDpi(double dpi) { throw null; }
        public Avalonia.Point ToPointWithDpi(Avalonia.Vector dpi) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.PixelPoint WithX(int x) { throw null; }
        public Avalonia.PixelPoint WithY(int y) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class PixelRect
    {
        public PixelRect(int x, int y, int width, int height) { throw null; }
        public PixelRect(Avalonia.PixelSize size) { throw null; }
        public PixelRect(Avalonia.PixelPoint position, Avalonia.PixelSize size) { throw null; }
        public PixelRect(Avalonia.PixelPoint topLeft, Avalonia.PixelPoint bottomRight) { throw null; }
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.PixelRect Empty;
        public int Bottom { get { throw null; } }
        public Avalonia.PixelPoint BottomLeft { get { throw null; } }
        public Avalonia.PixelPoint BottomRight { get { throw null; } }
        public Avalonia.PixelPoint Center { get { throw null; } }
        public int Height { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        [System.ObsoleteAttribute[missing](null)]
        public bool IsEmpty { get { throw null; } }
        public Avalonia.PixelPoint Position { get { throw null; } }
        public int Right { get { throw null; } }
        public Avalonia.PixelSize Size { get { throw null; } }
        public Avalonia.PixelPoint TopLeft { get { throw null; } }
        public Avalonia.PixelPoint TopRight { get { throw null; } }
        public int Width { get { throw null; } }
        public int X { get { throw null; } }
        public int Y { get { throw null; } }
        public static Avalonia.PixelRect FromRect(Avalonia.Rect rect, double scale) { throw null; }
        public static Avalonia.PixelRect FromRect(Avalonia.Rect rect, Avalonia.Vector scale) { throw null; }
        public static Avalonia.PixelRect FromRectWithDpi(Avalonia.Rect rect, double dpi) { throw null; }
        public static Avalonia.PixelRect FromRectWithDpi(Avalonia.Rect rect, Avalonia.Vector dpi) { throw null; }
        public static bool operator ==(Avalonia.PixelRect left, Avalonia.PixelRect right) { throw null; }
        public static bool operator !=(Avalonia.PixelRect left, Avalonia.PixelRect right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.PixelRect Parse(string s) { throw null; }
        public Avalonia.PixelRect CenterRect(Avalonia.PixelRect rect) { throw null; }
        public bool Contains(Avalonia.PixelPoint p) { throw null; }
        public bool Contains(Avalonia.PixelRect r) { throw null; }
        public bool ContainsExclusive(Avalonia.PixelPoint p) { throw null; }
        public bool Equals(Avalonia.PixelRect other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.PixelRect Intersect(Avalonia.PixelRect rect) { throw null; }
        public bool Intersects(Avalonia.PixelRect rect) { throw null; }
        public Avalonia.Rect ToRect(double scale) { throw null; }
        public Avalonia.Rect ToRect(Avalonia.Vector scale) { throw null; }
        public Avalonia.Rect ToRectWithDpi(double dpi) { throw null; }
        public Avalonia.Rect ToRectWithDpi(Avalonia.Vector dpi) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.PixelRect Translate(Avalonia.PixelVector offset) { throw null; }
        public Avalonia.PixelRect Union(Avalonia.PixelRect rect) { throw null; }
        public Avalonia.PixelRect WithHeight(int height) { throw null; }
        public Avalonia.PixelRect WithWidth(int width) { throw null; }
        public Avalonia.PixelRect WithX(int x) { throw null; }
        public Avalonia.PixelRect WithY(int y) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class PixelSize
    {
        public PixelSize(int width, int height) { throw null; }
        public static readonly Avalonia.PixelSize Empty;
        public double AspectRatio { get { throw null; } }
        public int Height { get { throw null; } }
        public int Width { get { throw null; } }
        public static Avalonia.PixelSize FromSize(Avalonia.Size size, double scale) { throw null; }
        public static Avalonia.PixelSize FromSize(Avalonia.Size size, Avalonia.Vector scale) { throw null; }
        public static Avalonia.PixelSize FromSizeWithDpi(Avalonia.Size size, double dpi) { throw null; }
        public static Avalonia.PixelSize FromSizeWithDpi(Avalonia.Size size, Avalonia.Vector dpi) { throw null; }
        public static bool operator ==(Avalonia.PixelSize left, Avalonia.PixelSize right) { throw null; }
        public static bool operator !=(Avalonia.PixelSize left, Avalonia.PixelSize right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.PixelSize Parse(string s) { throw null; }
        public bool Equals(Avalonia.PixelSize other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Size ToSize(double scale) { throw null; }
        public Avalonia.Size ToSize(Avalonia.Vector scale) { throw null; }
        public Avalonia.Size ToSizeWithDpi(double dpi) { throw null; }
        public Avalonia.Size ToSizeWithDpi(Avalonia.Vector dpi) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.PixelSize WithHeight(int height) { throw null; }
        public Avalonia.PixelSize WithWidth(int width) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class PixelVector
    {
        public PixelVector(int x, int y) { throw null; }
        public double Length { get { throw null; } }
        public int X { get { throw null; } }
        public int Y { get { throw null; } }
        public static Avalonia.PixelVector operator +(Avalonia.PixelVector a, Avalonia.PixelVector b) { throw null; }
        public static Avalonia.PixelVector operator /(Avalonia.PixelVector vector, int scale) { throw null; }
        public static bool operator ==(Avalonia.PixelVector left, Avalonia.PixelVector right) { throw null; }
        public static explicit operator Avalonia.PixelPoint(Avalonia.PixelVector a) { throw null; }
        public static bool operator !=(Avalonia.PixelVector left, Avalonia.PixelVector right) { throw null; }
        public static int operator *(Avalonia.PixelVector a, Avalonia.PixelVector b) { throw null; }
        public static Avalonia.PixelVector operator *(Avalonia.PixelVector vector, int scale) { throw null; }
        public static Avalonia.PixelVector operator -(Avalonia.PixelVector a, Avalonia.PixelVector b) { throw null; }
        public static Avalonia.PixelVector operator -(Avalonia.PixelVector a) { throw null; }
        public bool Equals(Avalonia.PixelVector other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public bool NearlyEquals(Avalonia.PixelVector other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.PixelVector WithX(int x) { throw null; }
        public Avalonia.PixelVector WithY(int y) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Point
    {
        public Point(double x, double y) { throw null; }
        public bool IsDefault { get { throw null; } }
        public double X { get { throw null; } }
        public double Y { get { throw null; } }
        public static Avalonia.Point operator +(Avalonia.Point a, Avalonia.Point b) { throw null; }
        public static Avalonia.Point operator +(Avalonia.Point a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Point operator /(Avalonia.Point p, double k) { throw null; }
        public static bool operator ==(Avalonia.Point left, Avalonia.Point right) { throw null; }
        public static implicit operator Avalonia.Vector(Avalonia.Point p) { throw null; }
        public static bool operator !=(Avalonia.Point left, Avalonia.Point right) { throw null; }
        public static Avalonia.Point operator *(Avalonia.Point p, double k) { throw null; }
        public static Avalonia.Point operator *(double k, Avalonia.Point p) { throw null; }
        public static Avalonia.Point operator *(Avalonia.Point point, Avalonia.Matrix matrix) { throw null; }
        public static Avalonia.Point operator -(Avalonia.Point a, Avalonia.Point b) { throw null; }
        public static Avalonia.Point operator -(Avalonia.Point a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Point operator -(Avalonia.Point a) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Point Parse(string s) { throw null; }
        public void Deconstruct(out double x, out double y) { throw null; }
        public bool Equals(Avalonia.Point other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public bool NearlyEquals(Avalonia.Point other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.Point Transform(Avalonia.Matrix transform) { throw null; }
        public Avalonia.Point WithX(double x) { throw null; }
        public Avalonia.Point WithY(double y) { throw null; }
    }
    public sealed partial class Points : Avalonia.Collections.AvaloniaList<Avalonia.Point>
    {
        public Points() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Rect
    {
        public Rect(double x, double y, double width, double height) { throw null; }
        public Rect(Avalonia.Size size) { throw null; }
        public Rect(Avalonia.Point position, Avalonia.Size size) { throw null; }
        public Rect(Avalonia.Point topLeft, Avalonia.Point bottomRight) { throw null; }
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.Rect Empty;
        public double Bottom { get { throw null; } }
        public Avalonia.Point BottomLeft { get { throw null; } }
        public Avalonia.Point BottomRight { get { throw null; } }
        public Avalonia.Point Center { get { throw null; } }
        public double Height { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        [System.ObsoleteAttribute[missing](null)]
        public bool IsEmpty { get { throw null; } }
        public double Left { get { throw null; } }
        public Avalonia.Point Position { get { throw null; } }
        public double Right { get { throw null; } }
        public Avalonia.Size Size { get { throw null; } }
        public double Top { get { throw null; } }
        public Avalonia.Point TopLeft { get { throw null; } }
        public Avalonia.Point TopRight { get { throw null; } }
        public double Width { get { throw null; } }
        public double X { get { throw null; } }
        public double Y { get { throw null; } }
        public static Avalonia.Rect operator /(Avalonia.Rect rect, Avalonia.Vector scale) { throw null; }
        public static bool operator ==(Avalonia.Rect left, Avalonia.Rect right) { throw null; }
        public static bool operator !=(Avalonia.Rect left, Avalonia.Rect right) { throw null; }
        public static Avalonia.Rect operator *(Avalonia.Rect rect, Avalonia.Vector scale) { throw null; }
        public static Avalonia.Rect operator *(Avalonia.Rect rect, double scale) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Rect Parse(string s) { throw null; }
        public Avalonia.Rect CenterRect(Avalonia.Rect rect) { throw null; }
        public bool Contains(Avalonia.Point p) { throw null; }
        public bool Contains(Avalonia.Rect r) { throw null; }
        public bool ContainsExclusive(Avalonia.Point p) { throw null; }
        public Avalonia.Rect Deflate(double thickness) { throw null; }
        public Avalonia.Rect Deflate(Avalonia.Thickness thickness) { throw null; }
        public bool Equals(Avalonia.Rect other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Rect Inflate(double thickness) { throw null; }
        public Avalonia.Rect Inflate(Avalonia.Thickness thickness) { throw null; }
        public Avalonia.Rect Intersect(Avalonia.Rect rect) { throw null; }
        public bool Intersects(Avalonia.Rect rect) { throw null; }
        public Avalonia.Rect Normalize() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.Rect TransformToAABB(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Rect Translate(Avalonia.Vector offset) { throw null; }
        public Avalonia.Rect Union(Avalonia.Rect rect) { throw null; }
        public Avalonia.Rect WithHeight(double height) { throw null; }
        public Avalonia.Rect WithWidth(double width) { throw null; }
        public Avalonia.Rect WithX(double x) { throw null; }
        public Avalonia.Rect WithY(double y) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class RelativePoint
    {
        public RelativePoint(double x, double y, Avalonia.RelativeUnit unit) { throw null; }
        public RelativePoint(Avalonia.Point point, Avalonia.RelativeUnit unit) { throw null; }
        public static readonly Avalonia.RelativePoint BottomRight;
        public static readonly Avalonia.RelativePoint Center;
        public static readonly Avalonia.RelativePoint TopLeft;
        public Avalonia.Point Point { get { throw null; } }
        public Avalonia.RelativeUnit Unit { get { throw null; } }
        public static bool operator ==(Avalonia.RelativePoint left, Avalonia.RelativePoint right) { throw null; }
        public static bool operator !=(Avalonia.RelativePoint left, Avalonia.RelativePoint right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.RelativePoint Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public bool Equals(Avalonia.RelativePoint p) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Point ToPixels(Avalonia.Size size) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class RelativeRect
    {
        public RelativeRect(double x, double y, double width, double height, Avalonia.RelativeUnit unit) { throw null; }
        public RelativeRect(Avalonia.Rect rect, Avalonia.RelativeUnit unit) { throw null; }
        public RelativeRect(Avalonia.Size size, Avalonia.RelativeUnit unit) { throw null; }
        public RelativeRect(Avalonia.Point position, Avalonia.Size size, Avalonia.RelativeUnit unit) { throw null; }
        public RelativeRect(Avalonia.Point topLeft, Avalonia.Point bottomRight, Avalonia.RelativeUnit unit) { throw null; }
        public static readonly Avalonia.RelativeRect Fill;
        public Avalonia.Rect Rect { get { throw null; } }
        public Avalonia.RelativeUnit Unit { get { throw null; } }
        public static bool operator ==(Avalonia.RelativeRect left, Avalonia.RelativeRect right) { throw null; }
        public static bool operator !=(Avalonia.RelativeRect left, Avalonia.RelativeRect right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.RelativeRect Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public bool Equals(Avalonia.RelativeRect p) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Rect ToPixels(Avalonia.Size size) { throw null; }
    }
    public sealed partial class RelativeUnit
    {
        public const Avalonia.RelativeUnit Absolute = 1;
        public const Avalonia.RelativeUnit Relative = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RenderTargetCorruptedException
    {
        public RenderTargetCorruptedException() { throw null; }
        public RenderTargetCorruptedException(string message) { throw null; }
        public RenderTargetCorruptedException(System.Exception innerException) { throw null; }
        public RenderTargetCorruptedException(string message, System.Exception innerException) { throw null; }
    }
    public sealed partial class RoundedRect
    {
        public RoundedRect(Avalonia.Rect rect, Avalonia.Vector radiiTopLeft, Avalonia.Vector radiiTopRight, Avalonia.Vector radiiBottomRight, Avalonia.Vector radiiBottomLeft) { throw null; }
        public RoundedRect(Avalonia.Rect rect, double radiusTopLeft, double radiusTopRight, double radiusBottomRight, double radiusBottomLeft) { throw null; }
        public RoundedRect(Avalonia.Rect rect, Avalonia.Vector radii) { throw null; }
        public RoundedRect(Avalonia.Rect rect, double radiusX, double radiusY) { throw null; }
        public RoundedRect(Avalonia.Rect rect, double radius) { throw null; }
        public RoundedRect(Avalonia.Rect rect) { throw null; }
        public RoundedRect(in Avalonia.Rect bounds, in Avalonia.CornerRadius radius) { throw null; }
        public bool IsRounded { get { throw null; } }
        public bool IsUniform { get { throw null; } }
        public Avalonia.Vector RadiiBottomLeft { get { throw null; } }
        public Avalonia.Vector RadiiBottomRight { get { throw null; } }
        public Avalonia.Vector RadiiTopLeft { get { throw null; } }
        public Avalonia.Vector RadiiTopRight { get { throw null; } }
        public Avalonia.Rect Rect { get { throw null; } }
        public static bool operator ==(Avalonia.RoundedRect left, Avalonia.RoundedRect right) { throw null; }
        public static implicit operator Avalonia.RoundedRect(Avalonia.Rect r) { throw null; }
        public static bool operator !=(Avalonia.RoundedRect left, Avalonia.RoundedRect right) { throw null; }
        public Avalonia.RoundedRect Deflate(double dx, double dy) { throw null; }
        public bool Equals(Avalonia.RoundedRect other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.RoundedRect Inflate(double dx, double dy) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Size
    {
        public Size(double width, double height) { throw null; }
        public Size(System.Numerics.Vector2 vector2) { throw null; }
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.Size Empty;
        public static readonly Avalonia.Size Infinity;
        public double AspectRatio { get { throw null; } }
        public double Height { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        public double Width { get { throw null; } }
        public static Avalonia.Size operator +(Avalonia.Size size, Avalonia.Size toAdd) { throw null; }
        public static Avalonia.Size operator /(Avalonia.Size size, Avalonia.Vector scale) { throw null; }
        public static Avalonia.Vector operator /(Avalonia.Size left, Avalonia.Size right) { throw null; }
        public static Avalonia.Size operator /(Avalonia.Size size, double scale) { throw null; }
        public static bool operator ==(Avalonia.Size left, Avalonia.Size right) { throw null; }
        public static bool operator !=(Avalonia.Size left, Avalonia.Size right) { throw null; }
        public static Avalonia.Size operator *(Avalonia.Size size, Avalonia.Vector scale) { throw null; }
        public static Avalonia.Size operator *(Avalonia.Size size, double scale) { throw null; }
        public static Avalonia.Size operator -(Avalonia.Size size, Avalonia.Size toSubtract) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Size Parse(string s) { throw null; }
        public Avalonia.Size Constrain(Avalonia.Size constraint) { throw null; }
        public void Deconstruct(out double width, out double height) { throw null; }
        public Avalonia.Size Deflate(Avalonia.Thickness thickness) { throw null; }
        public bool Equals(Avalonia.Size other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Size Inflate(Avalonia.Thickness thickness) { throw null; }
        public bool NearlyEquals(Avalonia.Size other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.Size WithHeight(double height) { throw null; }
        public Avalonia.Size WithWidth(double width) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class StreamBindingExtensions
    {
        public static T StreamBinding<T>(this System.Threading.Tasks.Task<T> @this) { throw null; }
        public static object StreamBinding(this System.Threading.Tasks.Task @this) { throw null; }
        public static T StreamBinding<T>(this System.IObservable<T> @this) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StyledElement : Avalonia.Animation.Animatable, Avalonia.IDataContextProvider, Avalonia.LogicalTree.ILogical, Avalonia.Controls.IResourceHost, Avalonia.Controls.IResourceNode, Avalonia.Styling.IStyleHost, Avalonia.Styling.IStyleable, Avalonia.INamed, Avalonia.Controls.ISetLogicalParent, Avalonia.Controls.ISetInheritanceParent
    {
        public StyledElement() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<object?> DataContextProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.StyledElement, string?> NameProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.StyledElement, Avalonia.StyledElement?> ParentProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.StyledElement, Avalonia.AvaloniaObject?> TemplatedParentProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme?> ThemeProperty;
        public Avalonia.Controls.Classes Classes { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public object? DataContext { get { throw null; } set { throw null; } }
        public bool IsInitialized { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string? Name { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.StyledElement? Parent { get { throw null; } }
        public Avalonia.Controls.IResourceDictionary Resources { get { throw null; } set { throw null; } }
        public Avalonia.Styling.Styles Styles { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.AvaloniaObject? TemplatedParent { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Styling.ControlTheme? Theme { get { throw null; } set { throw null; } }
        protected internal Avalonia.Collections.IAvaloniaList<Avalonia.LogicalTree.ILogical> LogicalChildren { get { throw null; } }
        protected Avalonia.Controls.IPseudoClasses PseudoClasses { get { throw null; } }
        public bool ApplyStyling() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>? AttachedToLogicalTree { add { throw null; } remove { throw null; } }
        public virtual void BeginInit() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? DataContextChanged { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>? DetachedFromLogicalTree { add { throw null; } remove { throw null; } }
        public virtual void EndInit() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? Initialized { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Controls.ResourcesChangedEventArgs>? ResourcesChanged { add { throw null; } remove { throw null; } }
        protected void InitializeIfNeeded() { throw null; }
        protected virtual void LogicalChildrenCollectionChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { throw null; }
        protected virtual void NotifyChildResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs e) { throw null; }
        protected virtual void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnDataContextBeginUpdate() { throw null; }
        protected virtual void OnDataContextChanged(System.EventArgs e) { throw null; }
        protected virtual void OnDataContextEndUpdate() { throw null; }
        protected virtual void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnInitialized() { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    public static partial class StyledElementExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static System.IDisposable BindClass(this Avalonia.StyledElement target, string className, Avalonia.Data.IBinding source, object anchor) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class StyledProperty<TValue> : Avalonia.StyledPropertyBase<TValue>
    {
        public StyledProperty(string name, System.Type ownerType, Avalonia.StyledPropertyMetadata<TValue> metadata, bool inherits = false, System.Func<TValue, bool> validate = null, System.Action<Avalonia.AvaloniaObject, bool> notifying = null) { throw null; }
        public Avalonia.StyledProperty<TValue> AddOwner<TOwner>() where TOwner : Avalonia.AvaloniaObject { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public abstract partial class StyledPropertyBase<TValue> : Avalonia.AvaloniaProperty<TValue>
    {
        protected StyledPropertyBase(string name, System.Type ownerType, Avalonia.StyledPropertyMetadata<TValue> metadata, bool inherits = false, System.Func<TValue, bool> validate = null, System.Action<Avalonia.AvaloniaObject, bool> notifying = null) { throw null; }
        protected StyledPropertyBase(Avalonia.StyledPropertyBase<TValue> source, System.Type ownerType) { throw null; }
        public override bool Inherits { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Func<TValue, bool> ValidateValue { get { throw null; } }
        public TValue CoerceValue(Avalonia.AvaloniaObject instance, TValue baseValue) { throw null; }
        public TValue GetDefaultValue(System.Type type) { throw null; }
        public Avalonia.StyledPropertyMetadata<TValue> GetMetadata(System.Type type) { throw null; }
        public void OverrideDefaultValue<T>(TValue defaultValue) where T : Avalonia.AvaloniaObject { throw null; }
        public void OverrideDefaultValue(System.Type type, TValue defaultValue) { throw null; }
        public void OverrideMetadata<T>(Avalonia.StyledPropertyMetadata<TValue> metadata) where T : Avalonia.AvaloniaObject { throw null; }
        public void OverrideMetadata(System.Type type, Avalonia.StyledPropertyMetadata<TValue> metadata) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StyledPropertyMetadata<TValue> : Avalonia.AvaloniaPropertyMetadata, Avalonia.IStyledPropertyMetadata
    {
        public StyledPropertyMetadata(Avalonia.Data.Optional<TValue> defaultValue = null, Avalonia.Data.BindingMode defaultBindingMode = 0, System.Func<Avalonia.AvaloniaObject, TValue, TValue>? coerce = null) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null, null})]
        public System.Func<Avalonia.AvaloniaObject, TValue, TValue>? CoerceValue { get { throw null; } }
        public TValue DefaultValue { get { throw null; } }
        public override void Merge(Avalonia.AvaloniaPropertyMetadata baseMetadata, Avalonia.AvaloniaProperty property) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Thickness
    {
        public Thickness(double uniformLength) { throw null; }
        public Thickness(double horizontal, double vertical) { throw null; }
        public Thickness(double left, double top, double right, double bottom) { throw null; }
        public double Bottom { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        [System.ObsoleteAttribute[missing](null)]
        public bool IsEmpty { get { throw null; } }
        public bool IsUniform { get { throw null; } }
        public double Left { get { throw null; } }
        public double Right { get { throw null; } }
        public double Top { get { throw null; } }
        public static Avalonia.Thickness operator +(Avalonia.Thickness a, Avalonia.Thickness b) { throw null; }
        public static Avalonia.Size operator +(Avalonia.Size size, Avalonia.Thickness thickness) { throw null; }
        public static bool operator ==(Avalonia.Thickness a, Avalonia.Thickness b) { throw null; }
        public static bool operator !=(Avalonia.Thickness a, Avalonia.Thickness b) { throw null; }
        public static Avalonia.Thickness operator *(Avalonia.Thickness a, double b) { throw null; }
        public static Avalonia.Thickness operator -(Avalonia.Thickness a, Avalonia.Thickness b) { throw null; }
        public static Avalonia.Size operator -(Avalonia.Size size, Avalonia.Thickness thickness) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Thickness Parse(string s) { throw null; }
        public void Deconstruct(out double left, out double top, out double right, out double bottom) { throw null; }
        public bool Equals(Avalonia.Thickness other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    public sealed partial class UnsetValueType
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Vector
    {
        public Vector(double x, double y) { throw null; }
        public bool IsDefault { get { throw null; } }
        public double Length { get { throw null; } }
        public static Avalonia.Vector One { get { throw null; } }
        public double SquaredLength { get { throw null; } }
        public static Avalonia.Vector UnitX { get { throw null; } }
        public static Avalonia.Vector UnitY { get { throw null; } }
        public double X { get { throw null; } }
        public double Y { get { throw null; } }
        public static Avalonia.Vector Zero { get { throw null; } }
        public static Avalonia.Vector Add(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static double Cross(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector Divide(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector Divide(Avalonia.Vector vector, double scalar) { throw null; }
        public static double Dot(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector Multiply(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector Multiply(Avalonia.Vector vector, double scalar) { throw null; }
        public static Avalonia.Vector Negate(Avalonia.Vector vector) { throw null; }
        public static Avalonia.Vector Normalize(Avalonia.Vector vector) { throw null; }
        public static Avalonia.Vector operator +(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector operator /(Avalonia.Vector vector, double scale) { throw null; }
        public static bool operator ==(Avalonia.Vector left, Avalonia.Vector right) { throw null; }
        public static explicit operator Avalonia.Point(Avalonia.Vector a) { throw null; }
        public static bool operator !=(Avalonia.Vector left, Avalonia.Vector right) { throw null; }
        public static double operator *(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector operator *(Avalonia.Vector vector, double scale) { throw null; }
        public static Avalonia.Vector operator *(double scale, Avalonia.Vector vector) { throw null; }
        public static Avalonia.Vector operator -(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public static Avalonia.Vector operator -(Avalonia.Vector a) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Vector Parse(string s) { throw null; }
        public static Avalonia.Vector Subtract(Avalonia.Vector a, Avalonia.Vector b) { throw null; }
        public void Deconstruct(out double x, out double y) { throw null; }
        public bool Equals(Avalonia.Vector other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public bool NearlyEquals(Avalonia.Vector other) { throw null; }
        public Avalonia.Vector Negate() { throw null; }
        public Avalonia.Vector Normalize() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public Avalonia.Vector WithX(double x) { throw null; }
        public Avalonia.Vector WithY(double y) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [Avalonia.Metadata.UsableDuringInitializationAttribute]
    public partial class Visual : Avalonia.StyledElement
    {
        public Visual() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Visual, Avalonia.Rect> BoundsProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry?> ClipProperty;
        public static readonly Avalonia.StyledProperty<bool> ClipToBoundsProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FlowDirection> FlowDirectionProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Visual, bool> HasMirrorTransformProperty;
        public static readonly Avalonia.StyledProperty<bool> IsVisibleProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> OpacityMaskProperty;
        public static readonly Avalonia.StyledProperty<double> OpacityProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> RenderTransformOriginProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.ITransform?> RenderTransformProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Visual, System.Nullable<Avalonia.VisualTree.TransformedBounds>> TransformedBoundsProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.Visual, Avalonia.Visual?> VisualParentProperty;
        public static readonly Avalonia.StyledProperty<int> ZIndexProperty;
        public Avalonia.Rect Bounds { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.Geometry? Clip { get { throw null; } set { throw null; } }
        public bool ClipToBounds { get { throw null; } set { throw null; } }
        public Avalonia.Media.FlowDirection FlowDirection { get { throw null; } set { throw null; } }
        public bool HasMirrorTransform { get { throw null; } set { throw null; } }
        public bool HasNonUniformZIndexChildren { get { throw null; } }
        public bool IsEffectivelyVisible { get { throw null; } }
        public bool IsVisible { get { throw null; } set { throw null; } }
        public double Opacity { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.IBrush? OpacityMask { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.ITransform? RenderTransform { get { throw null; } set { throw null; } }
        public Avalonia.RelativePoint RenderTransformOrigin { get { throw null; } set { throw null; } }
        public System.Nullable<Avalonia.VisualTree.TransformedBounds> TransformedBounds { get { throw null; } }
        public int ZIndex { get { throw null; } set { throw null; } }
        protected virtual bool BypassFlowDirectionPolicies { get { throw null; } }
        protected internal Avalonia.Collections.IAvaloniaList<Avalonia.Visual> VisualChildren { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        protected internal Avalonia.Rendering.IRenderRoot? VisualRoot { get { throw null; } }
        public static Avalonia.Media.FlowDirection GetFlowDirection(Avalonia.Visual visual) { throw null; }
        public static void SetFlowDirection(Avalonia.Visual visual, Avalonia.Media.FlowDirection value) { throw null; }
        protected static void AffectsRender<T>(params Avalonia.AvaloniaProperty[] properties) where T : Avalonia.Visual { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.VisualTreeAttachmentEventArgs>? AttachedToVisualTree { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.VisualTreeAttachmentEventArgs>? DetachedFromVisualTree { add { throw null; } remove { throw null; } }
        public virtual void InvalidateMirrorTransform() { throw null; }
        public void InvalidateVisual() { throw null; }
        public virtual void Render(Avalonia.Media.DrawingContext context) { throw null; }
        protected override void LogicalChildrenCollectionChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { throw null; }
        protected virtual void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected virtual void OnVisualParentChanged(Avalonia.Visual? oldParent, Avalonia.Visual? newParent) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class VisualExtensions
    {
        public static Avalonia.Point PointToClient(this Avalonia.Visual visual, Avalonia.PixelPoint point) { throw null; }
        public static Avalonia.PixelPoint PointToScreen(this Avalonia.Visual visual, Avalonia.Point point) { throw null; }
        public static System.Nullable<Avalonia.Matrix> TransformToVisual(this Avalonia.Visual from, Avalonia.Visual to) { throw null; }
        public static System.Nullable<Avalonia.Point> TranslatePoint(this Avalonia.Visual visual, Avalonia.Point point, Avalonia.Visual relativeTo) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class VisualTreeAttachmentEventArgs
    {
        public VisualTreeAttachmentEventArgs(Avalonia.Visual parent, Avalonia.Rendering.IRenderRoot root) { throw null; }
        public Avalonia.Visual Parent { get { throw null; } }
        public Avalonia.Rendering.IRenderRoot Root { get { throw null; } }
    }
}
namespace Avalonia.Animation
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Animatable : Avalonia.AvaloniaObject
    {
        public Animatable() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Animation.IClock> ClockProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Animation.Transitions?> TransitionsProperty;
        public Avalonia.Animation.IClock Clock { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Animation.Transitions? Transitions { get { throw null; } set { throw null; } }
        protected void DisableTransitions() { throw null; }
        protected void EnableTransitions() { throw null; }
        protected override sealed void OnPropertyChangedCore(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Animation : Avalonia.AvaloniaObject, Avalonia.Animation.IAnimation
    {
        public Animation() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, System.TimeSpan> DelayBetweenIterationsProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, System.TimeSpan> DelayProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, System.TimeSpan> DurationProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, Avalonia.Animation.Easings.Easing> EasingProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, Avalonia.Animation.FillMode> FillModeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, Avalonia.Animation.IterationCount> IterationCountProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, Avalonia.Animation.PlaybackDirection> PlaybackDirectionProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.Animation, double> SpeedRatioProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Animation.KeyFrames Children { get { throw null; } }
        public System.TimeSpan Delay { get { throw null; } set { throw null; } }
        public System.TimeSpan DelayBetweenIterations { get { throw null; } set { throw null; } }
        public System.TimeSpan Duration { get { throw null; } set { throw null; } }
        public Avalonia.Animation.Easings.Easing Easing { get { throw null; } set { throw null; } }
        public Avalonia.Animation.FillMode FillMode { get { throw null; } set { throw null; } }
        public Avalonia.Animation.IterationCount IterationCount { get { throw null; } set { throw null; } }
        public Avalonia.Animation.PlaybackDirection PlaybackDirection { get { throw null; } set { throw null; } }
        public double SpeedRatio { get { throw null; } set { throw null; } }
        public static System.Nullable<(System.Type, System.Func<Avalonia.Animation.IAnimator>)> GetAnimator(Avalonia.Animation.IAnimationSetter setter) { throw null; }
        public static void RegisterAnimator<TAnimator>(System.Func<Avalonia.AvaloniaProperty, bool> condition) where TAnimator : Avalonia.Animation.IAnimator, new() { throw null; }
        public static void SetAnimator(Avalonia.Animation.IAnimationSetter setter, System.Type value) { throw null; }
        public System.IDisposable Apply(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock, System.IObservable<bool> match, System.Action? onComplete) { throw null; }
        public System.Threading.Tasks.Task RunAsync(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock = null) { throw null; }
        public System.Threading.Tasks.Task RunAsync(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock = null, System.Threading.CancellationToken cancellationToken = null) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public abstract partial class AnimatorDrivenTransition<T, TAnimator> : Avalonia.Animation.Transition<T> where TAnimator : Avalonia.Animation.Animators.Animator<T>, new()
    {
        protected AnimatorDrivenTransition() { throw null; }
        public override System.IObservable<T> DoTransition(System.IObservable<double> progress, T oldValue, T newValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AnimatorKeyFrame : Avalonia.AvaloniaObject
    {
        public AnimatorKeyFrame() { throw null; }
        public AnimatorKeyFrame(System.Type? animatorType, System.Func<Avalonia.Animation.IAnimator>? animatorFactory, Avalonia.Animation.Cue? cue) { throw null; }
        public AnimatorKeyFrame(System.Type? animatorType, System.Func<Avalonia.Animation.IAnimator>? animatorFactory, Avalonia.Animation.Cue? cue, Avalonia.Animation.KeySpline? keySpline) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.Animation.AnimatorKeyFrame, object?> ValueProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Func<Avalonia.Animation.IAnimator>? AnimatorFactory { get { throw null; } }
        public System.Type? AnimatorType { get { throw null; } }
        public Avalonia.Animation.Cue? Cue { get { throw null; } }
        public Avalonia.Animation.KeySpline? KeySpline { get { throw null; } }
        public Avalonia.AvaloniaProperty? Property { get { throw null; } }
        public object? Value { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable BindSetter(Avalonia.Animation.IAnimationSetter setter, Avalonia.Animation.Animatable targetControl) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public T GetTypedValue<T>() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class AnimatorTransitionObservable<T, TAnimator> : Avalonia.Animation.TransitionObservableBase<T> where TAnimator : Avalonia.Animation.Animators.Animator<T>
    {
        public AnimatorTransitionObservable(TAnimator animator, System.IObservable<double> progress, Avalonia.Animation.Easings.Easing easing, T oldValue, T newValue) { throw null; }
        protected override T ProduceValue(double progress) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class BoxShadowsTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.Media.BoxShadows, Avalonia.Animation.Animators.BoxShadowsAnimator>
    {
        public BoxShadowsTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class BrushTransition : Avalonia.Animation.Transition<Avalonia.Media.IBrush?>
    {
        public BrushTransition() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override System.IObservable<Avalonia.Media.IBrush?> DoTransition(System.IObservable<double> progress, Avalonia.Media.IBrush? oldValue, Avalonia.Media.IBrush? newValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Clock : Avalonia.Animation.ClockBase
    {
        public Clock() { throw null; }
        public Clock(Avalonia.Animation.IClock parent) { throw null; }
        public static Avalonia.Animation.IClock GlobalClock { get { throw null; } }
        protected override void Stop() { throw null; }
    }
    public partial class ClockBase : Avalonia.Animation.IClock
    {
        protected ClockBase() { throw null; }
        public Avalonia.Animation.PlayState PlayState { get { throw null; } set { throw null; } }
        protected bool HasSubscriptions { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable Subscribe(System.IObserver<System.TimeSpan> observer) { throw null; }
        protected void Pulse(System.TimeSpan systemTime) { throw null; }
        protected virtual void Stop() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class ColorTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.Media.Color, Avalonia.Animation.Animators.ColorAnimator>
    {
        public ColorTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositePageTransition : Avalonia.Animation.IPageTransition
    {
        public CompositePageTransition() { throw null; }
        [Avalonia.Metadata.ContentAttribute]
        public System.Collections.Generic.List<Avalonia.Animation.IPageTransition> PageTransitions { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.Threading.Tasks.Task Start(Avalonia.Visual? from, Avalonia.Visual? to, bool? forward, System.Threading.CancellationToken? cancellationToken) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class CornerRadiusTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.CornerRadius, Avalonia.Animation.Animators.CornerRadiusAnimator>
    {
        public CornerRadiusTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CrossFade : Avalonia.Animation.IPageTransition
    {
        public CrossFade() { throw null; }
        public CrossFade(System.TimeSpan duration) { throw null; }
        public System.TimeSpan Duration { get { throw null; } set { throw null; } }
        public Avalonia.Animation.Easings.Easing FadeInEasing { get { throw null; } set { throw null; } }
        public Avalonia.Animation.Easings.Easing FadeOutEasing { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.AsyncStateMachineAttribute[missing]]
        [System.Diagnostics.DebuggerStepThroughAttribute[missing]]
        public System.Threading.Tasks.Task Start(Avalonia.Visual? from, Avalonia.Visual? to, System.Threading.CancellationToken? cancellationToken) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public sealed partial class Cue
    {
        public Cue(double value) { throw null; }
        public double CueValue { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Animation.Cue left, Avalonia.Animation.Cue right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Animation.Cue left, Avalonia.Animation.Cue right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Animation.Cue Parse(string value, System.Globalization.CultureInfo? culture) { throw null; }
        public bool Equals(double other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Animation.Cue other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CueTypeConverter
    {
        public CueTypeConverter() { throw null; }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class DoubleTransition : Avalonia.Animation.AnimatorDrivenTransition<double, Avalonia.Animation.Animators.DoubleAnimator>
    {
        public DoubleTransition() { throw null; }
    }
    public sealed partial class FillMode
    {
        public const Avalonia.Animation.FillMode Backward = 2;
        public const Avalonia.Animation.FillMode Both = 3;
        public const Avalonia.Animation.FillMode Forward = 1;
        public const Avalonia.Animation.FillMode None = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class FloatTransition : Avalonia.Animation.AnimatorDrivenTransition<float, Avalonia.Animation.Animators.FloatAnimator>
    {
        public FloatTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IAnimation
    {
        System.IDisposable Apply(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock, System.IObservable<bool> match, System.Action? onComplete = null);
        System.Threading.Tasks.Task RunAsync(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock clock, System.Threading.CancellationToken cancellationToken = null);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IAnimationSetter
    {
        Avalonia.AvaloniaProperty? Property { get; set; }
        object? Value { get; set; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IAnimator
    {
        Avalonia.AvaloniaProperty? Property { get; set; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.IDisposable? Apply(Avalonia.Animation.Animation animation, Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock, System.IObservable<bool> match, System.Action? onComplete);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IClock
    {
        Avalonia.Animation.PlayState PlayState { get; set; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IGlobalClock : Avalonia.Animation.IClock
    {
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class IntegerTransition : Avalonia.Animation.AnimatorDrivenTransition<int, Avalonia.Animation.Animators.Int32Animator>
    {
        public IntegerTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IPageTransition
    {
        System.Threading.Tasks.Task Start(Avalonia.Visual? from, Avalonia.Visual? to, bool? forward, System.Threading.CancellationToken? cancellationToken);
    }
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public sealed partial class IterationCount
    {
        public IterationCount(ulong value) { throw null; }
        public IterationCount(ulong value, Avalonia.Animation.IterationType type) { throw null; }
        public static Avalonia.Animation.IterationCount Infinite { get { throw null; } }
        public bool IsInfinite { get { throw null; } }
        public Avalonia.Animation.IterationType RepeatType { get { throw null; } }
        public ulong Value { get { throw null; } }
        public static bool operator ==(Avalonia.Animation.IterationCount a, Avalonia.Animation.IterationCount b) { throw null; }
        public static bool operator !=(Avalonia.Animation.IterationCount rc1, Avalonia.Animation.IterationCount rc2) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Animation.IterationCount Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? o) { throw null; }
        public bool Equals(Avalonia.Animation.IterationCount IterationCount) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class IterationCountTypeConverter
    {
        public IterationCountTypeConverter() { throw null; }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public sealed partial class IterationType
    {
        public const Avalonia.Animation.IterationType Infinite = 1;
        public const Avalonia.Animation.IterationType Many = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ITransition
    {
        Avalonia.AvaloniaProperty Property { get; set; }
        System.IDisposable Apply(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock clock, object? oldValue, object? newValue);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class KeyFrame : Avalonia.AvaloniaObject
    {
        public KeyFrame() { throw null; }
        public Avalonia.Animation.Cue? Cue { get { throw null; } set { throw null; } }
        public Avalonia.Animation.KeySpline? KeySpline { get { throw null; } set { throw null; } }
        public System.TimeSpan? KeyTime { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Collections.AvaloniaList<Avalonia.Animation.IAnimationSetter> Setters { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class KeyFrames : Avalonia.Collections.AvaloniaList<Avalonia.Animation.KeyFrame>
    {
        public KeyFrames() { throw null; }
        public KeyFrames(System.Collections.Generic.IEnumerable<Avalonia.Animation.KeyFrame> items) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public partial class KeySpline : Avalonia.AvaloniaObject
    {
        public KeySpline() { throw null; }
        public KeySpline(double x1, double y1, double x2, double y2) { throw null; }
        public double ControlPointX1 { get { throw null; } set { throw null; } }
        public double ControlPointX2 { get { throw null; } set { throw null; } }
        public double ControlPointY1 { get { throw null; } set { throw null; } }
        public double ControlPointY2 { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Animation.KeySpline Parse(string value, System.Globalization.CultureInfo culture) { throw null; }
        public double GetSplineProgress(double linearProgress) { throw null; }
        public bool IsValid() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class KeySplineTypeConverter
    {
        public KeySplineTypeConverter() { throw null; }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PageSlide : Avalonia.Animation.IPageTransition
    {
        public sealed partial class SlideAxis
        {
            public const Avalonia.Animation.PageSlide.SlideAxis Horizontal = 0;
            public int value__;
            public const Avalonia.Animation.PageSlide.SlideAxis Vertical = 1;
        }
        public PageSlide() { throw null; }
        public PageSlide(System.TimeSpan duration, Avalonia.Animation.PageSlide.SlideAxis orientation = 0) { throw null; }
        public System.TimeSpan Duration { get { throw null; } set { throw null; } }
        public Avalonia.Animation.PageSlide.SlideAxis Orientation { get { throw null; } set { throw null; } }
        public Avalonia.Animation.Easings.Easing SlideInEasing { get { throw null; } set { throw null; } }
        public Avalonia.Animation.Easings.Easing SlideOutEasing { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected static Avalonia.Visual GetVisualParent(Avalonia.Visual? from, Avalonia.Visual? to) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.AsyncStateMachineAttribute[missing]]
        [System.Diagnostics.DebuggerStepThroughAttribute[missing]]
        public virtual System.Threading.Tasks.Task Start(Avalonia.Visual? from, Avalonia.Visual? to, bool? forward, System.Threading.CancellationToken? cancellationToken) { throw null; }
    }
    public sealed partial class PlaybackDirection
    {
        public const Avalonia.Animation.PlaybackDirection Alternate = 2;
        public const Avalonia.Animation.PlaybackDirection AlternateReverse = 3;
        public const Avalonia.Animation.PlaybackDirection Normal = 0;
        public const Avalonia.Animation.PlaybackDirection Reverse = 1;
        public int value__;
    }
    public sealed partial class PlayState
    {
        public const Avalonia.Animation.PlayState Pause = 1;
        public const Avalonia.Animation.PlayState Run = 0;
        public const Avalonia.Animation.PlayState Stop = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class PointTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.Point, Avalonia.Animation.Animators.PointAnimator>
    {
        public PointTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class RelativePointTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.RelativePoint, Avalonia.Animation.Animators.RelativePointAnimator>
    {
        public RelativePointTransition() { throw null; }
    }
    public partial class RenderLoopClock : Avalonia.Animation.ClockBase, Avalonia.Rendering.IRenderLoopTask, Avalonia.Animation.IGlobalClock, Avalonia.Animation.IClock
    {
        public RenderLoopClock() { throw null; }
        protected override void Stop() { throw null; }
    }
    public partial class Rotate3DTransition : Avalonia.Animation.PageSlide
    {
        public Rotate3DTransition(System.TimeSpan duration, Avalonia.Animation.PageSlide.SlideAxis orientation = 0, System.Nullable<double> depth = null) { throw null; }
        public Rotate3DTransition() { throw null; }
        public System.Nullable<double> Depth { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.AsyncStateMachineAttribute[missing]]
        [System.Diagnostics.DebuggerStepThroughAttribute[missing]]
        public override System.Threading.Tasks.Task Start(Avalonia.Visual? from, Avalonia.Visual? to, bool? forward, System.Threading.CancellationToken? cancellationToken) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class SizeTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.Size, Avalonia.Animation.Animators.SizeAnimator>
    {
        public SizeTransition() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public partial class Spring
    {
        public Spring() { throw null; }
        public Spring(double mass, double stiffness, double damping, double initialVelocity) { throw null; }
        public double Damping { get { throw null; } set { throw null; } }
        public double InitialVelocity { get { throw null; } set { throw null; } }
        public double Mass { get { throw null; } set { throw null; } }
        public double Stiffness { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Animation.Spring Parse(string value, System.Globalization.CultureInfo? culture) { throw null; }
        public double GetSpringProgress(double linearProgress) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SpringTypeConverter
    {
        public SpringTypeConverter() { throw null; }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class ThicknessTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.Thickness, Avalonia.Animation.Animators.ThicknessAnimator>
    {
        public ThicknessTransition() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class TransformOperationsTransition : Avalonia.Animation.Transition<Avalonia.Media.ITransform>
    {
        public TransformOperationsTransition() { throw null; }
        public override System.IObservable<Avalonia.Media.ITransform> DoTransition(System.IObservable<double> progress, Avalonia.Media.ITransform oldValue, Avalonia.Media.ITransform newValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class Transition<T> : Avalonia.AvaloniaObject, Avalonia.Animation.ITransition
    {
        protected Transition() { throw null; }
        public System.TimeSpan Delay { get { throw null; } set { throw null; } }
        public System.TimeSpan Duration { get { throw null; } set { throw null; } }
        public Avalonia.Animation.Easings.Easing Easing { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.AvaloniaProperty? Property { get { throw null; } set { throw null; } }
        public virtual System.IDisposable Apply(Avalonia.Animation.Animatable control, Avalonia.Animation.IClock clock, object? oldValue, object? newValue) { throw null; }
        public abstract System.IObservable<T> DoTransition(System.IObservable<double> progress, T oldValue, T newValue);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public abstract partial class TransitionObservableBase<T> : Avalonia.Reactive.SingleSubscriberObservableBase<T>
    {
        protected TransitionObservableBase(System.IObservable<double> progress, Avalonia.Animation.Easings.Easing easing) { throw null; }
        protected abstract T ProduceValue(double progress);
        protected override void Subscribed() { throw null; }
        protected override void Unsubscribed() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class Transitions : Avalonia.Collections.AvaloniaList<Avalonia.Animation.ITransition>
    {
        public Transitions() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class VectorTransition : Avalonia.Animation.AnimatorDrivenTransition<Avalonia.Vector, Avalonia.Animation.Animators.VectorAnimator>
    {
        public VectorTransition() { throw null; }
    }
}
namespace Avalonia.Animation.Animators
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public abstract partial class Animator<T> : Avalonia.Collections.AvaloniaList<Avalonia.Animation.AnimatorKeyFrame>, Avalonia.Animation.IAnimator
    {
        public Animator() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.AvaloniaProperty? Property { get { throw null; } set { throw null; } }
        public virtual System.IDisposable? Apply(Avalonia.Animation.Animation animation, Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock, System.IObservable<bool> match, System.Action? onComplete) { throw null; }
        public virtual System.IDisposable BindAnimation(Avalonia.Animation.Animatable control, System.IObservable<T> instance) { throw null; }
        public abstract T Interpolate(double progress, T oldValue, T newValue);
        protected T InterpolationHandler(double animationTime, T neutralValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class BaseBrushAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.IBrush?>
    {
        public BaseBrushAnimator() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static void RegisterBrushAnimator<TAnimator>(System.Func<System.Type, bool> condition) where TAnimator : Avalonia.Animation.IAnimator, new() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override System.IDisposable? Apply(Avalonia.Animation.Animation animation, Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock, System.IObservable<bool> match, System.Action? onComplete) { throw null; }
        public override Avalonia.Media.IBrush? Interpolate(double? progress, Avalonia.Media.IBrush? oldValue, Avalonia.Media.IBrush? newValue) { throw null; }
    }
    public partial class BoolAnimator : Avalonia.Animation.Animators.Animator<bool>
    {
        public BoolAnimator() { throw null; }
        public override bool Interpolate(double progress, bool oldValue, bool newValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class BoxShadowAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.BoxShadow>
    {
        public BoxShadowAnimator() { throw null; }
        public override Avalonia.Media.BoxShadow Interpolate(double progress, Avalonia.Media.BoxShadow oldValue, Avalonia.Media.BoxShadow newValue) { throw null; }
    }
    public partial class BoxShadowsAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.BoxShadows>
    {
        public BoxShadowsAnimator() { throw null; }
        public override Avalonia.Media.BoxShadows Interpolate(double progress, Avalonia.Media.BoxShadows oldValue, Avalonia.Media.BoxShadows newValue) { throw null; }
    }
    public partial class ByteAnimator : Avalonia.Animation.Animators.Animator<byte>
    {
        public ByteAnimator() { throw null; }
        public override byte Interpolate(double progress, byte oldValue, byte newValue) { throw null; }
    }
    public partial class ColorAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.Color>
    {
        public ColorAnimator() { throw null; }
        public override Avalonia.Media.Color Interpolate(double progress, Avalonia.Media.Color oldValue, Avalonia.Media.Color newValue) { throw null; }
    }
    public partial class CornerRadiusAnimator : Avalonia.Animation.Animators.Animator<Avalonia.CornerRadius>
    {
        public CornerRadiusAnimator() { throw null; }
        public override Avalonia.CornerRadius Interpolate(double progress, Avalonia.CornerRadius oldValue, Avalonia.CornerRadius newValue) { throw null; }
    }
    public partial class DecimalAnimator : Avalonia.Animation.Animators.Animator<System.Decimal>
    {
        public DecimalAnimator() { throw null; }
        public override System.Decimal Interpolate(double progress, System.Decimal oldValue, System.Decimal newValue) { throw null; }
    }
    public partial class DoubleAnimator : Avalonia.Animation.Animators.Animator<double>
    {
        public DoubleAnimator() { throw null; }
        public override double Interpolate(double progress, double oldValue, double newValue) { throw null; }
    }
    public partial class FloatAnimator : Avalonia.Animation.Animators.Animator<float>
    {
        public FloatAnimator() { throw null; }
        public override float Interpolate(double progress, float oldValue, float newValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class GradientBrushAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.IGradientBrush?>
    {
        public GradientBrushAnimator() { throw null; }
        public override System.IDisposable BindAnimation(Avalonia.Animation.Animatable control, System.IObservable<Avalonia.Media.IGradientBrush?> instance) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override Avalonia.Media.IGradientBrush? Interpolate(double? progress, Avalonia.Media.IGradientBrush? oldValue, Avalonia.Media.IGradientBrush? newValue) { throw null; }
    }
    public partial class Int16Animator : Avalonia.Animation.Animators.Animator<short>
    {
        public Int16Animator() { throw null; }
        public override short Interpolate(double progress, short oldValue, short newValue) { throw null; }
    }
    public partial class Int32Animator : Avalonia.Animation.Animators.Animator<int>
    {
        public Int32Animator() { throw null; }
        public override int Interpolate(double progress, int oldValue, int newValue) { throw null; }
    }
    public partial class Int64Animator : Avalonia.Animation.Animators.Animator<long>
    {
        public Int64Animator() { throw null; }
        public override long Interpolate(double progress, long oldValue, long newValue) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class ISolidColorBrushAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.ISolidColorBrush?>
    {
        public ISolidColorBrushAnimator() { throw null; }
        public override System.IDisposable BindAnimation(Avalonia.Animation.Animatable control, System.IObservable<Avalonia.Media.ISolidColorBrush?> instance) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override Avalonia.Media.ISolidColorBrush? Interpolate(double? progress, Avalonia.Media.ISolidColorBrush? oldValue, Avalonia.Media.ISolidColorBrush? newValue) { throw null; }
    }
    public partial class PointAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Point>
    {
        public PointAnimator() { throw null; }
        public override Avalonia.Point Interpolate(double progress, Avalonia.Point oldValue, Avalonia.Point newValue) { throw null; }
    }
    public partial class RectAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Rect>
    {
        public RectAnimator() { throw null; }
        public override Avalonia.Rect Interpolate(double progress, Avalonia.Rect oldValue, Avalonia.Rect newValue) { throw null; }
    }
    public partial class RelativePointAnimator : Avalonia.Animation.Animators.Animator<Avalonia.RelativePoint>
    {
        public RelativePointAnimator() { throw null; }
        public override Avalonia.RelativePoint Interpolate(double progress, Avalonia.RelativePoint oldValue, Avalonia.RelativePoint newValue) { throw null; }
    }
    public partial class SizeAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Size>
    {
        public SizeAnimator() { throw null; }
        public override Avalonia.Size Interpolate(double progress, Avalonia.Size oldValue, Avalonia.Size newValue) { throw null; }
    }
    public partial class ThicknessAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Thickness>
    {
        public ThicknessAnimator() { throw null; }
        public override Avalonia.Thickness Interpolate(double progress, Avalonia.Thickness oldValue, Avalonia.Thickness newValue) { throw null; }
    }
    public partial class TransformAnimator : Avalonia.Animation.Animators.Animator<double>
    {
        public TransformAnimator() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override System.IDisposable? Apply(Avalonia.Animation.Animation animation, Avalonia.Animation.Animatable control, Avalonia.Animation.IClock? clock, System.IObservable<bool> obsMatch, System.Action? onComplete) { throw null; }
        public override double Interpolate(double p, double o, double n) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class TransformOperationsAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Media.Transformation.TransformOperations>
    {
        public TransformOperationsAnimator() { throw null; }
        public override Avalonia.Media.Transformation.TransformOperations Interpolate(double progress, Avalonia.Media.Transformation.TransformOperations oldValue, Avalonia.Media.Transformation.TransformOperations newValue) { throw null; }
    }
    public partial class UInt16Animator : Avalonia.Animation.Animators.Animator<ushort>
    {
        public UInt16Animator() { throw null; }
        public override ushort Interpolate(double progress, ushort oldValue, ushort newValue) { throw null; }
    }
    public partial class UInt32Animator : Avalonia.Animation.Animators.Animator<uint>
    {
        public UInt32Animator() { throw null; }
        public override uint Interpolate(double progress, uint oldValue, uint newValue) { throw null; }
    }
    public partial class UInt64Animator : Avalonia.Animation.Animators.Animator<ulong>
    {
        public UInt64Animator() { throw null; }
        public override ulong Interpolate(double progress, ulong oldValue, ulong newValue) { throw null; }
    }
    public partial class VectorAnimator : Avalonia.Animation.Animators.Animator<Avalonia.Vector>
    {
        public VectorAnimator() { throw null; }
        public override Avalonia.Vector Interpolate(double progress, Avalonia.Vector oldValue, Avalonia.Vector newValue) { throw null; }
    }
}
namespace Avalonia.Animation.Easings
{
    public partial class BackEaseIn : Avalonia.Animation.Easings.Easing
    {
        public BackEaseIn() { throw null; }
        public override double Ease(double p) { throw null; }
    }
    public partial class BackEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public BackEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class BackEaseOut : Avalonia.Animation.Easings.Easing
    {
        public BackEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class BounceEaseIn : Avalonia.Animation.Easings.Easing
    {
        public BounceEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class BounceEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public BounceEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class BounceEaseOut : Avalonia.Animation.Easings.Easing
    {
        public BounceEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class CircularEaseIn : Avalonia.Animation.Easings.Easing
    {
        public CircularEaseIn() { throw null; }
        public override double Ease(double p) { throw null; }
    }
    public partial class CircularEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public CircularEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class CircularEaseOut : Avalonia.Animation.Easings.Easing
    {
        public CircularEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CubicBezierEasing : Avalonia.Animation.Easings.IEasing
    {
        public Avalonia.Point ControlPoint1 { get { throw null; } set { throw null; } }
        public Avalonia.Point ControlPoint2 { get { throw null; } set { throw null; } }
    }
    public partial class CubicEaseIn : Avalonia.Animation.Easings.Easing
    {
        public CubicEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class CubicEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public CubicEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class CubicEaseOut : Avalonia.Animation.Easings.Easing
    {
        public CubicEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public abstract partial class Easing : Avalonia.Animation.Easings.IEasing
    {
        protected Easing() { throw null; }
        public static Avalonia.Animation.Easings.Easing Parse(string e) { throw null; }
        public abstract double Ease(double progress);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class EasingTypeConverter
    {
        public EasingTypeConverter() { throw null; }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class ElasticEaseIn : Avalonia.Animation.Easings.Easing
    {
        public ElasticEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class ElasticEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public ElasticEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class ElasticEaseOut : Avalonia.Animation.Easings.Easing
    {
        public ElasticEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class ExponentialEaseIn : Avalonia.Animation.Easings.Easing
    {
        public ExponentialEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class ExponentialEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public ExponentialEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class ExponentialEaseOut : Avalonia.Animation.Easings.Easing
    {
        public ExponentialEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial interface IEasing
    {
        double Ease(double progress);
    }
    public partial class LinearEasing : Avalonia.Animation.Easings.Easing
    {
        public LinearEasing() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuadraticEaseIn : Avalonia.Animation.Easings.Easing
    {
        public QuadraticEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuadraticEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public QuadraticEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuadraticEaseOut : Avalonia.Animation.Easings.Easing
    {
        public QuadraticEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuarticEaseIn : Avalonia.Animation.Easings.Easing
    {
        public QuarticEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuarticEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public QuarticEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuarticEaseOut : Avalonia.Animation.Easings.Easing
    {
        public QuarticEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuinticEaseIn : Avalonia.Animation.Easings.Easing
    {
        public QuinticEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuinticEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public QuinticEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class QuinticEaseOut : Avalonia.Animation.Easings.Easing
    {
        public QuinticEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class SineEaseIn : Avalonia.Animation.Easings.Easing
    {
        public SineEaseIn() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class SineEaseInOut : Avalonia.Animation.Easings.Easing
    {
        public SineEaseInOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    public partial class SineEaseOut : Avalonia.Animation.Easings.Easing
    {
        public SineEaseOut() { throw null; }
        public override double Ease(double progress) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SplineEasing : Avalonia.Animation.Easings.Easing
    {
        public SplineEasing(double x1 = 0, double y1 = 0, double x2 = 1, double y2 = 1) { throw null; }
        public SplineEasing(Avalonia.Animation.KeySpline keySpline) { throw null; }
        public SplineEasing() { throw null; }
        public double X1 { get { throw null; } set { throw null; } }
        public double X2 { get { throw null; } set { throw null; } }
        public double Y1 { get { throw null; } set { throw null; } }
        public double Y2 { get { throw null; } set { throw null; } }
        public override double Ease(double progress) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SpringEasing : Avalonia.Animation.Easings.Easing
    {
        public SpringEasing(double mass = 0, double stiffness = 0, double damping = 0, double initialVelocity = 0) { throw null; }
        public SpringEasing(Avalonia.Animation.Spring keySpline) { throw null; }
        public SpringEasing() { throw null; }
        public double Damping { get { throw null; } set { throw null; } }
        public double InitialVelocity { get { throw null; } set { throw null; } }
        public double Mass { get { throw null; } set { throw null; } }
        public double Stiffness { get { throw null; } set { throw null; } }
        public override double Ease(double progress) { throw null; }
    }
}
namespace Avalonia.Collections
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class AvaloniaDictionary<TKey, TValue> where TKey : notnull
    {
        public AvaloniaDictionary() { throw null; }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.Collections.Generic.ICollection<TKey> Keys { get { throw null; } }
        public TValue this[TKey key] { get { throw null; } set { throw null; } }
        public System.Collections.Generic.ICollection<TValue> Values { get { throw null; } }
        public void Add(TKey key, TValue value) { throw null; }
        public void Clear() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler? CollectionChanged { add { throw null; } remove { throw null; } }
        public bool ContainsKey(TKey key) { throw null; }
        public void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { throw null; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged { add { throw null; } remove { throw null; } }
        public bool Remove(TKey key) { throw null; }
        public bool TryGetValue(TKey key, out TValue value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class AvaloniaList<T> : Avalonia.Collections.IAvaloniaList<T>, Avalonia.Collections.IAvaloniaReadOnlyList<T>, Avalonia.Diagnostics.INotifyCollectionChangedDebug
    {
        public sealed partial class Enumerator
        {
            [System.Runtime.CompilerServices.NullableContextAttribute(null)]
            public Enumerator(System.Collections.Generic.List<T> inner) { throw null; }
            [System.Runtime.CompilerServices.NullableAttribute(null)]
            public T Current { get { throw null; } }
            public void Dispose() { throw null; }
            public bool MoveNext() { throw null; }
        }
        public AvaloniaList() { throw null; }
        public AvaloniaList(int capacity) { throw null; }
        public AvaloniaList(System.Collections.Generic.IEnumerable<T> items) { throw null; }
        public AvaloniaList(params T[] items) { throw null; }
        public int Capacity { get { throw null; } set { throw null; } }
        public int Count { get { throw null; } }
        public Avalonia.Collections.ResetBehavior ResetBehavior { get { throw null; } set { throw null; } }
        public T this[int index] { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Action<T>? Validate { get { throw null; } set { throw null; } }
        public virtual void Add(T item) { throw null; }
        public virtual void AddRange(System.Collections.Generic.IEnumerable<T> items) { throw null; }
        public virtual void Clear() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler? CollectionChanged { add { throw null; } remove { throw null; } }
        public bool Contains(T item) { throw null; }
        public void CopyTo(T[] array, int arrayIndex) { throw null; }
        public void EnsureCapacity(int capacity) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Collections.AvaloniaList<T>.Enumerator GetEnumerator() { throw null; }
        public System.Collections.Generic.IEnumerable<T> GetRange(int index, int count) { throw null; }
        public int IndexOf(T item) { throw null; }
        public virtual void Insert(int index, T item) { throw null; }
        public virtual void InsertRange(int index, System.Collections.Generic.IEnumerable<T> items) { throw null; }
        public void Move(int oldIndex, int newIndex) { throw null; }
        public void MoveRange(int oldIndex, int count, int newIndex) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged { add { throw null; } remove { throw null; } }
        public virtual bool Remove(T item) { throw null; }
        public virtual void RemoveAll(System.Collections.Generic.IEnumerable<T> items) { throw null; }
        public virtual void RemoveAt(int index) { throw null; }
        public virtual void RemoveRange(int index, int count) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
    public partial class AvaloniaListConverter<T>
    {
        public AvaloniaListConverter() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class AvaloniaListExtensions
    {
        public static System.IDisposable ForEachItem<T>(this Avalonia.Collections.IAvaloniaReadOnlyList<T> collection, System.Action<T> added, System.Action<T> removed, System.Action reset, bool weakSubscription = false) { throw null; }
        public static System.IDisposable ForEachItem<T>(this Avalonia.Collections.IAvaloniaReadOnlyList<T> collection, System.Action<int, T> added, System.Action<int, T> removed, System.Action reset, bool weakSubscription = false) { throw null; }
        public static System.IDisposable TrackItemPropertyChanged<T>(this Avalonia.Collections.IAvaloniaReadOnlyList<T> collection, System.Action<System.Tuple<object?, System.ComponentModel.PropertyChangedEventArgs>> callback) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial interface IAvaloniaList<T> : Avalonia.Collections.IAvaloniaReadOnlyList<T>
    {
        int Count { get; }
        T this[int index] { get; set; }
        void AddRange(System.Collections.Generic.IEnumerable<T> items);
        void InsertRange(int index, System.Collections.Generic.IEnumerable<T> items);
        void Move(int oldIndex, int newIndex);
        void MoveRange(int oldIndex, int count, int newIndex);
        void RemoveAll(System.Collections.Generic.IEnumerable<T> items);
        void RemoveRange(int index, int count);
    }
    public partial interface IAvaloniaReadOnlyList<out T>
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class NotifyCollectionChangedExtensions
    {
        public static System.IObservable<System.Collections.Specialized.NotifyCollectionChangedEventArgs> GetWeakCollectionChangedObservable(this System.Collections.Specialized.INotifyCollectionChanged collection) { throw null; }
        public static System.IDisposable WeakSubscribe(this System.Collections.Specialized.INotifyCollectionChanged collection, System.Collections.Specialized.NotifyCollectionChangedEventHandler handler) { throw null; }
        public static System.IDisposable WeakSubscribe(this System.Collections.Specialized.INotifyCollectionChanged collection, System.Action<System.Collections.Specialized.NotifyCollectionChangedEventArgs> handler) { throw null; }
    }
    public sealed partial class ResetBehavior
    {
        public const Avalonia.Collections.ResetBehavior Remove = 1;
        public const Avalonia.Collections.ResetBehavior Reset = 0;
        public int value__;
    }
}
namespace Avalonia.Collections.Pooled
{
    public sealed partial class ClearMode
    {
        public const Avalonia.Collections.Pooled.ClearMode Always = 1;
        public const Avalonia.Collections.Pooled.ClearMode Auto = 0;
        public const Avalonia.Collections.Pooled.ClearMode Never = 2;
        public int value__;
    }
    public partial interface IReadOnlyPooledList<T>
    {
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        System.ReadOnlySpan<T> Span { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    [System.Diagnostics.DebuggerDisplayAttribute[missing](null)]
    [System.Diagnostics.DebuggerTypeProxyAttribute[missing]]
    public partial class PooledList<T> : Avalonia.Collections.Pooled.IReadOnlyPooledList<T>
    {
        public sealed partial class Enumerator
        {
            public T Current { get { throw null; } }
            public void Dispose() { throw null; }
            public bool MoveNext() { throw null; }
        }
        public PooledList() { throw null; }
        public PooledList(Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledList(System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(int capacity) { throw null; }
        public PooledList(int capacity, bool sizeToCapacity) { throw null; }
        public PooledList(int capacity, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledList(int capacity, Avalonia.Collections.Pooled.ClearMode clearMode, bool sizeToCapacity) { throw null; }
        public PooledList(int capacity, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(int capacity, System.Buffers.ArrayPool<T> customPool, bool sizeToCapacity) { throw null; }
        public PooledList(int capacity, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(int capacity, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool, bool sizeToCapacity) { throw null; }
        public PooledList(T[] array) { throw null; }
        public PooledList(T[] array, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledList(T[] array, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(T[] array, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(System.ReadOnlySpan<T> span) { throw null; }
        public PooledList(System.ReadOnlySpan<T> span, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledList(System.ReadOnlySpan<T> span, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(System.ReadOnlySpan<T> span, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(System.Collections.Generic.IEnumerable<T> collection) { throw null; }
        public PooledList(System.Collections.Generic.IEnumerable<T> collection, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledList(System.Collections.Generic.IEnumerable<T> collection, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledList(System.Collections.Generic.IEnumerable<T> collection, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public int Capacity { get { throw null; } set { throw null; } }
        public Avalonia.Collections.Pooled.ClearMode ClearMode { get { throw null; } }
        public int Count { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Span<T> Span { get { throw null; } }
        public T this[int index] { get { throw null; } set { throw null; } }
        public void Add(T item) { throw null; }
        public void AddRange(System.Collections.Generic.IEnumerable<T> collection) { throw null; }
        public void AddRange(T[] array) { throw null; }
        public void AddRange(System.ReadOnlySpan<T> span) { throw null; }
        public System.Span<T> AddSpan(int count) { throw null; }
        public System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly() { throw null; }
        public int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T>? comparer) { throw null; }
        public int BinarySearch(T item) { throw null; }
        public int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer) { throw null; }
        public void Clear() { throw null; }
        public bool Contains(T item) { throw null; }
        public Avalonia.Collections.Pooled.PooledList<TOutput> ConvertAll<TOutput>(System.Func<T, TOutput> converter) { throw null; }
        public void CopyTo(System.Span<T> span) { throw null; }
        public virtual void Dispose() { throw null; }
        public bool Exists(System.Func<T, bool> match) { throw null; }
        public Avalonia.Collections.Pooled.PooledList<T> FindAll(System.Func<T, bool> match) { throw null; }
        public int FindIndex(System.Func<T, bool> match) { throw null; }
        public int FindIndex(int startIndex, System.Func<T, bool> match) { throw null; }
        public int FindIndex(int startIndex, int count, System.Func<T, bool> match) { throw null; }
        public int FindLastIndex(System.Func<T, bool> match) { throw null; }
        public int FindLastIndex(int startIndex, System.Func<T, bool> match) { throw null; }
        public int FindLastIndex(int startIndex, int count, System.Func<T, bool> match) { throw null; }
        public void ForEach(System.Action<T> action) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Collections.Pooled.PooledList<T>.Enumerator GetEnumerator() { throw null; }
        public System.Span<T> GetRange(int index, int count) { throw null; }
        public int IndexOf(T item) { throw null; }
        public int IndexOf(T item, int index) { throw null; }
        public int IndexOf(T item, int index, int count) { throw null; }
        public void Insert(int index, T item) { throw null; }
        public void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection) { throw null; }
        public void InsertRange(int index, System.ReadOnlySpan<T> span) { throw null; }
        public void InsertRange(int index, T[] array) { throw null; }
        public System.Span<T> InsertSpan(int index, int count) { throw null; }
        public int LastIndexOf(T item) { throw null; }
        public int LastIndexOf(T item, int index) { throw null; }
        public int LastIndexOf(T item, int index, int count) { throw null; }
        public bool Remove(T item) { throw null; }
        public int RemoveAll(System.Func<T, bool> match) { throw null; }
        public void RemoveAt(int index) { throw null; }
        public void RemoveRange(int index, int count) { throw null; }
        public void Reverse() { throw null; }
        public void Reverse(int index, int count) { throw null; }
        public void Sort() { throw null; }
        public void Sort(System.Collections.Generic.IComparer<T> comparer) { throw null; }
        public void Sort(int index, int count, System.Collections.Generic.IComparer<T>? comparer) { throw null; }
        public void Sort(System.Func<T, T, int> comparison) { throw null; }
        public T[] ToArray() { throw null; }
        public void TrimExcess() { throw null; }
        public bool TrueForAll(System.Func<T, bool> match) { throw null; }
        public bool TryFind(System.Func<T, bool> match, out T result) { throw null; }
        public bool TryFindLast(System.Func<T, bool> match, out T result) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Diagnostics.DebuggerTypeProxyAttribute[missing]]
    [System.Diagnostics.DebuggerDisplayAttribute[missing](null)]
    public partial class PooledStack<T>
    {
        public sealed partial class Enumerator
        {
            public T Current { get { throw null; } }
            public void Dispose() { throw null; }
            public bool MoveNext() { throw null; }
        }
        public PooledStack() { throw null; }
        public PooledStack(Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledStack(System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(int capacity) { throw null; }
        public PooledStack(int capacity, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledStack(int capacity, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(int capacity, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(System.Collections.Generic.IEnumerable<T> enumerable) { throw null; }
        public PooledStack(System.Collections.Generic.IEnumerable<T> enumerable, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledStack(System.Collections.Generic.IEnumerable<T> enumerable, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(System.Collections.Generic.IEnumerable<T> enumerable, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(T[] array) { throw null; }
        public PooledStack(T[] array, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledStack(T[] array, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(T[] array, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(System.ReadOnlySpan<T> span) { throw null; }
        public PooledStack(System.ReadOnlySpan<T> span, Avalonia.Collections.Pooled.ClearMode clearMode) { throw null; }
        public PooledStack(System.ReadOnlySpan<T> span, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public PooledStack(System.ReadOnlySpan<T> span, Avalonia.Collections.Pooled.ClearMode clearMode, System.Buffers.ArrayPool<T> customPool) { throw null; }
        public Avalonia.Collections.Pooled.ClearMode ClearMode { get { throw null; } }
        public int Count { get { throw null; } }
        public void Clear() { throw null; }
        public bool Contains(T item) { throw null; }
        public void CopyTo(T[] array, int arrayIndex) { throw null; }
        public void CopyTo(System.Span<T> span) { throw null; }
        public void Dispose() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Collections.Pooled.PooledStack<T>.Enumerator GetEnumerator() { throw null; }
        public T Peek() { throw null; }
        public T Pop() { throw null; }
        public void Push(T item) { throw null; }
        public int RemoveWhere(System.Func<T, bool> match) { throw null; }
        public T[] ToArray() { throw null; }
        public void TrimExcess() { throw null; }
        public bool TryPeek(out T result) { throw null; }
        public bool TryPop(out T result) { throw null; }
    }
}
namespace Avalonia.Controls
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ChildNameScope : Avalonia.Controls.INameScope
    {
        public ChildNameScope(Avalonia.Controls.INameScope parentScope) { throw null; }
        public bool IsCompleted { get { throw null; } }
        public void Complete() { throw null; }
        public Avalonia.Utilities.SynchronousCompletionAsyncResult<object?> DoFindAsync(string name) { throw null; }
        public object? Find(string name) { throw null; }
        public Avalonia.Utilities.SynchronousCompletionAsyncResult<object?> FindAsync(string name) { throw null; }
        public void Register(string name, object element) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class Classes : Avalonia.Collections.AvaloniaList<string>, Avalonia.Controls.IPseudoClasses
    {
        public Classes() { throw null; }
        public Classes(System.Collections.Generic.IEnumerable<string> items) { throw null; }
        public Classes(params string[] items) { throw null; }
        public static Avalonia.Controls.Classes Parse(string s) { throw null; }
        public override void Add(string name) { throw null; }
        public override void AddRange(System.Collections.Generic.IEnumerable<string> names) { throw null; }
        public override void Clear() { throw null; }
        public override void Insert(int index, string name) { throw null; }
        public override void InsertRange(int index, System.Collections.Generic.IEnumerable<string> names) { throw null; }
        public override bool Remove(string name) { throw null; }
        public override void RemoveAll(System.Collections.Generic.IEnumerable<string> names) { throw null; }
        public override void RemoveAt(int index) { throw null; }
        public override void RemoveRange(int index, int count) { throw null; }
        public void Replace(System.Collections.Generic.IList<string> source) { throw null; }
        public void Set(string name, bool value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface INameScope
    {
        bool IsCompleted { get; }
        void Complete();
        object? Find(string name);
        Avalonia.Utilities.SynchronousCompletionAsyncResult<object?> FindAsync(string name);
        void Register(string name, object element);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPseudoClasses
    {
        void Add(string name);
        bool Contains(string name);
        bool Remove(string name);
    }
    public partial interface IResourceDictionary : Avalonia.Controls.IResourceProvider, Avalonia.Controls.IResourceNode
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        System.Collections.Generic.IList<Avalonia.Controls.IResourceProvider> MergedDictionaries { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IResourceHost : Avalonia.Controls.IResourceNode
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void NotifyHostedResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs e);
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Controls.ResourcesChangedEventArgs>? ResourcesChanged;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IResourceNode
    {
        bool HasResources { get; }
        bool TryGetResource(object key, out object? value);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IResourceProvider : Avalonia.Controls.IResourceNode
    {
        Avalonia.Controls.IResourceHost? Owner { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void AddOwner(Avalonia.Controls.IResourceHost owner);
        public event System.EventHandler? OwnerChanged;
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void RemoveOwner(Avalonia.Controls.IResourceHost owner);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ISetInheritanceParent
    {
        void SetParent(Avalonia.AvaloniaObject? parent);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ISetLogicalParent
    {
        void SetParent(Avalonia.LogicalTree.ILogical? parent);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class NameScope : Avalonia.Controls.INameScope
    {
        public NameScope() { throw null; }
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.INameScope> NameScopeProperty;
        public bool IsCompleted { get { throw null; } }
        public static Avalonia.Controls.INameScope GetNameScope(Avalonia.StyledElement styled) { throw null; }
        public static void SetNameScope(Avalonia.StyledElement styled, Avalonia.Controls.INameScope value) { throw null; }
        public void Complete() { throw null; }
        public object? Find(string name) { throw null; }
        public Avalonia.Utilities.SynchronousCompletionAsyncResult<object?> FindAsync(string name) { throw null; }
        public void Register(string name, object element) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class NameScopeExtensions
    {
        public static T? Find<T>(this Avalonia.Controls.INameScope nameScope, string name) where T : class { throw null; }
        public static T? Find<T>(this Avalonia.LogicalTree.ILogical anchor, string name) where T : class { throw null; }
        public static Avalonia.Controls.INameScope? FindNameScope(this Avalonia.LogicalTree.ILogical control) { throw null; }
        public static T Get<T>(this Avalonia.Controls.INameScope nameScope, string name) where T : class { throw null; }
        public static T Get<T>(this Avalonia.LogicalTree.ILogical anchor, string name) where T : class { throw null; }
    }
    public partial class NameScopeLocator
    {
        public NameScopeLocator() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static System.IObservable<object?> Track(Avalonia.Controls.INameScope scope, string name) { throw null; }
    }
    public static partial class PseudolassesExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static void Set(this Avalonia.Controls.IPseudoClasses classes, string name, bool value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class ResourceDictionary : Avalonia.Controls.IResourceDictionary, Avalonia.Controls.IResourceProvider, Avalonia.Controls.IResourceNode
    {
        public ResourceDictionary() { throw null; }
        public ResourceDictionary(Avalonia.Controls.IResourceHost owner) { throw null; }
        public int Count { get { throw null; } }
        public System.Collections.Generic.ICollection<object> Keys { get { throw null; } }
        public System.Collections.Generic.IList<Avalonia.Controls.IResourceProvider> MergedDictionaries { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Controls.IResourceHost? Owner { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public object? this[object key] { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.ICollection<object?> Values { get { throw null; } }
        public void Add(object key, object? value) { throw null; }
        public void AddDeferred(object key, System.Func<System.IServiceProvider?, object?> factory) { throw null; }
        public void Clear() { throw null; }
        public bool ContainsKey(object key) { throw null; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<object, object?>> GetEnumerator() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? OwnerChanged { add { throw null; } remove { throw null; } }
        public bool Remove(object key) { throw null; }
        public bool TryGetResource(object key, out object? value) { throw null; }
        public bool TryGetValue(object key, out object? value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class ResourceNodeExtensions
    {
        public static object? FindResource(this Avalonia.Controls.IResourceHost control, object key) { throw null; }
        public static System.IObservable<object?> GetResourceObservable(this Avalonia.Controls.IResourceHost control, object key, System.Func<object?, object?>? converter = null) { throw null; }
        public static System.IObservable<object?> GetResourceObservable(this Avalonia.Controls.IResourceProvider resourceProvider, object key, System.Func<object?, object?>? converter = null) { throw null; }
        public static bool TryFindResource(this Avalonia.Controls.IResourceHost control, object key, out object? value) { throw null; }
    }
    public partial class ResourcesChangedEventArgs
    {
        public ResourcesChangedEventArgs() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.Controls.ResourcesChangedEventArgs Empty;
    }
}
namespace Avalonia.Controls.Metadata
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public sealed partial class PseudoClassesAttribute
    {
        public PseudoClassesAttribute(params string[] pseudoClasses) { throw null; }
        public System.Collections.Generic.IReadOnlyList<string> PseudoClasses { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public sealed partial class TemplatePartAttribute
    {
        public TemplatePartAttribute() { throw null; }
        public TemplatePartAttribute(string name, System.Type type) { throw null; }
        public string Name { get { throw null; } set { throw null; } }
        public System.Type Type { get { throw null; } set { throw null; } }
    }
}
namespace Avalonia.Controls.Templates
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ITemplateResult
    {
        Avalonia.Controls.INameScope NameScope { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        object? Result { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TemplateResult<T> : Avalonia.Controls.Templates.ITemplateResult
    {
        public TemplateResult(T result, Avalonia.Controls.INameScope nameScope) { throw null; }
        public Avalonia.Controls.INameScope NameScope { get { throw null; } }
        public T Result { get { throw null; } }
        public void Deconstruct(out T result, out Avalonia.Controls.INameScope scope) { throw null; }
    }
}
namespace Avalonia.Data
{
    [System.AttributeUsageAttribute[missing]]
    public sealed partial class AssignBindingAttribute
    {
        public AssignBindingAttribute() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class BindingChainException
    {
        public BindingChainException() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public BindingChainException(string message) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public BindingChainException(string message, string expression, string errorPoint) { throw null; }
        public string? Expression { get { throw null; } set { throw null; } }
        public string? ExpressionErrorPoint { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public override string Message { get { throw null; } }
    }
    public sealed partial class BindingErrorType
    {
        public const Avalonia.Data.BindingErrorType DataValidationError = 2;
        public const Avalonia.Data.BindingErrorType Error = 1;
        public const Avalonia.Data.BindingErrorType None = 0;
        public int value__;
    }
    public sealed partial class BindingMode
    {
        public const Avalonia.Data.BindingMode Default = 0;
        public const Avalonia.Data.BindingMode OneTime = 3;
        public const Avalonia.Data.BindingMode OneWay = 1;
        public const Avalonia.Data.BindingMode OneWayToSource = 4;
        public const Avalonia.Data.BindingMode TwoWay = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class BindingNotification
    {
        public BindingNotification(object? value) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public BindingNotification(System.Exception error, Avalonia.Data.BindingErrorType errorType) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public BindingNotification(System.Exception error, Avalonia.Data.BindingErrorType errorType, object? fallbackValue) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.Data.BindingNotification Null;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.Data.BindingNotification UnsetValue;
        public System.Exception? Error { get { throw null; } set { throw null; } }
        public Avalonia.Data.BindingErrorType? ErrorType { get { throw null; } set { throw null; } }
        public bool? HasValue { get { throw null; } }
        public object? Value { get { throw null; } }
        public static object? ExtractError(object? o) { throw null; }
        public static object? ExtractValue(object? o) { throw null; }
        public static bool? operator ==(Avalonia.Data.BindingNotification? a, Avalonia.Data.BindingNotification? b) { throw null; }
        public static bool? operator !=(Avalonia.Data.BindingNotification? a, Avalonia.Data.BindingNotification? b) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void AddError(System.Exception e, Avalonia.Data.BindingErrorType type) { throw null; }
        public void ClearValue() { throw null; }
        public override bool? Equals(object? obj) { throw null; }
        public bool? Equals(Avalonia.Data.BindingNotification? other) { throw null; }
        public override int? GetHashCode() { throw null; }
        public void SetValue(object? value) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class BindingOperations
    {
        public static readonly object DoNothing;
        public static System.IDisposable Apply(Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty property, Avalonia.Data.InstancedBinding binding, object? anchor) { throw null; }
    }
    public sealed partial class BindingPriority
    {
        public const Avalonia.Data.BindingPriority Animation = -1;
        public const Avalonia.Data.BindingPriority Inherited = 4;
        public const Avalonia.Data.BindingPriority LocalValue = 0;
        public const Avalonia.Data.BindingPriority Style = 3;
        public const Avalonia.Data.BindingPriority StyleTrigger = 1;
        public const Avalonia.Data.BindingPriority Template = 2;
        [System.ObsoleteAttribute[missing](null)]
        public const Avalonia.Data.BindingPriority TemplatedParent = 2;
        public const Avalonia.Data.BindingPriority Unset = 2147483647;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class BindingValue<T>
    {
        public BindingValue(T value) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static Avalonia.Data.BindingValue<T> DoNothing { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public System.Exception? Error { get { throw null; } }
        public bool HasError { get { throw null; } }
        public bool HasValue { get { throw null; } }
        public Avalonia.Data.BindingValueType Type { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static Avalonia.Data.BindingValue<T> Unset { get { throw null; } }
        public T Value { get { throw null; } }
        public static Avalonia.Data.BindingValue<T> BindingError(System.Exception e) { throw null; }
        public static Avalonia.Data.BindingValue<T> BindingError(System.Exception e, T fallbackValue) { throw null; }
        public static Avalonia.Data.BindingValue<T> BindingError(System.Exception e, Avalonia.Data.Optional<T> fallbackValue) { throw null; }
        public static Avalonia.Data.BindingValue<T> DataValidationError(System.Exception e) { throw null; }
        public static Avalonia.Data.BindingValue<T> DataValidationError(System.Exception e, T fallbackValue) { throw null; }
        public static Avalonia.Data.BindingValue<T> DataValidationError(System.Exception e, Avalonia.Data.Optional<T> fallbackValue) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static Avalonia.Data.BindingValue<T> FromUntyped(object? value) { throw null; }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static Avalonia.Data.BindingValue<T> FromUntyped(object? value, System.Type targetType) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Data.BindingValue<T> left, Avalonia.Data.BindingValue<T> right) { throw null; }
        public static implicit operator Avalonia.Data.BindingValue<T>(T value) { throw null; }
        public static implicit operator Avalonia.Data.BindingValue<T>(Avalonia.Data.Optional<T> optional) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Data.BindingValue<T> left, Avalonia.Data.BindingValue<T> right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Data.BindingValue<T> other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public T? GetValueOrDefault() { throw null; }
        public T? GetValueOrDefault(T defaultValue) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TResult? GetValueOrDefault<TResult>() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TResult? GetValueOrDefault<TResult>(TResult defaultValue) { throw null; }
        public Avalonia.Data.Optional<T> ToOptional() { throw null; }
        public override string ToString() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public object? ToUntyped() { throw null; }
        public Avalonia.Data.BindingValue<T> WithValue(T value) { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class BindingValueType
    {
        public const Avalonia.Data.BindingValueType BindingError = 515;
        public const Avalonia.Data.BindingValueType BindingErrorWithFallback = 771;
        public const Avalonia.Data.BindingValueType DataValidationError = 516;
        public const Avalonia.Data.BindingValueType DataValidationErrorWithFallback = 772;
        public const Avalonia.Data.BindingValueType DoNothing = 1;
        public const Avalonia.Data.BindingValueType HasError = 512;
        public const Avalonia.Data.BindingValueType HasValue = 256;
        public const Avalonia.Data.BindingValueType TypeMask = 255;
        public const Avalonia.Data.BindingValueType UnsetValue = 0;
        public const Avalonia.Data.BindingValueType Value = 258;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DataValidationException
    {
        public DataValidationException(object? errorData) { throw null; }
        public object? ErrorData { get { throw null; } }
    }
    public sealed partial class DoNothingType
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IBinding
    {
        Avalonia.Data.InstancedBinding? Initiate(Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty? targetProperty, object? anchor = null, bool? enableDataValidation = false);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class IndexerBinding : Avalonia.Data.IBinding
    {
        public IndexerBinding(Avalonia.AvaloniaObject source, Avalonia.AvaloniaProperty property, Avalonia.Data.BindingMode mode) { throw null; }
        public Avalonia.AvaloniaProperty Property { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Data.InstancedBinding? Initiate(Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty? targetProperty, object? anchor = null, bool? enableDataValidation = false) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class IndexerDescriptor : Avalonia.IDescription
    {
        public IndexerDescriptor() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string Description { get { throw null; } }
        public Avalonia.Data.BindingMode? Mode { get { throw null; } set { throw null; } }
        public Avalonia.Data.BindingPriority? Priority { get { throw null; } set { throw null; } }
        public Avalonia.AvaloniaProperty? Property { get { throw null; } set { throw null; } }
        public Avalonia.AvaloniaObject? Source { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.IObservable<object>? SourceObservable { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Data.IndexerDescriptor operator !(Avalonia.Data.IndexerDescriptor binding) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Data.IndexerDescriptor operator ~(Avalonia.Data.IndexerDescriptor binding) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable Subscribe(System.IObserver<object?> observer) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Data.IndexerDescriptor WithMode(Avalonia.Data.BindingMode mode) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Data.IndexerDescriptor WithPriority(Avalonia.Data.BindingPriority priority) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class InstancedBinding
    {
        public Avalonia.Data.BindingMode Mode { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        [System.ObsoleteAttribute[missing](null)]
        public System.IObservable<object?> Observable { get { throw null; } }
        public Avalonia.Data.BindingPriority Priority { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.IObservable<object?> Source { get { throw null; } }
        public static Avalonia.Data.InstancedBinding OneTime(object value, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public static Avalonia.Data.InstancedBinding OneTime(System.IObservable<object?> observable, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public static Avalonia.Data.InstancedBinding OneWay(System.IObservable<object?> observable, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public static Avalonia.Data.InstancedBinding OneWayToSource(System.IObserver<object?> observer, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public static Avalonia.Data.InstancedBinding TwoWay(System.IObservable<object?> observable, System.IObserver<object?> observer, Avalonia.Data.BindingPriority priority = 0) { throw null; }
        public Avalonia.Data.InstancedBinding WithPriority(Avalonia.Data.BindingPriority priority) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Optional<T>
    {
        public Optional(T value) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static Avalonia.Data.Optional<T> Empty { get { throw null; } }
        public bool HasValue { get { throw null; } }
        public T Value { get { throw null; } }
        public static bool operator ==(Avalonia.Data.Optional<T> x, Avalonia.Data.Optional<T> y) { throw null; }
        public static implicit operator Avalonia.Data.Optional<T>(T value) { throw null; }
        public static bool operator !=(Avalonia.Data.Optional<T> x, Avalonia.Data.Optional<T> y) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public bool Equals(Avalonia.Data.Optional<T> other) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public T? GetValueOrDefault() { throw null; }
        public T? GetValueOrDefault(T defaultValue) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TResult? GetValueOrDefault<TResult>() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TResult? GetValueOrDefault<TResult>(TResult defaultValue) { throw null; }
        public Avalonia.Data.Optional<object?> ToObject() { throw null; }
        public override string ToString() { throw null; }
    }
    public static partial class OptionalExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Data.Optional<T> Cast<T>(this Avalonia.Data.Optional<object?> value) { throw null; }
    }
}
namespace Avalonia.Data.Converters
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class BoolConverters
    {
        public static readonly Avalonia.Data.Converters.IMultiValueConverter And;
        public static readonly Avalonia.Data.Converters.IValueConverter Not;
        public static readonly Avalonia.Data.Converters.IMultiValueConverter Or;
    }
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
    public partial class DefaultValueConverter : Avalonia.Data.Converters.IValueConverter
    {
        public DefaultValueConverter() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.Data.Converters.DefaultValueConverter Instance;
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class FuncMultiValueConverter<TIn, TOut> : Avalonia.Data.Converters.IMultiValueConverter
    {
        public FuncMultiValueConverter(System.Func<System.Collections.Generic.IEnumerable<TIn?>, TOut> convert) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public object? Convert(System.Collections.Generic.IList<object?> values, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FuncValueConverter<TIn, TOut> : Avalonia.Data.Converters.IValueConverter
    {
        public FuncValueConverter(System.Func<TIn?, TOut> convert) { throw null; }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IMultiValueConverter
    {
        object? Convert(System.Collections.Generic.IList<object?> values, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IValueConverter
    {
        object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture);
        object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class ObjectConverters
    {
        public static readonly Avalonia.Data.Converters.IValueConverter IsNotNull;
        public static readonly Avalonia.Data.Converters.IValueConverter IsNull;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class StringConverters
    {
        public static readonly Avalonia.Data.Converters.IValueConverter IsNotNullOrEmpty;
        public static readonly Avalonia.Data.Converters.IValueConverter IsNullOrEmpty;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StringFormatMultiValueConverter : Avalonia.Data.Converters.IMultiValueConverter
    {
        public StringFormatMultiValueConverter(string format, Avalonia.Data.Converters.IMultiValueConverter? inner) { throw null; }
        public string Format { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Data.Converters.IMultiValueConverter? Inner { get { throw null; } }
        public object? Convert(System.Collections.Generic.IList<object?> values, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StringFormatValueConverter : Avalonia.Data.Converters.IValueConverter
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public StringFormatValueConverter(string format, Avalonia.Data.Converters.IValueConverter? inner) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string Format { get { throw null; } }
        public Avalonia.Data.Converters.IValueConverter? Inner { get { throw null; } }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
}
namespace Avalonia.Data.Core
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CastTypePropertyPathElement : Avalonia.Data.Core.IPropertyPathElement
    {
        public CastTypePropertyPathElement(System.Type type) { throw null; }
        public System.Type Type { get { throw null; } }
    }
    public partial class ChildTraversalPropertyPathElement : Avalonia.Data.Core.IPropertyPathElement
    {
        public ChildTraversalPropertyPathElement() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ClrPropertyInfo : Avalonia.Data.Core.IPropertyInfo
    {
        public ClrPropertyInfo(string name, System.Func<object, object?>? getter, System.Action<object, object?>? setter, System.Type propertyType) { throw null; }
        public bool CanGet { get { throw null; } }
        public bool CanSet { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Type PropertyType { get { throw null; } }
        public object? Get(object target) { throw null; }
        public void Set(object target, object? value) { throw null; }
    }
    public static partial class CommonPropertyNames
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public const string IndexerName = "Item";
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class EnsureTypePropertyPathElement : Avalonia.Data.Core.IPropertyPathElement
    {
        public EnsureTypePropertyPathElement(System.Type type) { throw null; }
        public System.Type Type { get { throw null; } }
    }
    public partial class ExpressionParseException
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ExpressionParseException(int column, string message, System.Exception? innerException = null) { throw null; }
        public int Column { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPropertyInfo
    {
        bool CanGet { get; }
        bool CanSet { get; }
        string Name { get; }
        System.Type PropertyType { get; }
        object? Get(object target);
        void Set(object target, object? value);
    }
    public partial interface IPropertyPathElement
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PropertyPath
    {
        public PropertyPath(System.Collections.Generic.IEnumerable<Avalonia.Data.Core.IPropertyPathElement> elements) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Data.Core.IPropertyPathElement> Elements { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PropertyPathBuilder
    {
        public PropertyPathBuilder() { throw null; }
        public Avalonia.Data.Core.PropertyPath Build() { throw null; }
        public Avalonia.Data.Core.PropertyPathBuilder Cast(System.Type type) { throw null; }
        public Avalonia.Data.Core.PropertyPathBuilder ChildTraversal() { throw null; }
        public Avalonia.Data.Core.PropertyPathBuilder EnsureType(System.Type type) { throw null; }
        public Avalonia.Data.Core.PropertyPathBuilder Property(Avalonia.Data.Core.IPropertyInfo property) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PropertyPropertyPathElement : Avalonia.Data.Core.IPropertyPathElement
    {
        public PropertyPropertyPathElement(Avalonia.Data.Core.IPropertyInfo property) { throw null; }
        public Avalonia.Data.Core.IPropertyInfo Property { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ReflectionClrPropertyInfo : Avalonia.Data.Core.ClrPropertyInfo
    {
        public ReflectionClrPropertyInfo(System.Reflection.PropertyInfo info) { throw null; }
    }
}
namespace Avalonia.Data.Core.Plugins
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class BindingPlugins
    {
        public static System.Collections.Generic.IList<Avalonia.Data.Core.Plugins.IDataValidationPlugin> DataValidators { get { throw null; } }
        public static System.Collections.Generic.IList<Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin> PropertyAccessors { get { throw null; } }
        public static System.Collections.Generic.IList<Avalonia.Data.Core.Plugins.IStreamPlugin> StreamHandlers { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class DataValidationBase : Avalonia.Data.Core.Plugins.PropertyAccessorBase
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected DataValidationBase(Avalonia.Data.Core.Plugins.IPropertyAccessor inner) { throw null; }
        public override System.Type? PropertyType { get { throw null; } }
        public override object? Value { get { throw null; } }
        public override bool? SetValue(object? value, Avalonia.Data.BindingPriority? priority) { throw null; }
        protected virtual void InnerValueChanged(object? value) { throw null; }
        protected override void SubscribeCore() { throw null; }
        protected override void UnsubscribeCore() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IDataValidationPlugin
    {
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        bool Match(System.WeakReference<object?> reference, string memberName);
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        Avalonia.Data.Core.Plugins.IPropertyAccessor Start(System.WeakReference<object?> reference, string propertyName, Avalonia.Data.Core.Plugins.IPropertyAccessor inner);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IPropertyAccessor
    {
        System.Type? PropertyType { get; }
        object? Value { get; }
        bool? SetValue(object? value, Avalonia.Data.BindingPriority? priority);
        void Subscribe(System.Action<object?> listener);
        void Unsubscribe();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IPropertyAccessorPlugin
    {
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        bool Match(object obj, string propertyName);
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        Avalonia.Data.Core.Plugins.IPropertyAccessor? Start(System.WeakReference<object?> reference, string propertyName);
    }
    public partial interface IStreamPlugin
    {
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        bool Match(System.WeakReference<object?> reference);
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        System.IObservable<object?> Start(System.WeakReference<object?> reference);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class PropertyAccessorBase : Avalonia.Data.Core.Plugins.IPropertyAccessor
    {
        protected PropertyAccessorBase() { throw null; }
        public abstract System.Type? PropertyType { get; }
        public abstract object? Value { get; }
        public void Dispose() { throw null; }
        public abstract bool? SetValue(object? value, Avalonia.Data.BindingPriority? priority);
        public void Subscribe(System.Action<object?> listener) { throw null; }
        public void Unsubscribe() { throw null; }
        protected void PublishValue(object? value) { throw null; }
        protected abstract void SubscribeCore();
        protected abstract void UnsubscribeCore();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PropertyError : Avalonia.Data.Core.Plugins.IPropertyAccessor
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public PropertyError(Avalonia.Data.BindingNotification error) { throw null; }
        public System.Type? PropertyType { get { throw null; } }
        public object? Value { get { throw null; } }
        public void Dispose() { throw null; }
        public bool? SetValue(object? value, Avalonia.Data.BindingPriority? priority) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void Subscribe(System.Action<object> listener) { throw null; }
        public void Unsubscribe() { throw null; }
    }
}
namespace Avalonia.Diagnostics
{
    public static partial class AvaloniaObjectExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Diagnostics.AvaloniaPropertyValue GetDiagnostic(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty property) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AvaloniaPropertyValue
    {
        public AvaloniaPropertyValue(Avalonia.AvaloniaProperty property, object? value, Avalonia.Data.BindingPriority? priority, string? diagnostic) { throw null; }
        public string? Diagnostic { get { throw null; } }
        public Avalonia.Data.BindingPriority? Priority { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.AvaloniaProperty Property { get { throw null; } }
        public object? Value { get { throw null; } }
    }
    public partial interface IAvaloniaObjectDebug
    {
        System.Delegate[]? GetPropertyChangedSubscribers();
    }
    public partial interface INotifyCollectionChangedDebug
    {
        System.Delegate[]? GetCollectionChangedSubscribers();
    }
    public static partial class StyledElementExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Diagnostics.StyleDiagnostics GetStyleDiagnostics(this Avalonia.StyledElement styledElement) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StyleDiagnostics
    {
        public StyleDiagnostics(System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyleInstance> appliedStyles) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyleInstance> AppliedStyles { get { throw null; } }
    }
}
namespace Avalonia.Input
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AccessKeyHandler : Avalonia.Input.IAccessKeyHandler
    {
        public AccessKeyHandler() { throw null; }
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> AccessKeyPressedEvent;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Input.IMainMenu? MainMenu { get { throw null; } set { throw null; } }
        public void Register(char accessKey, Avalonia.Input.IInputElement element) { throw null; }
        public void SetOwner(Avalonia.Input.IInputRoot owner) { throw null; }
        public void Unregister(Avalonia.Input.IInputElement element) { throw null; }
        protected virtual void OnKeyDown(object? sender, Avalonia.Input.KeyEventArgs e) { throw null; }
        protected virtual void OnPreviewKeyDown(object? sender, Avalonia.Input.KeyEventArgs e) { throw null; }
        protected virtual void OnPreviewKeyUp(object? sender, Avalonia.Input.KeyEventArgs e) { throw null; }
        protected virtual void OnPreviewPointerPressed(object? sender, Avalonia.Input.PointerEventArgs e) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Cursor
    {
        public Cursor(Avalonia.Input.StandardCursorType cursorType) { throw null; }
        public Cursor(Avalonia.Media.Imaging.IBitmap cursor, Avalonia.PixelPoint hotSpot) { throw null; }
        public static readonly Avalonia.Input.Cursor Default;
        public Avalonia.Platform.ICursorImpl PlatformImpl { get { throw null; } }
        public static Avalonia.Input.Cursor Parse(string s) { throw null; }
        public void Dispose() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class DataFormats
    {
        public static readonly string FileNames;
        public static readonly string Text;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DataObject : Avalonia.Input.IDataObject
    {
        public DataObject() { throw null; }
        public bool Contains(string dataFormat) { throw null; }
        public object? Get(string dataFormat) { throw null; }
        public System.Collections.Generic.IEnumerable<string> GetDataFormats() { throw null; }
        public System.Collections.Generic.IEnumerable<string>? GetFileNames() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public string? GetText() { throw null; }
        public void Set(string dataFormat, object value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class DragDrop
    {
        public static readonly Avalonia.AttachedProperty<bool> AllowDropProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.DragEventArgs> DragEnterEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.DragEventArgs> DragLeaveEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.DragEventArgs> DragOverEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.DragEventArgs> DropEvent;
        public static System.Threading.Tasks.Task<Avalonia.Input.DragDropEffects> DoDragDrop(Avalonia.Input.PointerEventArgs triggerEvent, Avalonia.Input.IDataObject data, Avalonia.Input.DragDropEffects allowedEffects) { throw null; }
        public static bool GetAllowDrop(Avalonia.Interactivity.Interactive interactive) { throw null; }
        public static void SetAllowDrop(Avalonia.Interactivity.Interactive interactive, bool value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DragDropDevice : Avalonia.Input.Raw.IDragDropDevice, Avalonia.Input.IInputDevice
    {
        public DragDropDevice() { throw null; }
        public static readonly Avalonia.Input.DragDropDevice Instance;
        public void ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs e) { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class DragDropEffects
    {
        public const Avalonia.Input.DragDropEffects Copy = 1;
        public const Avalonia.Input.DragDropEffects Link = 4;
        public const Avalonia.Input.DragDropEffects Move = 2;
        public const Avalonia.Input.DragDropEffects None = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DragEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Input.IDataObject Data { get { throw null; } }
        public Avalonia.Input.DragDropEffects DragEffects { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyModifiers KeyModifiers { get { throw null; } }
        public Avalonia.Point GetPosition(Avalonia.Visual relativeTo) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FocusManager : Avalonia.Input.IFocusManager
    {
        public FocusManager() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Input.IInputElement? Current { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static Avalonia.Input.IFocusManager? Instance { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Input.IFocusScope? Scope { get { throw null; } }
        public static bool GetIsFocusScope(Avalonia.Input.IInputElement e) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void Focus(Avalonia.Input.IInputElement? control, Avalonia.Input.NavigationMethod? method = 0, Avalonia.Input.KeyModifiers? keyModifiers = 0) { throw null; }
        public Avalonia.Input.IInputElement? GetFocusedElement(Avalonia.Input.IInputElement e) { throw null; }
        public void RemoveFocusScope(Avalonia.Input.IFocusScope scope) { throw null; }
        public void SetFocusedElement(Avalonia.Input.IFocusScope scope, Avalonia.Input.IInputElement? element, Avalonia.Input.NavigationMethod method = 0, Avalonia.Input.KeyModifiers keyModifiers = 0) { throw null; }
        public void SetFocusScope(Avalonia.Input.IFocusScope scope) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class Gestures
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TappedEventArgs> DoubleTappedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.HoldingRoutedEventArgs> HoldingEvent;
        public static readonly Avalonia.AttachedProperty<bool> IsHoldingEnabledProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsHoldWithMouseEnabledProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PinchEndedEventArgs> PinchEndedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PinchEventArgs> PinchEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerDeltaEventArgs> PointerTouchPadGestureMagnifyEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerDeltaEventArgs> PointerTouchPadGestureRotateEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerDeltaEventArgs> PointerTouchPadGestureSwipeEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PullGestureEndedEventArgs> PullGestureEndedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PullGestureEventArgs> PullGestureEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TappedEventArgs> RightTappedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.ScrollGestureEndedEventArgs> ScrollGestureEndedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.ScrollGestureEventArgs> ScrollGestureEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TappedEventArgs> TappedEvent;
        public static void AddDoubleTappedHandler(Avalonia.Interactivity.Interactive element, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler) { throw null; }
        public static void AddRightTappedHandler(Avalonia.Interactivity.Interactive element, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler) { throw null; }
        public static void AddTappedHandler(Avalonia.Interactivity.Interactive element, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler) { throw null; }
        public static bool GetIsHoldingEnabled(Avalonia.StyledElement element) { throw null; }
        public static bool GetIsHoldWithMouseEnabled(Avalonia.StyledElement element) { throw null; }
        public static void RemoveDoubleTappedHandler(Avalonia.Interactivity.Interactive element, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler) { throw null; }
        public static void RemoveRightTappedHandler(Avalonia.Interactivity.Interactive element, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler) { throw null; }
        public static void RemoveTappedHandler(Avalonia.Interactivity.Interactive element, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler) { throw null; }
        public static void SetIsHoldingEnabled(Avalonia.StyledElement element, bool value) { throw null; }
        public static void SetIsHoldWithMouseEnabled(Avalonia.StyledElement element, bool value) { throw null; }
    }
    public partial class GotFocusEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Input.KeyModifiers KeyModifiers { get { throw null; } set { throw null; } }
        public Avalonia.Input.NavigationMethod NavigationMethod { get { throw null; } set { throw null; } }
    }
    public partial class HoldingRoutedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public HoldingRoutedEventArgs(Avalonia.Input.HoldingState holdingState, Avalonia.Point position, Avalonia.Input.PointerType pointerType) { throw null; }
        public Avalonia.Input.HoldingState HoldingState { get { throw null; } }
        public Avalonia.Input.PointerType PointerType { get { throw null; } }
        public Avalonia.Point Position { get { throw null; } }
    }
    public sealed partial class HoldingState
    {
        public const Avalonia.Input.HoldingState Cancelled = 2;
        public const Avalonia.Input.HoldingState Completed = 1;
        public const Avalonia.Input.HoldingState Started = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IAccessKeyHandler
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Input.IMainMenu? MainMenu { get; set; }
        void Register(char accessKey, Avalonia.Input.IInputElement element);
        void SetOwner(Avalonia.Input.IInputRoot owner);
        void Unregister(Avalonia.Input.IInputElement element);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ICloseable
    {
        public event System.EventHandler? Closed;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ICommandSource
    {
        System.Windows.Input.ICommand? Command { get; }
        object? CommandParameter { get; }
        bool? IsEffectivelyEnabled { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void CanExecuteChanged(object sender, System.EventArgs e);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ICustomKeyboardNavigation
    {
        (bool, Avalonia.Input.IInputElement) GetNext(Avalonia.Input.IInputElement element, Avalonia.Input.NavigationDirection direction);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IDataObject
    {
        bool Contains(string dataFormat);
        object? Get(string dataFormat);
        System.Collections.Generic.IEnumerable<string> GetDataFormats();
        System.Collections.Generic.IEnumerable<string>? GetFileNames();
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        string? GetText();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IFocusManager
    {
        Avalonia.Input.IInputElement? Current { get; }
        Avalonia.Input.IFocusScope? Scope { get; }
        void Focus(Avalonia.Input.IInputElement? control, Avalonia.Input.NavigationMethod? method = 0, Avalonia.Input.KeyModifiers? keyModifiers = 0);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void RemoveFocusScope(Avalonia.Input.IFocusScope scope);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void SetFocusScope(Avalonia.Input.IFocusScope scope);
    }
    public partial interface IFocusScope
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IInputDevice
    {
        void ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs ev);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IInputElement
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Input.Cursor? Cursor { get; }
        bool Focusable { get; }
        bool IsEffectivelyEnabled { get; }
        bool IsEffectivelyVisible { get; }
        bool IsEnabled { get; }
        bool IsFocused { get; }
        bool IsHitTestVisible { get; }
        bool IsKeyboardFocusWithin { get; }
        bool IsPointerOver { get; }
        System.Collections.Generic.List<Avalonia.Input.KeyBinding> KeyBindings { get; }
        void AddHandler(Avalonia.Interactivity.RoutedEvent routedEvent, System.Delegate handler, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false);
        void Focus();
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.GotFocusEventArgs>? GotFocus;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.KeyEventArgs>? KeyDown;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.KeyEventArgs>? KeyUp;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? LostFocus;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerEventArgs>? PointerEntered;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerEventArgs>? PointerExited;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerEventArgs>? PointerMoved;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerPressedEventArgs>? PointerPressed;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerReleasedEventArgs>? PointerReleased;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerWheelEventArgs>? PointerWheelChanged;
        void RaiseEvent(Avalonia.Interactivity.RoutedEventArgs e);
        void RemoveHandler(Avalonia.Interactivity.RoutedEvent routedEvent, System.Delegate handler);
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.TextInputEventArgs>? TextInput;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IInputManager
    {
        System.IObservable<Avalonia.Input.Raw.RawInputEventArgs> PostProcess { get; }
        System.IObservable<Avalonia.Input.Raw.RawInputEventArgs> PreProcess { get; }
        System.IObservable<Avalonia.Input.Raw.RawInputEventArgs> Process { get; }
        void ProcessInput(Avalonia.Input.Raw.RawInputEventArgs e);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IInputRoot : Avalonia.Input.IInputElement
    {
        Avalonia.Input.IAccessKeyHandler AccessKeyHandler { get; }
        Avalonia.Input.IKeyboardNavigationHandler KeyboardNavigationHandler { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Input.IInputElement? PointerOverElement { get; set; }
        bool ShowAccessKeys { get; set; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IKeyboardDevice : Avalonia.Input.IInputDevice
    {
        Avalonia.Input.IInputElement? FocusedElement { get; }
        void SetFocusedElement(Avalonia.Input.IInputElement? element, Avalonia.Input.NavigationMethod? method, Avalonia.Input.KeyModifiers? modifiers);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IKeyboardNavigationHandler
    {
        void Move(Avalonia.Input.IInputElement element, Avalonia.Input.NavigationDirection direction, Avalonia.Input.KeyModifiers keyModifiers = 0);
        void SetOwner(Avalonia.Input.IInputRoot owner);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IMainMenu
    {
        bool IsOpen { get; }
        void Close();
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? MenuClosed;
        void Open();
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IMouseDevice : Avalonia.Input.IPointerDevice, Avalonia.Input.IInputDevice
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface INavigableContainer
    {
        Avalonia.Input.IInputElement? GetControl(Avalonia.Input.NavigationDirection? direction, Avalonia.Input.IInputElement? from, bool? wrap);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [Avalonia.Controls.Metadata.PseudoClassesAttribute({null, null, null, null, null})]
    public partial class InputElement : Avalonia.Interactivity.Interactive, Avalonia.Input.IInputElement
    {
        public InputElement() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Input.Cursor?> CursorProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TappedEventArgs> DoubleTappedEvent;
        public static readonly Avalonia.StyledProperty<bool> FocusableProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.GotFocusEventArgs> GotFocusEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.HoldingRoutedEventArgs> HoldingEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Input.InputElement, bool> IsEffectivelyEnabledProperty;
        public static readonly Avalonia.StyledProperty<bool> IsEnabledProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Input.InputElement, bool> IsFocusedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsHitTestVisibleProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Input.InputElement, bool> IsKeyboardFocusWithinProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Input.InputElement, bool> IsPointerOverProperty;
        public static readonly Avalonia.StyledProperty<bool> IsTabStopProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.KeyEventArgs> KeyDownEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.KeyEventArgs> KeyUpEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> LostFocusEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerCaptureLostEventArgs> PointerCaptureLostEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerEventArgs> PointerEnteredEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerEventArgs> PointerExitedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerEventArgs> PointerMovedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerPressedEventArgs> PointerPressedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerReleasedEventArgs> PointerReleasedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.PointerWheelEventArgs> PointerWheelChangedEvent;
        public static readonly Avalonia.StyledProperty<int> TabIndexProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TappedEventArgs> TappedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TextInputEventArgs> TextInputEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs> TextInputMethodClientRequestedEvent;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Input.Cursor? Cursor { get { throw null; } set { throw null; } }
        public bool Focusable { get { throw null; } set { throw null; } }
        public Avalonia.Input.GestureRecognizers.GestureRecognizerCollection GestureRecognizers { get { throw null; } }
        public bool IsEffectivelyEnabled { get { throw null; } }
        public bool IsEnabled { get { throw null; } set { throw null; } }
        public bool IsFocused { get { throw null; } }
        public bool IsHitTestVisible { get { throw null; } set { throw null; } }
        public bool IsKeyboardFocusWithin { get { throw null; } }
        public bool IsPointerOver { get { throw null; } }
        public bool IsTabStop { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyBinding> KeyBindings { get { throw null; } }
        public int TabIndex { get { throw null; } set { throw null; } }
        protected virtual bool IsEnabledCore { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.TappedEventArgs>? DoubleTapped { add { throw null; } remove { throw null; } }
        public void Focus() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.GotFocusEventArgs>? GotFocus { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.HoldingRoutedEventArgs>? Holding { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.KeyEventArgs>? KeyDown { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.KeyEventArgs>? KeyUp { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? LostFocus { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerCaptureLostEventArgs>? PointerCaptureLost { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerEventArgs>? PointerEntered { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerEventArgs>? PointerExited { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerEventArgs>? PointerMoved { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerPressedEventArgs>? PointerPressed { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerReleasedEventArgs>? PointerReleased { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.PointerWheelEventArgs>? PointerWheelChanged { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.TappedEventArgs>? Tapped { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.TextInputEventArgs>? TextInput { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Input.TextInput.TextInputMethodClientRequestedEventArgs>? TextInputMethodClientRequested { add { throw null; } remove { throw null; } }
        protected override void OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected override void OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { throw null; }
        protected virtual void OnKeyDown(Avalonia.Input.KeyEventArgs e) { throw null; }
        protected virtual void OnKeyUp(Avalonia.Input.KeyEventArgs e) { throw null; }
        protected virtual void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { throw null; }
        protected virtual void OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs e) { throw null; }
        protected virtual void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { throw null; }
        protected virtual void OnPointerExited(Avalonia.Input.PointerEventArgs e) { throw null; }
        protected virtual void OnPointerMoved(Avalonia.Input.PointerEventArgs e) { throw null; }
        protected virtual void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { throw null; }
        protected virtual void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { throw null; }
        protected virtual void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected virtual void OnTextInput(Avalonia.Input.TextInputEventArgs e) { throw null; }
        protected void UpdateIsEffectivelyEnabled() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class InputExtensions
    {
        public static System.Collections.Generic.IEnumerable<Avalonia.Input.IInputElement> GetInputElementsAt(this Avalonia.Input.IInputElement element, Avalonia.Point p) { throw null; }
        public static Avalonia.Input.IInputElement? InputHitTest(this Avalonia.Input.IInputElement element, Avalonia.Point p) { throw null; }
        public static Avalonia.Input.IInputElement? InputHitTest(this Avalonia.Input.IInputElement element, Avalonia.Point p, System.Func<Avalonia.Visual, bool> filter) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class InputManager : Avalonia.Input.IInputManager
    {
        public InputManager() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static Avalonia.Input.IInputManager? Instance { get { throw null; } }
        public System.IObservable<Avalonia.Input.Raw.RawInputEventArgs> PostProcess { get { throw null; } }
        public System.IObservable<Avalonia.Input.Raw.RawInputEventArgs> PreProcess { get { throw null; } }
        public System.IObservable<Avalonia.Input.Raw.RawInputEventArgs> Process { get { throw null; } }
        public void ProcessInput(Avalonia.Input.Raw.RawInputEventArgs e) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class InputMethod
    {
        public static readonly Avalonia.AvaloniaProperty<bool> IsInputMethodEnabledProperty;
        public static bool GetIsInputMethodEnabled(Avalonia.Input.InputElement target) { throw null; }
        public static void SetIsInputMethodEnabled(Avalonia.Input.InputElement target, bool value) { throw null; }
    }
    public partial interface IPenDevice : Avalonia.Input.IPointerDevice, Avalonia.Input.IInputDevice
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPointer
    {
        Avalonia.Input.IInputElement? Captured { get; }
        int? Id { get; }
        bool? IsPrimary { get; }
        Avalonia.Input.PointerType? Type { get; }
        void Capture(Avalonia.Input.IInputElement? control);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPointerDevice : Avalonia.Input.IInputDevice
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Input.IPointer? TryGetPointer(Avalonia.Input.Raw.RawPointerEventArgs ev);
    }
    public sealed partial class Key
    {
        public const Avalonia.Input.Key A = 44;
        public const Avalonia.Input.Key AbntC1 = 147;
        public const Avalonia.Input.Key AbntC2 = 148;
        public const Avalonia.Input.Key Add = 85;
        public const Avalonia.Input.Key Apps = 72;
        public const Avalonia.Input.Key Attn = 163;
        public const Avalonia.Input.Key B = 45;
        public const Avalonia.Input.Key Back = 2;
        public const Avalonia.Input.Key BrowserBack = 122;
        public const Avalonia.Input.Key BrowserFavorites = 127;
        public const Avalonia.Input.Key BrowserForward = 123;
        public const Avalonia.Input.Key BrowserHome = 128;
        public const Avalonia.Input.Key BrowserRefresh = 124;
        public const Avalonia.Input.Key BrowserSearch = 126;
        public const Avalonia.Input.Key BrowserStop = 125;
        public const Avalonia.Input.Key C = 46;
        public const Avalonia.Input.Key Cancel = 1;
        public const Avalonia.Input.Key Capital = 8;
        public const Avalonia.Input.Key CapsLock = 8;
        public const Avalonia.Input.Key Clear = 5;
        public const Avalonia.Input.Key CrSel = 164;
        public const Avalonia.Input.Key D = 47;
        public const Avalonia.Input.Key D0 = 34;
        public const Avalonia.Input.Key D1 = 35;
        public const Avalonia.Input.Key D2 = 36;
        public const Avalonia.Input.Key D3 = 37;
        public const Avalonia.Input.Key D4 = 38;
        public const Avalonia.Input.Key D5 = 39;
        public const Avalonia.Input.Key D6 = 40;
        public const Avalonia.Input.Key D7 = 41;
        public const Avalonia.Input.Key D8 = 42;
        public const Avalonia.Input.Key D9 = 43;
        public const Avalonia.Input.Key DbeAlphanumeric = 157;
        public const Avalonia.Input.Key DbeCodeInput = 167;
        public const Avalonia.Input.Key DbeDbcsChar = 161;
        public const Avalonia.Input.Key DbeDetermineString = 169;
        public const Avalonia.Input.Key DbeEnterDialogConversionMode = 170;
        public const Avalonia.Input.Key DbeEnterImeConfigureMode = 165;
        public const Avalonia.Input.Key DbeEnterWordRegisterMode = 164;
        public const Avalonia.Input.Key DbeFlushString = 166;
        public const Avalonia.Input.Key DbeHiragana = 159;
        public const Avalonia.Input.Key DbeKatakana = 158;
        public const Avalonia.Input.Key DbeNoCodeInput = 168;
        public const Avalonia.Input.Key DbeNoRoman = 163;
        public const Avalonia.Input.Key DbeRoman = 162;
        public const Avalonia.Input.Key DbeSbcsChar = 160;
        public const Avalonia.Input.Key DeadCharProcessed = 172;
        public const Avalonia.Input.Key Decimal = 88;
        public const Avalonia.Input.Key Delete = 32;
        public const Avalonia.Input.Key Divide = 89;
        public const Avalonia.Input.Key Down = 26;
        public const Avalonia.Input.Key E = 48;
        public const Avalonia.Input.Key End = 21;
        public const Avalonia.Input.Key Enter = 6;
        public const Avalonia.Input.Key EraseEof = 166;
        public const Avalonia.Input.Key Escape = 13;
        public const Avalonia.Input.Key Execute = 29;
        public const Avalonia.Input.Key ExSel = 165;
        public const Avalonia.Input.Key F = 49;
        public const Avalonia.Input.Key F1 = 90;
        public const Avalonia.Input.Key F10 = 99;
        public const Avalonia.Input.Key F11 = 100;
        public const Avalonia.Input.Key F12 = 101;
        public const Avalonia.Input.Key F13 = 102;
        public const Avalonia.Input.Key F14 = 103;
        public const Avalonia.Input.Key F15 = 104;
        public const Avalonia.Input.Key F16 = 105;
        public const Avalonia.Input.Key F17 = 106;
        public const Avalonia.Input.Key F18 = 107;
        public const Avalonia.Input.Key F19 = 108;
        public const Avalonia.Input.Key F2 = 91;
        public const Avalonia.Input.Key F20 = 109;
        public const Avalonia.Input.Key F21 = 110;
        public const Avalonia.Input.Key F22 = 111;
        public const Avalonia.Input.Key F23 = 112;
        public const Avalonia.Input.Key F24 = 113;
        public const Avalonia.Input.Key F3 = 92;
        public const Avalonia.Input.Key F4 = 93;
        public const Avalonia.Input.Key F5 = 94;
        public const Avalonia.Input.Key F6 = 95;
        public const Avalonia.Input.Key F7 = 96;
        public const Avalonia.Input.Key F8 = 97;
        public const Avalonia.Input.Key F9 = 98;
        public const Avalonia.Input.Key FinalMode = 11;
        public const Avalonia.Input.Key FnDownArrow = 10004;
        public const Avalonia.Input.Key FnLeftArrow = 10001;
        public const Avalonia.Input.Key FnRightArrow = 10002;
        public const Avalonia.Input.Key FnUpArrow = 10003;
        public const Avalonia.Input.Key G = 50;
        public const Avalonia.Input.Key H = 51;
        public const Avalonia.Input.Key HangulMode = 9;
        public const Avalonia.Input.Key HanjaMode = 12;
        public const Avalonia.Input.Key Help = 33;
        public const Avalonia.Input.Key Home = 22;
        public const Avalonia.Input.Key I = 52;
        public const Avalonia.Input.Key ImeAccept = 16;
        public const Avalonia.Input.Key ImeConvert = 14;
        public const Avalonia.Input.Key ImeModeChange = 17;
        public const Avalonia.Input.Key ImeNonConvert = 15;
        public const Avalonia.Input.Key ImeProcessed = 155;
        public const Avalonia.Input.Key Insert = 31;
        public const Avalonia.Input.Key J = 53;
        public const Avalonia.Input.Key JunjaMode = 10;
        public const Avalonia.Input.Key K = 54;
        public const Avalonia.Input.Key KanaMode = 9;
        public const Avalonia.Input.Key KanjiMode = 12;
        public const Avalonia.Input.Key L = 55;
        public const Avalonia.Input.Key LaunchApplication1 = 138;
        public const Avalonia.Input.Key LaunchApplication2 = 139;
        public const Avalonia.Input.Key LaunchMail = 136;
        public const Avalonia.Input.Key Left = 23;
        public const Avalonia.Input.Key LeftAlt = 120;
        public const Avalonia.Input.Key LeftCtrl = 118;
        public const Avalonia.Input.Key LeftShift = 116;
        public const Avalonia.Input.Key LineFeed = 4;
        public const Avalonia.Input.Key LWin = 70;
        public const Avalonia.Input.Key M = 56;
        public const Avalonia.Input.Key MediaNextTrack = 132;
        public const Avalonia.Input.Key MediaPlayPause = 135;
        public const Avalonia.Input.Key MediaPreviousTrack = 133;
        public const Avalonia.Input.Key MediaStop = 134;
        public const Avalonia.Input.Key Multiply = 84;
        public const Avalonia.Input.Key N = 57;
        public const Avalonia.Input.Key Next = 20;
        public const Avalonia.Input.Key NoName = 169;
        public const Avalonia.Input.Key None = 0;
        public const Avalonia.Input.Key NumLock = 114;
        public const Avalonia.Input.Key NumPad0 = 74;
        public const Avalonia.Input.Key NumPad1 = 75;
        public const Avalonia.Input.Key NumPad2 = 76;
        public const Avalonia.Input.Key NumPad3 = 77;
        public const Avalonia.Input.Key NumPad4 = 78;
        public const Avalonia.Input.Key NumPad5 = 79;
        public const Avalonia.Input.Key NumPad6 = 80;
        public const Avalonia.Input.Key NumPad7 = 81;
        public const Avalonia.Input.Key NumPad8 = 82;
        public const Avalonia.Input.Key NumPad9 = 83;
        public const Avalonia.Input.Key O = 58;
        public const Avalonia.Input.Key Oem1 = 140;
        public const Avalonia.Input.Key Oem102 = 154;
        public const Avalonia.Input.Key Oem2 = 145;
        public const Avalonia.Input.Key Oem3 = 146;
        public const Avalonia.Input.Key Oem4 = 149;
        public const Avalonia.Input.Key Oem5 = 150;
        public const Avalonia.Input.Key Oem6 = 151;
        public const Avalonia.Input.Key Oem7 = 152;
        public const Avalonia.Input.Key Oem8 = 153;
        public const Avalonia.Input.Key OemAttn = 157;
        public const Avalonia.Input.Key OemAuto = 160;
        public const Avalonia.Input.Key OemBackslash = 154;
        public const Avalonia.Input.Key OemBackTab = 162;
        public const Avalonia.Input.Key OemClear = 171;
        public const Avalonia.Input.Key OemCloseBrackets = 151;
        public const Avalonia.Input.Key OemComma = 142;
        public const Avalonia.Input.Key OemCopy = 159;
        public const Avalonia.Input.Key OemEnlw = 161;
        public const Avalonia.Input.Key OemFinish = 158;
        public const Avalonia.Input.Key OemMinus = 143;
        public const Avalonia.Input.Key OemOpenBrackets = 149;
        public const Avalonia.Input.Key OemPeriod = 144;
        public const Avalonia.Input.Key OemPipe = 150;
        public const Avalonia.Input.Key OemPlus = 141;
        public const Avalonia.Input.Key OemQuestion = 145;
        public const Avalonia.Input.Key OemQuotes = 152;
        public const Avalonia.Input.Key OemSemicolon = 140;
        public const Avalonia.Input.Key OemTilde = 146;
        public const Avalonia.Input.Key P = 59;
        public const Avalonia.Input.Key Pa1 = 170;
        public const Avalonia.Input.Key PageDown = 20;
        public const Avalonia.Input.Key PageUp = 19;
        public const Avalonia.Input.Key Pause = 7;
        public const Avalonia.Input.Key Play = 167;
        public const Avalonia.Input.Key Print = 28;
        public const Avalonia.Input.Key PrintScreen = 30;
        public const Avalonia.Input.Key Prior = 19;
        public const Avalonia.Input.Key Q = 60;
        public const Avalonia.Input.Key R = 61;
        public const Avalonia.Input.Key Return = 6;
        public const Avalonia.Input.Key Right = 25;
        public const Avalonia.Input.Key RightAlt = 121;
        public const Avalonia.Input.Key RightCtrl = 119;
        public const Avalonia.Input.Key RightShift = 117;
        public const Avalonia.Input.Key RWin = 71;
        public const Avalonia.Input.Key S = 62;
        public const Avalonia.Input.Key Scroll = 115;
        public const Avalonia.Input.Key Select = 27;
        public const Avalonia.Input.Key SelectMedia = 137;
        public const Avalonia.Input.Key Separator = 86;
        public const Avalonia.Input.Key Sleep = 73;
        public const Avalonia.Input.Key Snapshot = 30;
        public const Avalonia.Input.Key Space = 18;
        public const Avalonia.Input.Key Subtract = 87;
        public const Avalonia.Input.Key System = 156;
        public const Avalonia.Input.Key T = 63;
        public const Avalonia.Input.Key Tab = 3;
        public const Avalonia.Input.Key U = 64;
        public const Avalonia.Input.Key Up = 24;
        public const Avalonia.Input.Key V = 65;
        public int value__;
        public const Avalonia.Input.Key VolumeDown = 130;
        public const Avalonia.Input.Key VolumeMute = 129;
        public const Avalonia.Input.Key VolumeUp = 131;
        public const Avalonia.Input.Key W = 66;
        public const Avalonia.Input.Key X = 67;
        public const Avalonia.Input.Key Y = 68;
        public const Avalonia.Input.Key Z = 69;
        public const Avalonia.Input.Key Zoom = 168;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class KeyBinding : Avalonia.AvaloniaObject
    {
        public KeyBinding() { throw null; }
        public static readonly Avalonia.StyledProperty<object> CommandParameterProperty;
        public static readonly Avalonia.StyledProperty<System.Windows.Input.ICommand> CommandProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.KeyGesture> GestureProperty;
        public System.Windows.Input.ICommand Command { get { throw null; } set { throw null; } }
        public object CommandParameter { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyGesture Gesture { get { throw null; } set { throw null; } }
        public void TryHandle(Avalonia.Input.KeyEventArgs args) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class KeyboardDevice : Avalonia.Input.IKeyboardDevice, Avalonia.Input.IInputDevice
    {
        public KeyboardDevice() { throw null; }
        public Avalonia.Input.IInputElement? FocusedElement { get { throw null; } }
        public Avalonia.Input.IFocusManager? FocusManager { get { throw null; } }
        public Avalonia.Input.IInputManager? InputManager { get { throw null; } }
        public static Avalonia.Input.IKeyboardDevice? Instance { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs e) { throw null; }
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged { add { throw null; } remove { throw null; } }
        public void SetFocusedElement(Avalonia.Input.IInputElement? element, Avalonia.Input.NavigationMethod? method, Avalonia.Input.KeyModifiers? keyModifiers) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected void RaisePropertyChanged(string propertyName = "") { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class KeyboardNavigation
    {
        public static readonly Avalonia.AttachedProperty<bool> IsTabStopProperty;
        public static readonly Avalonia.AttachedProperty<int> TabIndexProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Input.KeyboardNavigationMode> TabNavigationProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.AttachedProperty<Avalonia.Input.IInputElement?> TabOnceActiveElementProperty;
        public static bool GetIsTabStop(Avalonia.Input.InputElement element) { throw null; }
        public static int GetTabIndex(Avalonia.Input.IInputElement element) { throw null; }
        public static Avalonia.Input.KeyboardNavigationMode GetTabNavigation(Avalonia.Input.InputElement element) { throw null; }
        public static Avalonia.Input.IInputElement? GetTabOnceActiveElement(Avalonia.Input.InputElement element) { throw null; }
        public static void SetIsTabStop(Avalonia.Input.InputElement element, bool value) { throw null; }
        public static void SetTabIndex(Avalonia.Input.IInputElement element, int value) { throw null; }
        public static void SetTabNavigation(Avalonia.Input.InputElement element, Avalonia.Input.KeyboardNavigationMode value) { throw null; }
        public static void SetTabOnceActiveElement(Avalonia.Input.InputElement element, Avalonia.Input.IInputElement? value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class KeyboardNavigationHandler : Avalonia.Input.IKeyboardNavigationHandler
    {
        public KeyboardNavigationHandler() { throw null; }
        public static Avalonia.Input.IInputElement? GetNext(Avalonia.Input.IInputElement element, Avalonia.Input.NavigationDirection direction) { throw null; }
        public void Move(Avalonia.Input.IInputElement element, Avalonia.Input.NavigationDirection direction, Avalonia.Input.KeyModifiers keyModifiers = 0) { throw null; }
        public void SetOwner(Avalonia.Input.IInputRoot owner) { throw null; }
        protected virtual void OnKeyDown(object? sender, Avalonia.Input.KeyEventArgs e) { throw null; }
    }
    public sealed partial class KeyboardNavigationMode
    {
        public const Avalonia.Input.KeyboardNavigationMode Contained = 2;
        public const Avalonia.Input.KeyboardNavigationMode Continue = 0;
        public const Avalonia.Input.KeyboardNavigationMode Cycle = 1;
        public const Avalonia.Input.KeyboardNavigationMode Local = 5;
        public const Avalonia.Input.KeyboardNavigationMode None = 4;
        public const Avalonia.Input.KeyboardNavigationMode Once = 3;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class KeyEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public KeyEventArgs() { throw null; }
        public Avalonia.Input.IKeyboardDevice? Device { get { throw null; } set { throw null; } }
        public Avalonia.Input.Key? Key { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyModifiers? KeyModifiers { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class KeyGesture
    {
        public KeyGesture(Avalonia.Input.Key key, Avalonia.Input.KeyModifiers modifiers = 0) { throw null; }
        public Avalonia.Input.Key Key { get { throw null; } }
        public Avalonia.Input.KeyModifiers KeyModifiers { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator ==(Avalonia.Input.KeyGesture? left, Avalonia.Input.KeyGesture? right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator !=(Avalonia.Input.KeyGesture? left, Avalonia.Input.KeyGesture? right) { throw null; }
        public static Avalonia.Input.KeyGesture Parse(string gesture) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool? Equals(Avalonia.Input.KeyGesture? other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public bool Matches(Avalonia.Input.KeyEventArgs keyEvent) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class KeyModifiers
    {
        public const Avalonia.Input.KeyModifiers Alt = 1;
        public const Avalonia.Input.KeyModifiers Control = 2;
        public const Avalonia.Input.KeyModifiers Meta = 8;
        public const Avalonia.Input.KeyModifiers None = 0;
        public const Avalonia.Input.KeyModifiers Shift = 4;
        public int value__;
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class KeyStates
    {
        public const Avalonia.Input.KeyStates Down = 1;
        public const Avalonia.Input.KeyStates None = 0;
        public const Avalonia.Input.KeyStates Toggled = 2;
        public int value__;
    }
    public sealed partial class MouseButton
    {
        public const Avalonia.Input.MouseButton Left = 1;
        public const Avalonia.Input.MouseButton Middle = 3;
        public const Avalonia.Input.MouseButton None = 0;
        public const Avalonia.Input.MouseButton Right = 2;
        public int value__;
        public const Avalonia.Input.MouseButton XButton1 = 4;
        public const Avalonia.Input.MouseButton XButton2 = 5;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class MouseDevice : Avalonia.Input.IMouseDevice, Avalonia.Input.IPointerDevice, Avalonia.Input.IInputDevice
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public MouseDevice(Avalonia.Input.Pointer? pointer = null) { throw null; }
        public void Dispose() { throw null; }
        public void ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs e) { throw null; }
        public Avalonia.Input.IPointer? TryGetPointer(Avalonia.Input.Raw.RawPointerEventArgs ev) { throw null; }
    }
    public sealed partial class NavigationDirection
    {
        public const Avalonia.Input.NavigationDirection Down = 7;
        public const Avalonia.Input.NavigationDirection First = 2;
        public const Avalonia.Input.NavigationDirection Last = 3;
        public const Avalonia.Input.NavigationDirection Left = 4;
        public const Avalonia.Input.NavigationDirection Next = 0;
        public const Avalonia.Input.NavigationDirection PageDown = 9;
        public const Avalonia.Input.NavigationDirection PageUp = 8;
        public const Avalonia.Input.NavigationDirection Previous = 1;
        public const Avalonia.Input.NavigationDirection Right = 5;
        public const Avalonia.Input.NavigationDirection Up = 6;
        public int value__;
    }
    public static partial class NavigationDirectionExtensions
    {
        public static bool IsDirectional(this Avalonia.Input.NavigationDirection direction) { throw null; }
        public static bool IsTab(this Avalonia.Input.NavigationDirection direction) { throw null; }
        public static System.Nullable<Avalonia.Input.NavigationDirection> ToNavigationDirection(this Avalonia.Input.Key key, Avalonia.Input.KeyModifiers modifiers = 0) { throw null; }
    }
    public sealed partial class NavigationMethod
    {
        public const Avalonia.Input.NavigationMethod Directional = 2;
        public const Avalonia.Input.NavigationMethod Pointer = 3;
        public const Avalonia.Input.NavigationMethod Tab = 1;
        public const Avalonia.Input.NavigationMethod Unspecified = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PenDevice : Avalonia.Input.IPenDevice, Avalonia.Input.IPointerDevice, Avalonia.Input.IInputDevice
    {
        public PenDevice() { throw null; }
        public void Dispose() { throw null; }
        public void ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs e) { throw null; }
        public Avalonia.Input.IPointer? TryGetPointer(Avalonia.Input.Raw.RawPointerEventArgs ev) { throw null; }
    }
    public partial class PinchEndedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public PinchEndedEventArgs() { throw null; }
    }
    public partial class PinchEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public PinchEventArgs(double scale, Avalonia.Point scaleOrigin) { throw null; }
        public double Scale { get { throw null; } }
        public Avalonia.Point ScaleOrigin { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PinchGestureRecognizer : Avalonia.StyledElement, Avalonia.Input.GestureRecognizers.IGestureRecognizer
    {
        public PinchGestureRecognizer() { throw null; }
        public void Initialize(Avalonia.Input.IInputElement target, Avalonia.Input.GestureRecognizers.IGestureRecognizerActionsDispatcher actions) { throw null; }
        public void PointerCaptureLost(Avalonia.Input.IPointer pointer) { throw null; }
        public void PointerMoved(Avalonia.Input.PointerEventArgs e) { throw null; }
        public void PointerPressed(Avalonia.Input.PointerPressedEventArgs e) { throw null; }
        public void PointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Pointer : Avalonia.Input.IPointer
    {
        public Pointer(int? id, Avalonia.Input.PointerType? type, bool? isPrimary) { throw null; }
        public Avalonia.Input.IInputElement? Captured { get { throw null; } }
        public int? Id { get { throw null; } }
        public bool? IsPrimary { get { throw null; } }
        public Avalonia.Input.PointerType? Type { get { throw null; } }
        public static int? GetNextFreeId() { throw null; }
        public void Capture(Avalonia.Input.IInputElement? control) { throw null; }
        public void Dispose() { throw null; }
        protected virtual void PlatformCapture(Avalonia.Input.IInputElement? element) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PointerCaptureLostEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Input.IPointer Pointer { get { throw null; } }
    }
    public partial class PointerDeltaEventArgs : Avalonia.Input.PointerEventArgs
    {
        public Avalonia.Vector Delta { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PointerEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Input.KeyModifiers? KeyModifiers { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Input.IPointer Pointer { get { throw null; } }
        public ulong? Timestamp { get { throw null; } }
        protected Avalonia.Input.PointerPointProperties? Properties { get { throw null; } }
        public Avalonia.Input.PointerPoint? GetCurrentPoint(Avalonia.Visual? relativeTo) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.Collections.Generic.IReadOnlyList<Avalonia.Input.PointerPoint> GetIntermediatePoints(Avalonia.Visual? relativeTo) { throw null; }
        public Avalonia.Point? GetPosition(Avalonia.Visual? relativeTo) { throw null; }
    }
    public sealed partial class PointerPoint
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public PointerPoint(Avalonia.Input.IPointer pointer, Avalonia.Point position, Avalonia.Input.PointerPointProperties properties) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Input.IPointer Pointer { get { throw null; } }
        public Avalonia.Point Position { get { throw null; } }
        public Avalonia.Input.PointerPointProperties Properties { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Input.PointerPoint left, Avalonia.Input.PointerPoint right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Input.PointerPoint left, Avalonia.Input.PointerPoint right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Input.PointerPoint other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    public sealed partial class PointerPointProperties
    {
        public PointerPointProperties() { throw null; }
        public PointerPointProperties(Avalonia.Input.RawInputModifiers modifiers, Avalonia.Input.PointerUpdateKind kind) { throw null; }
        public PointerPointProperties(Avalonia.Input.RawInputModifiers modifiers, Avalonia.Input.PointerUpdateKind kind, float twist, float pressure, float xTilt, float yTilt) { throw null; }
        public bool IsBarrelButtonPressed { get { throw null; } }
        public bool IsEraser { get { throw null; } }
        public bool IsInverted { get { throw null; } }
        public bool IsLeftButtonPressed { get { throw null; } }
        public bool IsMiddleButtonPressed { get { throw null; } }
        public bool IsRightButtonPressed { get { throw null; } }
        public bool IsXButton1Pressed { get { throw null; } }
        public bool IsXButton2Pressed { get { throw null; } }
        public static Avalonia.Input.PointerPointProperties None { get { throw null; } }
        public Avalonia.Input.PointerUpdateKind PointerUpdateKind { get { throw null; } }
        public float Pressure { get { throw null; } }
        public float Twist { get { throw null; } }
        public float XTilt { get { throw null; } }
        public float YTilt { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Input.PointerPointProperties left, Avalonia.Input.PointerPointProperties right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Input.PointerPointProperties left, Avalonia.Input.PointerPointProperties right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Input.PointerPointProperties other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    public partial class PointerPressedEventArgs : Avalonia.Input.PointerEventArgs
    {
        public int ClickCount { get { throw null; } }
    }
    public partial class PointerReleasedEventArgs : Avalonia.Input.PointerEventArgs
    {
        public Avalonia.Input.MouseButton InitialPressMouseButton { get { throw null; } }
    }
    public sealed partial class PointerType
    {
        public const Avalonia.Input.PointerType Mouse = 0;
        public const Avalonia.Input.PointerType Pen = 2;
        public const Avalonia.Input.PointerType Touch = 1;
        public int value__;
    }
    public sealed partial class PointerUpdateKind
    {
        public const Avalonia.Input.PointerUpdateKind LeftButtonPressed = 0;
        public const Avalonia.Input.PointerUpdateKind LeftButtonReleased = 5;
        public const Avalonia.Input.PointerUpdateKind MiddleButtonPressed = 1;
        public const Avalonia.Input.PointerUpdateKind MiddleButtonReleased = 6;
        public const Avalonia.Input.PointerUpdateKind Other = 10;
        public const Avalonia.Input.PointerUpdateKind RightButtonPressed = 2;
        public const Avalonia.Input.PointerUpdateKind RightButtonReleased = 7;
        public int value__;
        public const Avalonia.Input.PointerUpdateKind XButton1Pressed = 3;
        public const Avalonia.Input.PointerUpdateKind XButton1Released = 8;
        public const Avalonia.Input.PointerUpdateKind XButton2Pressed = 4;
        public const Avalonia.Input.PointerUpdateKind XButton2Released = 9;
    }
    public static partial class PointerUpdateKindExtensions
    {
        public static Avalonia.Input.MouseButton GetMouseButton(this Avalonia.Input.PointerUpdateKind kind) { throw null; }
    }
    public partial class PointerWheelEventArgs : Avalonia.Input.PointerEventArgs
    {
        public Avalonia.Vector Delta { get { throw null; } set { throw null; } }
    }
    public sealed partial class PullDirection
    {
        public const Avalonia.Input.PullDirection BottomToTop = 1;
        public const Avalonia.Input.PullDirection LeftToRight = 2;
        public const Avalonia.Input.PullDirection RightToLeft = 3;
        public const Avalonia.Input.PullDirection TopToBottom = 0;
        public int value__;
    }
    public partial class PullGestureEndedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public PullGestureEndedEventArgs(int id, Avalonia.Input.PullDirection pullDirection) { throw null; }
        public int Id { get { throw null; } }
        public Avalonia.Input.PullDirection PullDirection { get { throw null; } }
    }
    public partial class PullGestureEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public PullGestureEventArgs(int id, Avalonia.Vector delta, Avalonia.Input.PullDirection pullDirection) { throw null; }
        public Avalonia.Vector Delta { get { throw null; } }
        public int Id { get { throw null; } }
        public Avalonia.Input.PullDirection PullDirection { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PullGestureRecognizer : Avalonia.StyledElement, Avalonia.Input.GestureRecognizers.IGestureRecognizer
    {
        public PullGestureRecognizer(Avalonia.Input.PullDirection pullDirection) { throw null; }
        public PullGestureRecognizer() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Input.PullGestureRecognizer, Avalonia.Input.PullDirection> PullDirectionProperty;
        public Avalonia.Input.PullDirection PullDirection { get { throw null; } set { throw null; } }
        public void Initialize(Avalonia.Input.IInputElement target, Avalonia.Input.GestureRecognizers.IGestureRecognizerActionsDispatcher actions) { throw null; }
        public void PointerCaptureLost(Avalonia.Input.IPointer pointer) { throw null; }
        public void PointerMoved(Avalonia.Input.PointerEventArgs e) { throw null; }
        public void PointerPressed(Avalonia.Input.PointerPressedEventArgs e) { throw null; }
        public void PointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class RawInputModifiers
    {
        public const Avalonia.Input.RawInputModifiers Alt = 1;
        public const Avalonia.Input.RawInputModifiers Control = 2;
        public const Avalonia.Input.RawInputModifiers KeyboardMask = 15;
        public const Avalonia.Input.RawInputModifiers LeftMouseButton = 16;
        public const Avalonia.Input.RawInputModifiers Meta = 8;
        public const Avalonia.Input.RawInputModifiers MiddleMouseButton = 64;
        public const Avalonia.Input.RawInputModifiers None = 0;
        public const Avalonia.Input.RawInputModifiers PenBarrelButton = 2048;
        public const Avalonia.Input.RawInputModifiers PenEraser = 1024;
        public const Avalonia.Input.RawInputModifiers PenInverted = 512;
        public const Avalonia.Input.RawInputModifiers RightMouseButton = 32;
        public const Avalonia.Input.RawInputModifiers Shift = 4;
        public int value__;
        public const Avalonia.Input.RawInputModifiers XButton1MouseButton = 128;
        public const Avalonia.Input.RawInputModifiers XButton2MouseButton = 256;
    }
    public partial class ScrollGestureEndedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public int Id { get { throw null; } }
    }
    public partial class ScrollGestureEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Vector Delta { get { throw null; } }
        public int Id { get { throw null; } }
        public bool ShouldEndScrollGesture { get { throw null; } set { throw null; } }
        public static int GetNextFreeId() { throw null; }
    }
    public sealed partial class StandardCursorType
    {
        public const Avalonia.Input.StandardCursorType AppStarting = 10;
        public const Avalonia.Input.StandardCursorType Arrow = 0;
        public const Avalonia.Input.StandardCursorType BottomLeftCorner = 18;
        public const Avalonia.Input.StandardCursorType BottomRightCorner = 19;
        public const Avalonia.Input.StandardCursorType BottomSide = 13;
        public const Avalonia.Input.StandardCursorType Cross = 3;
        public const Avalonia.Input.StandardCursorType DragCopy = 21;
        public const Avalonia.Input.StandardCursorType DragLink = 22;
        public const Avalonia.Input.StandardCursorType DragMove = 20;
        public const Avalonia.Input.StandardCursorType Hand = 9;
        public const Avalonia.Input.StandardCursorType Help = 11;
        public const Avalonia.Input.StandardCursorType Ibeam = 1;
        public const Avalonia.Input.StandardCursorType LeftSide = 14;
        public const Avalonia.Input.StandardCursorType No = 8;
        public const Avalonia.Input.StandardCursorType None = 23;
        public const Avalonia.Input.StandardCursorType RightSide = 15;
        public const Avalonia.Input.StandardCursorType SizeAll = 7;
        public const Avalonia.Input.StandardCursorType SizeNorthSouth = 6;
        public const Avalonia.Input.StandardCursorType SizeWestEast = 5;
        public const Avalonia.Input.StandardCursorType TopLeftCorner = 16;
        public const Avalonia.Input.StandardCursorType TopRightCorner = 17;
        public const Avalonia.Input.StandardCursorType TopSide = 12;
        public const Avalonia.Input.StandardCursorType UpArrow = 4;
        public int value__;
        public const Avalonia.Input.StandardCursorType Wait = 2;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TappedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Input.KeyModifiers KeyModifiers { get { throw null; } }
        public Avalonia.Input.IPointer Pointer { get { throw null; } }
        public ulong Timestamp { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Point? GetPosition(Avalonia.Visual? relativeTo) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextInputEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public TextInputEventArgs() { throw null; }
        public Avalonia.Input.IKeyboardDevice? Device { get { throw null; } set { throw null; } }
        public string? Text { get { throw null; } set { throw null; } }
    }
    public partial class TouchDevice : Avalonia.Input.IPointerDevice, Avalonia.Input.IInputDevice
    {
        public TouchDevice() { throw null; }
        public void Dispose() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void ProcessRawEvent(Avalonia.Input.Raw.RawInputEventArgs ev) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Input.IPointer? TryGetPointer(Avalonia.Input.Raw.RawPointerEventArgs ev) { throw null; }
    }
    public partial class VectorEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public Avalonia.Vector Vector { get { throw null; } set { throw null; } }
    }
}
namespace Avalonia.Input.GestureRecognizers
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class GestureRecognizerCollection : Avalonia.Input.GestureRecognizers.IGestureRecognizerActionsDispatcher
    {
        public GestureRecognizerCollection(Avalonia.Input.IInputElement inputElement) { throw null; }
        public int Count { get { throw null; } }
        public void Add(Avalonia.Input.GestureRecognizers.IGestureRecognizer recognizer) { throw null; }
        public System.Collections.Generic.IEnumerator<Avalonia.Input.GestureRecognizers.IGestureRecognizer> GetEnumerator() { throw null; }
    }
    public sealed partial class GestureRecognizerResult
    {
        public const Avalonia.Input.GestureRecognizers.GestureRecognizerResult Capture = 1;
        public const Avalonia.Input.GestureRecognizers.GestureRecognizerResult None = 0;
        public const Avalonia.Input.GestureRecognizers.GestureRecognizerResult ReleaseCapture = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IGestureRecognizer
    {
        void Initialize(Avalonia.Input.IInputElement target, Avalonia.Input.GestureRecognizers.IGestureRecognizerActionsDispatcher actions);
        void PointerCaptureLost(Avalonia.Input.IPointer pointer);
        void PointerMoved(Avalonia.Input.PointerEventArgs e);
        void PointerPressed(Avalonia.Input.PointerPressedEventArgs e);
        void PointerReleased(Avalonia.Input.PointerReleasedEventArgs e);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IGestureRecognizerActionsDispatcher
    {
        void Capture(Avalonia.Input.IPointer pointer, Avalonia.Input.GestureRecognizers.IGestureRecognizer recognizer);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ScrollGestureRecognizer : Avalonia.StyledElement, Avalonia.Input.GestureRecognizers.IGestureRecognizer
    {
        public ScrollGestureRecognizer() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer, bool> CanHorizontallyScrollProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer, bool> CanVerticallyScrollProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Input.GestureRecognizers.ScrollGestureRecognizer, int> ScrollStartDistanceProperty;
        public bool CanHorizontallyScroll { get { throw null; } set { throw null; } }
        public bool CanVerticallyScroll { get { throw null; } set { throw null; } }
        public int ScrollStartDistance { get { throw null; } set { throw null; } }
        public void Initialize(Avalonia.Input.IInputElement target, Avalonia.Input.GestureRecognizers.IGestureRecognizerActionsDispatcher actions) { throw null; }
        public void PointerCaptureLost(Avalonia.Input.IPointer pointer) { throw null; }
        public void PointerMoved(Avalonia.Input.PointerEventArgs e) { throw null; }
        public void PointerPressed(Avalonia.Input.PointerPressedEventArgs e) { throw null; }
        public void PointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { throw null; }
    }
}
namespace Avalonia.Input.Platform
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IClipboard
    {
        System.Threading.Tasks.Task ClearAsync();
        System.Threading.Tasks.Task<object> GetDataAsync(string format);
        System.Threading.Tasks.Task<string[]> GetFormatsAsync();
        System.Threading.Tasks.Task<string> GetTextAsync();
        System.Threading.Tasks.Task SetDataObjectAsync(Avalonia.Input.IDataObject data);
        System.Threading.Tasks.Task SetTextAsync(string text);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformDragSource
    {
        System.Threading.Tasks.Task<Avalonia.Input.DragDropEffects> DoDragDrop(Avalonia.Input.PointerEventArgs triggerEvent, Avalonia.Input.IDataObject data, Avalonia.Input.DragDropEffects allowedEffects);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PlatformHotkeyConfiguration
    {
        public PlatformHotkeyConfiguration() { throw null; }
        public PlatformHotkeyConfiguration(Avalonia.Input.KeyModifiers commandModifiers, Avalonia.Input.KeyModifiers selectionModifiers = 4, Avalonia.Input.KeyModifiers wholeWordTextActionModifiers = 2) { throw null; }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> Back { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyModifiers CommandModifiers { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> Copy { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> Cut { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheEndOfDocument { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheEndOfDocumentWithSelection { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheEndOfLine { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheEndOfLineWithSelection { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheStartOfDocument { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheStartOfDocumentWithSelection { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheStartOfLine { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> MoveCursorToTheStartOfLineWithSelection { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> OpenContextMenu { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> Paste { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> Redo { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> SelectAll { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyModifiers SelectionModifiers { get { throw null; } set { throw null; } }
        public System.Collections.Generic.List<Avalonia.Input.KeyGesture> Undo { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyModifiers WholeWordTextActionModifiers { get { throw null; } set { throw null; } }
    }
}
namespace Avalonia.Input.Raw
{
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IDragDropDevice : Avalonia.Input.IInputDevice
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RawDragEvent : Avalonia.Input.Raw.RawInputEventArgs
    {
        public RawDragEvent(Avalonia.Input.Raw.IDragDropDevice inputDevice, Avalonia.Input.Raw.RawDragEventType type, Avalonia.Input.IInputRoot root, Avalonia.Point location, Avalonia.Input.IDataObject data, Avalonia.Input.DragDropEffects effects, Avalonia.Input.RawInputModifiers modifiers) { throw null; }
        public Avalonia.Input.IDataObject Data { get { throw null; } }
        public Avalonia.Input.DragDropEffects Effects { get { throw null; } set { throw null; } }
        public Avalonia.Input.KeyModifiers KeyModifiers { get { throw null; } }
        public Avalonia.Point Location { get { throw null; } set { throw null; } }
        public Avalonia.Input.Raw.RawDragEventType Type { get { throw null; } }
    }
    public sealed partial class RawDragEventType
    {
        public const Avalonia.Input.Raw.RawDragEventType DragEnter = 0;
        public const Avalonia.Input.Raw.RawDragEventType DragLeave = 2;
        public const Avalonia.Input.Raw.RawDragEventType DragOver = 1;
        public const Avalonia.Input.Raw.RawDragEventType Drop = 3;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RawInputEventArgs
    {
        public RawInputEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root) { throw null; }
        public Avalonia.Input.IInputDevice Device { get { throw null; } }
        public bool Handled { get { throw null; } set { throw null; } }
        public Avalonia.Input.IInputRoot Root { get { throw null; } }
        public ulong Timestamp { get { throw null; } set { throw null; } }
    }
    public partial class RawKeyEventArgs : Avalonia.Input.Raw.RawInputEventArgs
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public RawKeyEventArgs(Avalonia.Input.IKeyboardDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Input.Raw.RawKeyEventType type, Avalonia.Input.Key key, Avalonia.Input.RawInputModifiers modifiers) { throw null; }
        public Avalonia.Input.Key Key { get { throw null; } set { throw null; } }
        public Avalonia.Input.RawInputModifiers Modifiers { get { throw null; } set { throw null; } }
        public Avalonia.Input.Raw.RawKeyEventType Type { get { throw null; } set { throw null; } }
    }
    public sealed partial class RawKeyEventType
    {
        public const Avalonia.Input.Raw.RawKeyEventType KeyDown = 0;
        public const Avalonia.Input.Raw.RawKeyEventType KeyUp = 1;
        public int value__;
    }
    public partial class RawMouseWheelEventArgs : Avalonia.Input.Raw.RawPointerEventArgs
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public RawMouseWheelEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Point position, Avalonia.Vector delta, Avalonia.Input.RawInputModifiers inputModifiers) { throw null; }
        public Avalonia.Vector Delta { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RawPointerEventArgs : Avalonia.Input.Raw.RawInputEventArgs
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public RawPointerEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Input.Raw.RawPointerEventType type, Avalonia.Point position, Avalonia.Input.RawInputModifiers inputModifiers) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public RawPointerEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Input.Raw.RawPointerEventType type, Avalonia.Input.Raw.RawPointerPoint point, Avalonia.Input.RawInputModifiers inputModifiers) { throw null; }
        public Avalonia.Input.RawInputModifiers? InputModifiers { get { throw null; } set { throw null; } }
        public System.Lazy<System.Collections.Generic.IReadOnlyList<Avalonia.Input.Raw.RawPointerPoint?>?>? IntermediatePoints { get { throw null; } set { throw null; } }
        public Avalonia.Input.Raw.RawPointerPoint? Point { get { throw null; } set { throw null; } }
        public Avalonia.Point? Position { get { throw null; } set { throw null; } }
        public long? RawPointerId { get { throw null; } set { throw null; } }
        public Avalonia.Input.Raw.RawPointerEventType? Type { get { throw null; } set { throw null; } }
    }
    public sealed partial class RawPointerEventType
    {
        public const Avalonia.Input.Raw.RawPointerEventType LeaveWindow = 0;
        public const Avalonia.Input.Raw.RawPointerEventType LeftButtonDown = 1;
        public const Avalonia.Input.Raw.RawPointerEventType LeftButtonUp = 2;
        public const Avalonia.Input.Raw.RawPointerEventType Magnify = 18;
        public const Avalonia.Input.Raw.RawPointerEventType MiddleButtonDown = 5;
        public const Avalonia.Input.Raw.RawPointerEventType MiddleButtonUp = 6;
        public const Avalonia.Input.Raw.RawPointerEventType Move = 11;
        public const Avalonia.Input.Raw.RawPointerEventType NonClientLeftButtonDown = 13;
        public const Avalonia.Input.Raw.RawPointerEventType RightButtonDown = 3;
        public const Avalonia.Input.Raw.RawPointerEventType RightButtonUp = 4;
        public const Avalonia.Input.Raw.RawPointerEventType Rotate = 19;
        public const Avalonia.Input.Raw.RawPointerEventType Swipe = 20;
        public const Avalonia.Input.Raw.RawPointerEventType TouchBegin = 14;
        public const Avalonia.Input.Raw.RawPointerEventType TouchCancel = 17;
        public const Avalonia.Input.Raw.RawPointerEventType TouchEnd = 16;
        public const Avalonia.Input.Raw.RawPointerEventType TouchUpdate = 15;
        public int value__;
        public const Avalonia.Input.Raw.RawPointerEventType Wheel = 12;
        public const Avalonia.Input.Raw.RawPointerEventType XButton1Down = 7;
        public const Avalonia.Input.Raw.RawPointerEventType XButton1Up = 8;
        public const Avalonia.Input.Raw.RawPointerEventType XButton2Down = 9;
        public const Avalonia.Input.Raw.RawPointerEventType XButton2Up = 10;
    }
    public partial class RawPointerGestureEventArgs : Avalonia.Input.Raw.RawPointerEventArgs
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public RawPointerGestureEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Input.Raw.RawPointerEventType gestureType, Avalonia.Point position, Avalonia.Vector delta, Avalonia.Input.RawInputModifiers inputModifiers) { throw null; }
        public Avalonia.Vector Delta { get { throw null; } }
    }
    public sealed partial class RawPointerPoint
    {
        public RawPointerPoint() { throw null; }
        public Avalonia.Point Position { get { throw null; } set { throw null; } }
        public float Pressure { get { throw null; } set { throw null; } }
        public float Twist { get { throw null; } set { throw null; } }
        public float XTilt { get { throw null; } set { throw null; } }
        public float YTilt { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Input.Raw.RawPointerPoint left, Avalonia.Input.Raw.RawPointerPoint right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Input.Raw.RawPointerPoint left, Avalonia.Input.Raw.RawPointerPoint right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Input.Raw.RawPointerPoint other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    public partial class RawSizeEventArgs
    {
        public RawSizeEventArgs(Avalonia.Size size) { throw null; }
        public RawSizeEventArgs(double width, double height) { throw null; }
        public Avalonia.Size Size { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RawTextInputEventArgs : Avalonia.Input.Raw.RawInputEventArgs
    {
        public RawTextInputEventArgs(Avalonia.Input.IKeyboardDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, string text) { throw null; }
        public string Text { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RawTouchEventArgs : Avalonia.Input.Raw.RawPointerEventArgs
    {
        public RawTouchEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Input.Raw.RawPointerEventType type, Avalonia.Point position, Avalonia.Input.RawInputModifiers inputModifiers, long rawPointerId) { throw null; }
        public RawTouchEventArgs(Avalonia.Input.IInputDevice device, ulong timestamp, Avalonia.Input.IInputRoot root, Avalonia.Input.Raw.RawPointerEventType type, Avalonia.Input.Raw.RawPointerPoint point, Avalonia.Input.RawInputModifiers inputModifiers, long rawPointerId) { throw null; }
    }
}
namespace Avalonia.Input.TextInput
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ITextInputMethodClient
    {
        Avalonia.Rect? CursorRectangle { get; }
        bool? SupportsPreedit { get; }
        bool? SupportsSurroundingText { get; }
        Avalonia.Input.TextInput.TextInputMethodSurroundingText? SurroundingText { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Visual TextViewVisual { get; }
        public event System.EventHandler? CursorRectangleChanged;
        void SelectInSurroundingText(int? start, int? end);
        void SetPreeditText(string? text);
        public event System.EventHandler? SurroundingTextChanged;
        public event System.EventHandler? TextViewVisualChanged;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITextInputMethodImpl
    {
        void Reset();
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void SetClient(Avalonia.Input.TextInput.ITextInputMethodClient? client);
        void SetCursorRect(Avalonia.Rect rect);
        void SetOptions(Avalonia.Input.TextInput.TextInputOptions options);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ITextInputMethodRoot : Avalonia.Input.IInputRoot, Avalonia.Input.IInputElement
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Input.TextInput.ITextInputMethodImpl? InputMethod { get; }
    }
    public sealed partial class TextInputContentType
    {
        public const Avalonia.Input.TextInput.TextInputContentType Alpha = 1;
        public const Avalonia.Input.TextInput.TextInputContentType Digits = 2;
        public const Avalonia.Input.TextInput.TextInputContentType Email = 5;
        public const Avalonia.Input.TextInput.TextInputContentType Name = 7;
        public const Avalonia.Input.TextInput.TextInputContentType Normal = 0;
        public const Avalonia.Input.TextInput.TextInputContentType Number = 4;
        public const Avalonia.Input.TextInput.TextInputContentType Password = 8;
        public const Avalonia.Input.TextInput.TextInputContentType Pin = 3;
        public const Avalonia.Input.TextInput.TextInputContentType Search = 10;
        public const Avalonia.Input.TextInput.TextInputContentType Social = 9;
        public const Avalonia.Input.TextInput.TextInputContentType Url = 6;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextInputMethodClientRequestedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public TextInputMethodClientRequestedEventArgs() { throw null; }
        public Avalonia.Input.TextInput.ITextInputMethodClient? Client { get { throw null; } set { throw null; } }
    }
    public sealed partial class TextInputMethodSurroundingText
    {
        public int AnchorOffset { get { throw null; } set { throw null; } }
        public int CursorOffset { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string Text { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Input.TextInput.TextInputMethodSurroundingText left, Avalonia.Input.TextInput.TextInputMethodSurroundingText right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Input.TextInput.TextInputMethodSurroundingText left, Avalonia.Input.TextInput.TextInputMethodSurroundingText right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Input.TextInput.TextInputMethodSurroundingText other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextInputOptions
    {
        public TextInputOptions() { throw null; }
        public static readonly Avalonia.AttachedProperty<bool> AutoCapitalizationProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Input.TextInput.TextInputContentType> ContentTypeProperty;
        public static readonly Avalonia.Input.TextInput.TextInputOptions Default;
        public static readonly Avalonia.AttachedProperty<bool> IsSensitiveProperty;
        public static readonly Avalonia.AttachedProperty<bool> LowercaseProperty;
        public static readonly Avalonia.AttachedProperty<bool> MultilineProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Input.TextInput.TextInputReturnKeyType> ReturnKeyTypeProperty;
        public static readonly Avalonia.AttachedProperty<bool> UppercaseProperty;
        public bool AutoCapitalization { get { throw null; } set { throw null; } }
        public Avalonia.Input.TextInput.TextInputContentType ContentType { get { throw null; } set { throw null; } }
        public bool IsSensitive { get { throw null; } set { throw null; } }
        public bool Lowercase { get { throw null; } set { throw null; } }
        public bool Multiline { get { throw null; } set { throw null; } }
        public Avalonia.Input.TextInput.TextInputReturnKeyType ReturnKeyType { get { throw null; } set { throw null; } }
        public bool Uppercase { get { throw null; } set { throw null; } }
        public static Avalonia.Input.TextInput.TextInputOptions FromStyledElement(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static bool GetAutoCapitalization(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static Avalonia.Input.TextInput.TextInputContentType GetContentType(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static bool GetIsSensitive(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static bool GetLowercase(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static bool GetMultiline(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static Avalonia.Input.TextInput.TextInputReturnKeyType GetReturnKeyType(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static bool GetUppercase(Avalonia.StyledElement avaloniaObject) { throw null; }
        public static void SetAutoCapitalization(Avalonia.StyledElement avaloniaObject, bool value) { throw null; }
        public static void SetContentType(Avalonia.StyledElement avaloniaObject, Avalonia.Input.TextInput.TextInputContentType value) { throw null; }
        public static void SetIsSensitive(Avalonia.StyledElement avaloniaObject, bool value) { throw null; }
        public static void SetLowercase(Avalonia.StyledElement avaloniaObject, bool value) { throw null; }
        public static void SetMultiline(Avalonia.StyledElement avaloniaObject, bool value) { throw null; }
        public static void SetReturnKeyType(Avalonia.StyledElement avaloniaObject, Avalonia.Input.TextInput.TextInputReturnKeyType value) { throw null; }
        public static void SetUppercase(Avalonia.StyledElement avaloniaObject, bool value) { throw null; }
    }
    public sealed partial class TextInputReturnKeyType
    {
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Default = 0;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Done = 2;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Go = 3;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Next = 6;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Previous = 7;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Return = 1;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Search = 5;
        public const Avalonia.Input.TextInput.TextInputReturnKeyType Send = 4;
        public int value__;
    }
}
namespace Avalonia.Interactivity
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class EventRoute
    {
        public EventRoute(Avalonia.Interactivity.RoutedEvent e) { throw null; }
        public bool HasHandlers { get { throw null; } }
        public void Add(Avalonia.Interactivity.Interactive target, System.Delegate handler, Avalonia.Interactivity.RoutingStrategies routes, bool handledEventsToo = false, System.Action<System.Delegate, object, Avalonia.Interactivity.RoutedEventArgs>? adapter = null) { throw null; }
        public void AddClassHandler(Avalonia.Interactivity.Interactive target) { throw null; }
        public void Dispose() { throw null; }
        public void RaiseEvent(Avalonia.Interactivity.Interactive source, Avalonia.Interactivity.RoutedEventArgs e) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Interactive : Avalonia.Layout.Layoutable
    {
        public Interactive() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        protected internal virtual Avalonia.Interactivity.Interactive? InteractiveParent { get { throw null; } }
        public void AddHandler(Avalonia.Interactivity.RoutedEvent routedEvent, System.Delegate handler, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false) { throw null; }
        public void AddHandler<TEventArgs>(Avalonia.Interactivity.RoutedEvent<TEventArgs> routedEvent, System.EventHandler<TEventArgs>? handler, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false) where TEventArgs : Avalonia.Interactivity.RoutedEventArgs { throw null; }
        public void RaiseEvent(Avalonia.Interactivity.RoutedEventArgs e) { throw null; }
        public void RemoveHandler(Avalonia.Interactivity.RoutedEvent routedEvent, System.Delegate handler) { throw null; }
        public void RemoveHandler<TEventArgs>(Avalonia.Interactivity.RoutedEvent<TEventArgs> routedEvent, System.EventHandler<TEventArgs>? handler) where TEventArgs : Avalonia.Interactivity.RoutedEventArgs { throw null; }
        protected Avalonia.Interactivity.EventRoute BuildEventRoute(Avalonia.Interactivity.RoutedEvent e) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class InteractiveExtensions
    {
        public static System.IDisposable AddDisposableHandler<TEventArgs>(this Avalonia.Interactivity.Interactive o, Avalonia.Interactivity.RoutedEvent<TEventArgs> routedEvent, System.EventHandler<TEventArgs> handler, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false) where TEventArgs : Avalonia.Interactivity.RoutedEventArgs { throw null; }
        public static Avalonia.Interactivity.Interactive? GetInteractiveParent(this Avalonia.Interactivity.Interactive o) { throw null; }
        public static System.IObservable<TEventArgs> GetObservable<TEventArgs>(this Avalonia.Interactivity.Interactive o, Avalonia.Interactivity.RoutedEvent<TEventArgs> routedEvent, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false) where TEventArgs : Avalonia.Interactivity.RoutedEventArgs { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RoutedEvent
    {
        public RoutedEvent(string name, Avalonia.Interactivity.RoutingStrategies routingStrategies, System.Type eventArgsType, System.Type ownerType) { throw null; }
        public System.Type EventArgsType { get { throw null; } }
        public bool HasRaisedSubscriptions { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Type OwnerType { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null, null})]
        public System.IObservable<(object, Avalonia.Interactivity.RoutedEventArgs)> Raised { get { throw null; } }
        public System.IObservable<Avalonia.Interactivity.RoutedEventArgs> RouteFinished { get { throw null; } }
        public Avalonia.Interactivity.RoutingStrategies RoutingStrategies { get { throw null; } }
        public static Avalonia.Interactivity.RoutedEvent<TEventArgs> Register<TOwner, TEventArgs>(string name, Avalonia.Interactivity.RoutingStrategies routingStrategy) where TEventArgs : Avalonia.Interactivity.RoutedEventArgs { throw null; }
        public static Avalonia.Interactivity.RoutedEvent<TEventArgs> Register<TEventArgs>(string name, Avalonia.Interactivity.RoutingStrategies routingStrategy, System.Type ownerType) where TEventArgs : Avalonia.Interactivity.RoutedEventArgs { throw null; }
        public System.IDisposable AddClassHandler(System.Type targetType, System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> handler, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RoutedEvent<TEventArgs> : Avalonia.Interactivity.RoutedEvent where TEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public RoutedEvent(string name, Avalonia.Interactivity.RoutingStrategies routingStrategies, System.Type ownerType) { throw null; }
        public System.IDisposable AddClassHandler<TTarget>(System.Action<TTarget, TEventArgs> handler, Avalonia.Interactivity.RoutingStrategies routes = 5, bool handledEventsToo = false) where TTarget : Avalonia.Interactivity.Interactive { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RoutedEventArgs
    {
        public RoutedEventArgs() { throw null; }
        public RoutedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent) { throw null; }
        public RoutedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent, object? source) { throw null; }
        public bool? Handled { get { throw null; } set { throw null; } }
        public Avalonia.Interactivity.RoutingStrategies? Route { get { throw null; } set { throw null; } }
        public Avalonia.Interactivity.RoutedEvent? RoutedEvent { get { throw null; } set { throw null; } }
        public object? Source { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RoutedEventRegistry
    {
        public RoutedEventRegistry() { throw null; }
        public static Avalonia.Interactivity.RoutedEventRegistry Instance { get { throw null; } }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public System.Collections.Generic.IEnumerable<Avalonia.Interactivity.RoutedEvent> GetAllRegistered() { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Interactivity.RoutedEvent> GetRegistered(System.Type type) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Interactivity.RoutedEvent> GetRegistered<TOwner>() { throw null; }
        public void Register(System.Type type, Avalonia.Interactivity.RoutedEvent @event) { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class RoutingStrategies
    {
        public const Avalonia.Interactivity.RoutingStrategies Bubble = 4;
        public const Avalonia.Interactivity.RoutingStrategies Direct = 1;
        public const Avalonia.Interactivity.RoutingStrategies Tunnel = 2;
        public int value__;
    }
}
namespace Avalonia.Layout
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class AttachedLayout : Avalonia.AvaloniaObject
    {
        protected AttachedLayout() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.Utilities.WeakEvent<Avalonia.Layout.AttachedLayout, System.EventArgs> ArrangeInvalidatedWeakEvent;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.Utilities.WeakEvent<Avalonia.Layout.AttachedLayout, System.EventArgs> MeasureInvalidatedWeakEvent;
        public string? LayoutId { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Size Arrange(Avalonia.Layout.LayoutContext context, Avalonia.Size finalSize) { throw null; }
        public event System.EventHandler? ArrangeInvalidated { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void InitializeForContext(Avalonia.Layout.LayoutContext context) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Size Measure(Avalonia.Layout.LayoutContext context, Avalonia.Size availableSize) { throw null; }
        public event System.EventHandler? MeasureInvalidated { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void UninitializeForContext(Avalonia.Layout.LayoutContext context) { throw null; }
        protected void InvalidateArrange() { throw null; }
        protected void InvalidateMeasure() { throw null; }
    }
    public partial class EffectiveViewportChangedEventArgs
    {
        public Avalonia.Rect EffectiveViewport { get { throw null; } }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class ElementRealizationOptions
    {
        public const Avalonia.Layout.ElementRealizationOptions ForceCreate = 1;
        public const Avalonia.Layout.ElementRealizationOptions None = 0;
        public const Avalonia.Layout.ElementRealizationOptions SuppressAutoRecycle = 2;
        public int value__;
    }
    public sealed partial class HorizontalAlignment
    {
        public const Avalonia.Layout.HorizontalAlignment Center = 2;
        public const Avalonia.Layout.HorizontalAlignment Left = 1;
        public const Avalonia.Layout.HorizontalAlignment Right = 3;
        public const Avalonia.Layout.HorizontalAlignment Stretch = 0;
        public int value__;
    }
    public partial interface IEmbeddedLayoutRoot : Avalonia.Layout.ILayoutRoot
    {
        Avalonia.Size AllocatedSize { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ILayoutManager
    {
        void ExecuteInitialLayoutPass();
        void ExecuteLayoutPass();
        void InvalidateArrange(Avalonia.Layout.Layoutable control);
        void InvalidateMeasure(Avalonia.Layout.Layoutable control);
        public event System.EventHandler LayoutUpdated;
        void RegisterEffectiveViewportListener(Avalonia.Layout.Layoutable control);
        void UnregisterEffectiveViewportListener(Avalonia.Layout.Layoutable control);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ILayoutRoot
    {
        Avalonia.Size ClientSize { get; }
        Avalonia.Layout.ILayoutManager LayoutManager { get; }
        double LayoutScaling { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Layoutable : Avalonia.Visual
    {
        public Layoutable() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Layout.Layoutable, Avalonia.Size> DesiredSizeProperty;
        public static readonly Avalonia.StyledProperty<double> HeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> MarginProperty;
        public static readonly Avalonia.StyledProperty<double> MaxHeightProperty;
        public static readonly Avalonia.StyledProperty<double> MaxWidthProperty;
        public static readonly Avalonia.StyledProperty<double> MinHeightProperty;
        public static readonly Avalonia.StyledProperty<double> MinWidthProperty;
        public static readonly Avalonia.StyledProperty<bool> UseLayoutRoundingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalAlignmentProperty;
        public static readonly Avalonia.StyledProperty<double> WidthProperty;
        public Avalonia.Size DesiredSize { get { throw null; } }
        public double Height { get { throw null; } set { throw null; } }
        public Avalonia.Layout.HorizontalAlignment HorizontalAlignment { get { throw null; } set { throw null; } }
        public bool IsArrangeValid { get { throw null; } }
        public bool IsMeasureValid { get { throw null; } }
        public Avalonia.Thickness Margin { get { throw null; } set { throw null; } }
        public double MaxHeight { get { throw null; } set { throw null; } }
        public double MaxWidth { get { throw null; } set { throw null; } }
        public double MinHeight { get { throw null; } set { throw null; } }
        public double MinWidth { get { throw null; } set { throw null; } }
        public bool UseLayoutRounding { get { throw null; } set { throw null; } }
        public Avalonia.Layout.VerticalAlignment VerticalAlignment { get { throw null; } set { throw null; } }
        public double Width { get { throw null; } set { throw null; } }
        protected static void AffectsArrange<T>(params Avalonia.AvaloniaProperty[] properties) where T : Avalonia.Layout.Layoutable { throw null; }
        protected static void AffectsMeasure<T>(params Avalonia.AvaloniaProperty[] properties) where T : Avalonia.Layout.Layoutable { throw null; }
        public virtual void ApplyTemplate() { throw null; }
        public void Arrange(Avalonia.Rect rect) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Layout.EffectiveViewportChangedEventArgs>? EffectiveViewportChanged { add { throw null; } remove { throw null; } }
        public void InvalidateArrange() { throw null; }
        public void InvalidateMeasure() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? LayoutUpdated { add { throw null; } remove { throw null; } }
        public void Measure(Avalonia.Size availableSize) { throw null; }
        protected virtual void ArrangeCore(Avalonia.Rect finalRect) { throw null; }
        protected virtual Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected virtual Avalonia.Size MeasureCore(Avalonia.Size availableSize) { throw null; }
        protected virtual Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected override void OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { throw null; }
        protected virtual void OnMeasureInvalidated() { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override sealed void OnVisualParentChanged(Avalonia.Visual? oldParent, Avalonia.Visual? newParent) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class LayoutContext : Avalonia.AvaloniaObject
    {
        public LayoutContext() { throw null; }
        public object? LayoutState { get { throw null; } set { throw null; } }
        protected virtual object? LayoutStateCore { get { throw null; } set { throw null; } }
    }
    public static partial class LayoutExtensions
    {
        public static Avalonia.Rect Align(this Avalonia.Rect rect, Avalonia.Rect constraint, Avalonia.Layout.HorizontalAlignment horizontalAlignment, Avalonia.Layout.VerticalAlignment verticalAlignment) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class LayoutHelper
    {
        public static double? LayoutEpsilon { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Size ApplyLayoutConstraints(Avalonia.Layout.Layoutable control, Avalonia.Size constraints) { throw null; }
        public static Avalonia.Size? ArrangeChild(Avalonia.Layout.Layoutable? child, Avalonia.Size? availableSize, Avalonia.Thickness? padding, Avalonia.Thickness? borderThickness) { throw null; }
        public static Avalonia.Size? ArrangeChild(Avalonia.Layout.Layoutable? child, Avalonia.Size? availableSize, Avalonia.Thickness? padding) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static double GetLayoutScale(Avalonia.Layout.Layoutable control) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static void InvalidateSelfAndChildrenMeasure(Avalonia.Layout.Layoutable control) { throw null; }
        public static Avalonia.Size? MeasureChild(Avalonia.Layout.Layoutable? control, Avalonia.Size? availableSize, Avalonia.Thickness? padding, Avalonia.Thickness? borderThickness) { throw null; }
        public static Avalonia.Size? MeasureChild(Avalonia.Layout.Layoutable? control, Avalonia.Size? availableSize, Avalonia.Thickness? padding) { throw null; }
        public static Avalonia.Size? RoundLayoutSizeUp(Avalonia.Size? size, double? dpiScaleX, double? dpiScaleY) { throw null; }
        public static Avalonia.Thickness? RoundLayoutThickness(Avalonia.Thickness? thickness, double? dpiScaleX, double? dpiScaleY) { throw null; }
        public static double? RoundLayoutValue(double? value, double? dpiScale) { throw null; }
        public static double? RoundLayoutValueUp(double? value, double? dpiScale) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class LayoutManager : Avalonia.Layout.ILayoutManager
    {
        public LayoutManager(Avalonia.Layout.ILayoutRoot owner) { throw null; }
        public void Dispose() { throw null; }
        public virtual void ExecuteInitialLayoutPass() { throw null; }
        public virtual void ExecuteLayoutPass() { throw null; }
        public virtual void InvalidateArrange(Avalonia.Layout.Layoutable control) { throw null; }
        public virtual void InvalidateMeasure(Avalonia.Layout.Layoutable control) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public virtual event System.EventHandler? LayoutUpdated { add { throw null; } remove { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class NonVirtualizingLayout : Avalonia.Layout.AttachedLayout
    {
        protected NonVirtualizingLayout() { throw null; }
        protected internal virtual Avalonia.Size ArrangeOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal virtual void InitializeForContextCore(Avalonia.Layout.LayoutContext context) { throw null; }
        protected internal abstract Avalonia.Size MeasureOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size availableSize);
        protected internal virtual void UninitializeForContextCore(Avalonia.Layout.LayoutContext context) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class NonVirtualizingLayoutContext : Avalonia.Layout.LayoutContext
    {
        protected NonVirtualizingLayoutContext() { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Layout.Layoutable> Children { get { throw null; } }
        protected abstract System.Collections.Generic.IReadOnlyList<Avalonia.Layout.Layoutable> ChildrenCore { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class NonVirtualizingStackLayout : Avalonia.Layout.NonVirtualizingLayout
    {
        public NonVirtualizingStackLayout() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> SpacingProperty;
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { throw null; } }
        public double Spacing { get { throw null; } set { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
    }
    public sealed partial class Orientation
    {
        public const Avalonia.Layout.Orientation Horizontal = 0;
        public int value__;
        public const Avalonia.Layout.Orientation Vertical = 1;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StackLayout : Avalonia.Layout.VirtualizingLayout
    {
        public StackLayout() { throw null; }
        public static readonly Avalonia.StyledProperty<bool> DisableVirtualizationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> SpacingProperty;
        public bool DisableVirtualization { get { throw null; } set { throw null; } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { throw null; } }
        public double Spacing { get { throw null; } set { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected override void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
        protected override void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected override void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StackLayoutState
    {
        public StackLayoutState() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class UniformGridLayout : Avalonia.Layout.VirtualizingLayout
    {
        public UniformGridLayout() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.UniformGridLayoutItemsJustification> ItemsJustificationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.UniformGridLayoutItemsStretch> ItemsStretchProperty;
        public static readonly Avalonia.StyledProperty<int> MaximumRowsOrColumnsProperty;
        public static readonly Avalonia.StyledProperty<double> MinColumnSpacingProperty;
        public static readonly Avalonia.StyledProperty<double> MinItemHeightProperty;
        public static readonly Avalonia.StyledProperty<double> MinItemWidthProperty;
        public static readonly Avalonia.StyledProperty<double> MinRowSpacingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public Avalonia.Layout.UniformGridLayoutItemsJustification ItemsJustification { get { throw null; } set { throw null; } }
        public Avalonia.Layout.UniformGridLayoutItemsStretch ItemsStretch { get { throw null; } set { throw null; } }
        public int MaximumRowsOrColumns { get { throw null; } set { throw null; } }
        public double MinColumnSpacing { get { throw null; } set { throw null; } }
        public double MinItemHeight { get { throw null; } set { throw null; } }
        public double MinItemWidth { get { throw null; } set { throw null; } }
        public double MinRowSpacing { get { throw null; } set { throw null; } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected override void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
        protected override void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected override void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
    }
    public sealed partial class UniformGridLayoutItemsJustification
    {
        public const Avalonia.Layout.UniformGridLayoutItemsJustification Center = 1;
        public const Avalonia.Layout.UniformGridLayoutItemsJustification End = 2;
        public const Avalonia.Layout.UniformGridLayoutItemsJustification SpaceAround = 3;
        public const Avalonia.Layout.UniformGridLayoutItemsJustification SpaceBetween = 4;
        public const Avalonia.Layout.UniformGridLayoutItemsJustification SpaceEvenly = 5;
        public const Avalonia.Layout.UniformGridLayoutItemsJustification Start = 0;
        public int value__;
    }
    public sealed partial class UniformGridLayoutItemsStretch
    {
        public const Avalonia.Layout.UniformGridLayoutItemsStretch Fill = 1;
        public const Avalonia.Layout.UniformGridLayoutItemsStretch None = 0;
        public const Avalonia.Layout.UniformGridLayoutItemsStretch Uniform = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class UniformGridLayoutState
    {
        public UniformGridLayoutState() { throw null; }
    }
    public sealed partial class VerticalAlignment
    {
        public const Avalonia.Layout.VerticalAlignment Bottom = 3;
        public const Avalonia.Layout.VerticalAlignment Center = 2;
        public const Avalonia.Layout.VerticalAlignment Stretch = 0;
        public const Avalonia.Layout.VerticalAlignment Top = 1;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class VirtualizingLayout : Avalonia.Layout.AttachedLayout
    {
        protected VirtualizingLayout() { throw null; }
        public void OnItemsChanged(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { throw null; }
        protected internal virtual Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal virtual void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
        protected internal abstract Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize);
        protected internal virtual void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { throw null; }
        protected internal virtual void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class VirtualizingLayoutContext : Avalonia.Layout.LayoutContext
    {
        protected VirtualizingLayoutContext() { throw null; }
        public int ItemCount { get { throw null; } }
        public Avalonia.Point LayoutOrigin { get { throw null; } set { throw null; } }
        public Avalonia.Rect RealizationRect { get { throw null; } }
        public int RecommendedAnchorIndex { get { throw null; } }
        protected abstract Avalonia.Point LayoutOriginCore { get; set; }
        protected virtual int RecommendedAnchorIndexCore { get { throw null; } }
        public object GetItemAt(int index) { throw null; }
        public Avalonia.Layout.Layoutable GetOrCreateElementAt(int index) { throw null; }
        public Avalonia.Layout.Layoutable GetOrCreateElementAt(int index, Avalonia.Layout.ElementRealizationOptions options) { throw null; }
        public void RecycleElement(Avalonia.Layout.Layoutable element) { throw null; }
        protected abstract object GetItemAtCore(int index);
        protected abstract Avalonia.Layout.Layoutable GetOrCreateElementAtCore(int index, Avalonia.Layout.ElementRealizationOptions options);
        protected abstract int ItemCountCore();
        protected abstract Avalonia.Rect RealizationRectCore();
        protected abstract void RecycleElementCore(Avalonia.Layout.Layoutable element);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class VirtualLayoutContextAdapter : Avalonia.Layout.NonVirtualizingLayoutContext
    {
        public VirtualLayoutContextAdapter(Avalonia.Layout.VirtualizingLayoutContext virtualizingContext) { throw null; }
        protected override System.Collections.Generic.IReadOnlyList<Avalonia.Layout.Layoutable> ChildrenCore { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        protected override object? LayoutStateCore { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class WrapLayout : Avalonia.Layout.VirtualizingLayout
    {
        public WrapLayout() { throw null; }
        public static readonly Avalonia.StyledProperty<double> HorizontalSpacingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> VerticalSpacingProperty;
        public double HorizontalSpacing { get { throw null; } set { throw null; } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { throw null; } }
        public double VerticalSpacing { get { throw null; } set { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected override void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
        protected override void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected override void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { throw null; }
    }
}
namespace Avalonia.Logging
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ILogSink
    {
        bool IsEnabled(Avalonia.Logging.LogEventLevel level, string area);
        void Log(Avalonia.Logging.LogEventLevel level, string area, object? source, string messageTemplate);
        void Log(Avalonia.Logging.LogEventLevel level, string area, object? source, string messageTemplate, params object?[] propertyValues);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class LogArea
    {
        public const string AndroidPlatform = "AndroidPlatform";
        public const string Animations = "Animations";
        public const string Binding = "Binding";
        public const string Control = "Control";
        public const string FreeDesktopPlatform = "FreeDesktopPlatform";
        public const string IOSPlatform = "IOSPlatform";
        public const string Layout = "Layout";
        public const string LinuxFramebufferPlatform = "LinuxFramebufferPlatform";
        public const string macOSPlatform = "macOSPlatform";
        public const string Platform = "Platform";
        public const string Property = "Property";
        public const string Visual = "Visual";
        public const string Win32Platform = "Win32Platform";
        public const string X11Platform = "X11Platform";
    }
    public sealed partial class LogEventLevel
    {
        public const Avalonia.Logging.LogEventLevel Debug = 1;
        public const Avalonia.Logging.LogEventLevel Error = 4;
        public const Avalonia.Logging.LogEventLevel Fatal = 5;
        public const Avalonia.Logging.LogEventLevel Information = 2;
        public int value__;
        public const Avalonia.Logging.LogEventLevel Verbose = 0;
        public const Avalonia.Logging.LogEventLevel Warning = 3;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class Logger
    {
        public static Avalonia.Logging.ILogSink? Sink { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool IsEnabled(Avalonia.Logging.LogEventLevel level, string area) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static System.Nullable<Avalonia.Logging.ParametrizedLogger> TryGet(Avalonia.Logging.LogEventLevel level, string area) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool TryGet(Avalonia.Logging.LogEventLevel level, string area, out Avalonia.Logging.ParametrizedLogger outLogger) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class ParametrizedLogger
    {
        public ParametrizedLogger(Avalonia.Logging.ILogSink sink, Avalonia.Logging.LogEventLevel level, string area) { throw null; }
        public bool IsValid { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Logging.ParametrizedLogger left, Avalonia.Logging.ParametrizedLogger right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Logging.ParametrizedLogger left, Avalonia.Logging.ParametrizedLogger right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Logging.ParametrizedLogger other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        public void Log(object? source, string messageTemplate) { throw null; }
        public void Log<T0>(object? source, string messageTemplate, T0 propertyValue0) { throw null; }
        public void Log<T0, T1>(object? source, string messageTemplate, T0 propertyValue0, T1 propertyValue1) { throw null; }
        public void Log<T0, T1, T2>(object? source, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2) { throw null; }
        public void Log<T0, T1, T2, T3>(object? source, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2, T3 propertyValue3) { throw null; }
        public void Log<T0, T1, T2, T3, T4>(object? source, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2, T3 propertyValue3, T4 propertyValue4) { throw null; }
        public void Log<T0, T1, T2, T3, T4, T5>(object? source, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2, T3 propertyValue3, T4 propertyValue4, T5 propertyValue5) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TraceLogSink : Avalonia.Logging.ILogSink
    {
        public TraceLogSink(Avalonia.Logging.LogEventLevel minimumLevel, System.Collections.Generic.IList<string>? areas = null) { throw null; }
        public bool IsEnabled(Avalonia.Logging.LogEventLevel level, string area) { throw null; }
        public void Log(Avalonia.Logging.LogEventLevel level, string area, object? source, string messageTemplate) { throw null; }
        public void Log(Avalonia.Logging.LogEventLevel level, string area, object? source, string messageTemplate, params object?[] propertyValues) { throw null; }
    }
}
namespace Avalonia.LogicalTree
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ChildIndexChangedEventArgs
    {
        public ChildIndexChangedEventArgs(Avalonia.LogicalTree.ILogical child) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.LogicalTree.ILogical? Child { get { throw null; } }
        public static Avalonia.LogicalTree.ChildIndexChangedEventArgs Empty { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class ControlLocator
    {
        public static System.IObservable<Avalonia.LogicalTree.ILogical?> Track(Avalonia.LogicalTree.ILogical relativeTo, int ancestorLevel, System.Type? ancestorType = null) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IChildIndexProvider
    {
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs>? ChildIndexChanged;
        int GetChildIndex(Avalonia.LogicalTree.ILogical child);
        bool TryGetTotalCount(out int count);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ILogical
    {
        bool IsAttachedToLogicalTree { get; }
        Avalonia.Collections.IAvaloniaReadOnlyList<Avalonia.LogicalTree.ILogical> LogicalChildren { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.LogicalTree.ILogical? LogicalParent { get; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>? AttachedToLogicalTree;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs>? DetachedFromLogicalTree;
        void NotifyAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e);
        void NotifyDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e);
        void NotifyResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs e);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ILogicalRoot : Avalonia.LogicalTree.ILogical
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class LogicalExtensions
    {
        public static T? FindLogicalAncestorOfType<T>(this Avalonia.LogicalTree.ILogical logical, bool includeSelf = false) where T : class { throw null; }
        public static T? FindLogicalDescendantOfType<T>(this Avalonia.LogicalTree.ILogical logical, bool includeSelf = false) where T : class { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.LogicalTree.ILogical> GetLogicalAncestors(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        public static System.Collections.Generic.IEnumerable<Avalonia.LogicalTree.ILogical> GetLogicalChildren(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.LogicalTree.ILogical> GetLogicalDescendants(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        public static Avalonia.LogicalTree.ILogical? GetLogicalParent(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        public static T? GetLogicalParent<T>(this Avalonia.LogicalTree.ILogical logical) where T : class { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.LogicalTree.ILogical> GetLogicalSiblings(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.LogicalTree.ILogical> GetSelfAndLogicalAncestors(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.LogicalTree.ILogical> GetSelfAndLogicalDescendants(this Avalonia.LogicalTree.ILogical logical) { throw null; }
        public static bool IsLogicalAncestorOf(this Avalonia.LogicalTree.ILogical logical, Avalonia.LogicalTree.ILogical target) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class LogicalTreeAttachmentEventArgs
    {
        public LogicalTreeAttachmentEventArgs(Avalonia.LogicalTree.ILogicalRoot root, Avalonia.LogicalTree.ILogical source, Avalonia.LogicalTree.ILogical? parent) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.LogicalTree.ILogical? Parent { get { throw null; } }
        public Avalonia.LogicalTree.ILogicalRoot Root { get { throw null; } }
        public Avalonia.LogicalTree.ILogical Source { get { throw null; } }
    }
}
namespace Avalonia.Media
{
    public sealed partial class AcrylicBackgroundSource
    {
        public const Avalonia.Media.AcrylicBackgroundSource Digger = 1;
        public const Avalonia.Media.AcrylicBackgroundSource None = 0;
        public int value__;
    }
    public sealed partial class AlignmentX
    {
        public const Avalonia.Media.AlignmentX Center = 1;
        public const Avalonia.Media.AlignmentX Left = 0;
        public const Avalonia.Media.AlignmentX Right = 2;
        public int value__;
    }
    public sealed partial class AlignmentY
    {
        public const Avalonia.Media.AlignmentY Bottom = 2;
        public const Avalonia.Media.AlignmentY Center = 1;
        public const Avalonia.Media.AlignmentY Top = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class ArcSegment : Avalonia.Media.PathSegment
    {
        public ArcSegment() { throw null; }
        public static readonly Avalonia.StyledProperty<bool> IsLargeArcProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Point> PointProperty;
        public static readonly Avalonia.StyledProperty<double> RotationAngleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Size> SizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.SweepDirection> SweepDirectionProperty;
        public bool IsLargeArc { get { throw null; } set { throw null; } }
        public Avalonia.Point Point { get { throw null; } set { throw null; } }
        public double RotationAngle { get { throw null; } set { throw null; } }
        public Avalonia.Size Size { get { throw null; } set { throw null; } }
        public Avalonia.Media.SweepDirection SweepDirection { get { throw null; } set { throw null; } }
        public override string ToString() { throw null; }
        protected override void ApplyTo(Avalonia.Media.StreamGeometryContext ctx) { throw null; }
    }
    public sealed partial class BaselineAlignment
    {
        public const Avalonia.Media.BaselineAlignment Baseline = 3;
        public const Avalonia.Media.BaselineAlignment Bottom = 2;
        public const Avalonia.Media.BaselineAlignment Center = 1;
        public const Avalonia.Media.BaselineAlignment Subscript = 6;
        public const Avalonia.Media.BaselineAlignment Superscript = 7;
        public const Avalonia.Media.BaselineAlignment TextBottom = 5;
        public const Avalonia.Media.BaselineAlignment TextTop = 4;
        public const Avalonia.Media.BaselineAlignment Top = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class BezierSegment : Avalonia.Media.PathSegment
    {
        public BezierSegment() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Point> Point1Property;
        public static readonly Avalonia.StyledProperty<Avalonia.Point> Point2Property;
        public static readonly Avalonia.StyledProperty<Avalonia.Point> Point3Property;
        public Avalonia.Point Point1 { get { throw null; } set { throw null; } }
        public Avalonia.Point Point2 { get { throw null; } set { throw null; } }
        public Avalonia.Point Point3 { get { throw null; } set { throw null; } }
        public override string ToString() { throw null; }
        protected override void ApplyTo(Avalonia.Media.StreamGeometryContext ctx) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class BoxShadow
    {
        public double Blur { get { throw null; } set { throw null; } }
        public Avalonia.Media.Color Color { get { throw null; } set { throw null; } }
        public bool IsDefault { get { throw null; } }
        [System.ObsoleteAttribute[missing](null)]
        public bool IsEmpty { get { throw null; } }
        public bool IsInset { get { throw null; } set { throw null; } }
        public double OffsetX { get { throw null; } set { throw null; } }
        public double OffsetY { get { throw null; } set { throw null; } }
        public double Spread { get { throw null; } set { throw null; } }
        public static bool operator ==(Avalonia.Media.BoxShadow left, Avalonia.Media.BoxShadow right) { throw null; }
        public static bool operator !=(Avalonia.Media.BoxShadow left, Avalonia.Media.BoxShadow right) { throw null; }
        public static Avalonia.Media.BoxShadow Parse(string s) { throw null; }
        public bool Equals(in Avalonia.Media.BoxShadow other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
        public Avalonia.Rect TransformBounds(in Avalonia.Rect rect) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public sealed partial class BoxShadows
    {
        public sealed partial class BoxShadowsEnumerator
        {
            public BoxShadowsEnumerator(Avalonia.Media.BoxShadows shadows) { throw null; }
            public Avalonia.Media.BoxShadow Current { get { throw null; } }
            public bool MoveNext() { throw null; }
        }
        public BoxShadows(Avalonia.Media.BoxShadow shadow) { throw null; }
        public BoxShadows(Avalonia.Media.BoxShadow first, Avalonia.Media.BoxShadow[] rest) { throw null; }
        public int Count { get { throw null; } }
        public bool HasInsetShadows { get { throw null; } }
        public Avalonia.Media.BoxShadow this[int c] { get { throw null; } }
        public static bool operator ==(Avalonia.Media.BoxShadows left, Avalonia.Media.BoxShadows right) { throw null; }
        public static bool operator !=(Avalonia.Media.BoxShadows left, Avalonia.Media.BoxShadows right) { throw null; }
        public static Avalonia.Media.BoxShadows Parse(string s) { throw null; }
        public bool Equals(Avalonia.Media.BoxShadows other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute[missing]]
        public Avalonia.Media.BoxShadows.BoxShadowsEnumerator GetEnumerator() { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
        public Avalonia.Rect TransformBounds(in Avalonia.Rect rect) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public abstract partial class Brush : Avalonia.Animation.Animatable
    {
        protected Brush() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> OpacityProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> TransformOriginProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.ITransform?> TransformProperty;
        public double? Opacity { get { throw null; } set { throw null; } }
        public Avalonia.Media.ITransform? Transform { get { throw null; } set { throw null; } }
        public Avalonia.RelativePoint? TransformOrigin { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.IBrush Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected static void AffectsRender<T>(params Avalonia.AvaloniaProperty[] properties) where T : Avalonia.Media.Brush { throw null; }
        public event System.EventHandler? Invalidated { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected void RaiseInvalidated(System.EventArgs e) { throw null; }
    }
    public partial class BrushConverter
    {
        public BrushConverter() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class Brushes
    {
        public static Avalonia.Media.IImmutableSolidColorBrush AliceBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush AntiqueWhite { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Aqua { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Aquamarine { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Azure { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Beige { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Bisque { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Black { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush BlanchedAlmond { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Blue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush BlueViolet { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Brown { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush BurlyWood { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush CadetBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Chartreuse { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Chocolate { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Coral { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush CornflowerBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Cornsilk { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Crimson { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Cyan { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkCyan { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkGoldenrod { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkGray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkKhaki { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkMagenta { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkOliveGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkOrange { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkOrchid { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkRed { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkSalmon { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkSeaGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkSlateBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkSlateGray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkTurquoise { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DarkViolet { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DeepPink { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DeepSkyBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DimGray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush DodgerBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Firebrick { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush FloralWhite { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush ForestGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Fuchsia { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Gainsboro { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush GhostWhite { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Gold { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Goldenrod { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Gray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Green { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush GreenYellow { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Honeydew { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush HotPink { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush IndianRed { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Indigo { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Ivory { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Khaki { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Lavender { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LavenderBlush { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LawnGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LemonChiffon { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightCoral { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightCyan { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightGoldenrodYellow { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightGray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightPink { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightSalmon { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightSeaGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightSkyBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightSlateGray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightSteelBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LightYellow { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Lime { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush LimeGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Linen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Magenta { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Maroon { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumAquamarine { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumOrchid { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumPurple { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumSeaGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumSlateBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumSpringGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumTurquoise { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MediumVioletRed { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MidnightBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MintCream { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush MistyRose { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Moccasin { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush NavajoWhite { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Navy { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush OldLace { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Olive { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush OliveDrab { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Orange { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush OrangeRed { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Orchid { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PaleGoldenrod { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PaleGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PaleTurquoise { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PaleVioletRed { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PapayaWhip { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PeachPuff { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Peru { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Pink { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Plum { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush PowderBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Purple { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Red { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush RosyBrown { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush RoyalBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SaddleBrown { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Salmon { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SandyBrown { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SeaGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SeaShell { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Sienna { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Silver { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SkyBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SlateBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SlateGray { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Snow { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SpringGreen { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush SteelBlue { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Tan { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Teal { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Thistle { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Tomato { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Transparent { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Turquoise { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Violet { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Wheat { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush White { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush WhiteSmoke { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush Yellow { get { throw null; } }
        public static Avalonia.Media.IImmutableSolidColorBrush YellowGreen { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class BrushExtensions
    {
        public static Avalonia.Media.IImmutableBrush ToImmutable(this Avalonia.Media.IBrush brush) { throw null; }
        public static Avalonia.Media.Immutable.ImmutableDashStyle ToImmutable(this Avalonia.Media.IDashStyle style) { throw null; }
        public static Avalonia.Media.Immutable.ImmutablePen ToImmutable(this Avalonia.Media.IPen pen) { throw null; }
    }
    public sealed partial class BrushMappingMode
    {
        public const Avalonia.Media.BrushMappingMode Absolute = 0;
        public const Avalonia.Media.BrushMappingMode RelativeToBoundingBox = 1;
        public int value__;
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    [System.Diagnostics.DebuggerDisplayAttribute[missing](null)]
    public sealed partial class CharacterHit
    {
        public CharacterHit(int firstCharacterIndex, int trailingLength = 0) { throw null; }
        public int FirstCharacterIndex { get { throw null; } }
        public int TrailingLength { get { throw null; } }
        public static bool operator ==(Avalonia.Media.CharacterHit left, Avalonia.Media.CharacterHit right) { throw null; }
        public static bool operator !=(Avalonia.Media.CharacterHit left, Avalonia.Media.CharacterHit right) { throw null; }
        public bool Equals(Avalonia.Media.CharacterHit other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Color
    {
        public Color(byte a, byte r, byte g, byte b) { throw null; }
        public byte A { get { throw null; } }
        public byte B { get { throw null; } }
        public byte G { get { throw null; } }
        public byte R { get { throw null; } }
        public static Avalonia.Media.Color FromArgb(byte a, byte r, byte g, byte b) { throw null; }
        public static Avalonia.Media.Color FromRgb(byte r, byte g, byte b) { throw null; }
        public static Avalonia.Media.Color FromUInt32(uint value) { throw null; }
        public static bool operator ==(Avalonia.Media.Color left, Avalonia.Media.Color right) { throw null; }
        public static bool operator !=(Avalonia.Media.Color left, Avalonia.Media.Color right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.Color Parse(string s) { throw null; }
        public static Avalonia.Media.Color Parse(System.ReadOnlySpan<char> s) { throw null; }
        public static Avalonia.Media.HslColor ToHsl(Avalonia.Media.Color color) { throw null; }
        public static Avalonia.Media.HslColor ToHsl(byte red, byte green, byte blue, byte alpha = 255) { throw null; }
        public static Avalonia.Media.HsvColor ToHsv(Avalonia.Media.Color color) { throw null; }
        public static Avalonia.Media.HsvColor ToHsv(byte red, byte green, byte blue, byte alpha = 255) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool TryParse(string s, out Avalonia.Media.Color color) { throw null; }
        public static bool TryParse(System.ReadOnlySpan<char> s, out Avalonia.Media.Color color) { throw null; }
        public bool Equals(Avalonia.Media.Color other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Media.HslColor ToHsl() { throw null; }
        public Avalonia.Media.HsvColor ToHsv() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        public uint ToUint32() { throw null; }
    }
    public sealed partial class Colors
    {
        public Colors() { throw null; }
        public static Avalonia.Media.Color AliceBlue { get { throw null; } }
        public static Avalonia.Media.Color AntiqueWhite { get { throw null; } }
        public static Avalonia.Media.Color Aqua { get { throw null; } }
        public static Avalonia.Media.Color Aquamarine { get { throw null; } }
        public static Avalonia.Media.Color Azure { get { throw null; } }
        public static Avalonia.Media.Color Beige { get { throw null; } }
        public static Avalonia.Media.Color Bisque { get { throw null; } }
        public static Avalonia.Media.Color Black { get { throw null; } }
        public static Avalonia.Media.Color BlanchedAlmond { get { throw null; } }
        public static Avalonia.Media.Color Blue { get { throw null; } }
        public static Avalonia.Media.Color BlueViolet { get { throw null; } }
        public static Avalonia.Media.Color Brown { get { throw null; } }
        public static Avalonia.Media.Color BurlyWood { get { throw null; } }
        public static Avalonia.Media.Color CadetBlue { get { throw null; } }
        public static Avalonia.Media.Color Chartreuse { get { throw null; } }
        public static Avalonia.Media.Color Chocolate { get { throw null; } }
        public static Avalonia.Media.Color Coral { get { throw null; } }
        public static Avalonia.Media.Color CornflowerBlue { get { throw null; } }
        public static Avalonia.Media.Color Cornsilk { get { throw null; } }
        public static Avalonia.Media.Color Crimson { get { throw null; } }
        public static Avalonia.Media.Color Cyan { get { throw null; } }
        public static Avalonia.Media.Color DarkBlue { get { throw null; } }
        public static Avalonia.Media.Color DarkCyan { get { throw null; } }
        public static Avalonia.Media.Color DarkGoldenrod { get { throw null; } }
        public static Avalonia.Media.Color DarkGray { get { throw null; } }
        public static Avalonia.Media.Color DarkGreen { get { throw null; } }
        public static Avalonia.Media.Color DarkKhaki { get { throw null; } }
        public static Avalonia.Media.Color DarkMagenta { get { throw null; } }
        public static Avalonia.Media.Color DarkOliveGreen { get { throw null; } }
        public static Avalonia.Media.Color DarkOrange { get { throw null; } }
        public static Avalonia.Media.Color DarkOrchid { get { throw null; } }
        public static Avalonia.Media.Color DarkRed { get { throw null; } }
        public static Avalonia.Media.Color DarkSalmon { get { throw null; } }
        public static Avalonia.Media.Color DarkSeaGreen { get { throw null; } }
        public static Avalonia.Media.Color DarkSlateBlue { get { throw null; } }
        public static Avalonia.Media.Color DarkSlateGray { get { throw null; } }
        public static Avalonia.Media.Color DarkTurquoise { get { throw null; } }
        public static Avalonia.Media.Color DarkViolet { get { throw null; } }
        public static Avalonia.Media.Color DeepPink { get { throw null; } }
        public static Avalonia.Media.Color DeepSkyBlue { get { throw null; } }
        public static Avalonia.Media.Color DimGray { get { throw null; } }
        public static Avalonia.Media.Color DodgerBlue { get { throw null; } }
        public static Avalonia.Media.Color Firebrick { get { throw null; } }
        public static Avalonia.Media.Color FloralWhite { get { throw null; } }
        public static Avalonia.Media.Color ForestGreen { get { throw null; } }
        public static Avalonia.Media.Color Fuchsia { get { throw null; } }
        public static Avalonia.Media.Color Gainsboro { get { throw null; } }
        public static Avalonia.Media.Color GhostWhite { get { throw null; } }
        public static Avalonia.Media.Color Gold { get { throw null; } }
        public static Avalonia.Media.Color Goldenrod { get { throw null; } }
        public static Avalonia.Media.Color Gray { get { throw null; } }
        public static Avalonia.Media.Color Green { get { throw null; } }
        public static Avalonia.Media.Color GreenYellow { get { throw null; } }
        public static Avalonia.Media.Color Honeydew { get { throw null; } }
        public static Avalonia.Media.Color HotPink { get { throw null; } }
        public static Avalonia.Media.Color IndianRed { get { throw null; } }
        public static Avalonia.Media.Color Indigo { get { throw null; } }
        public static Avalonia.Media.Color Ivory { get { throw null; } }
        public static Avalonia.Media.Color Khaki { get { throw null; } }
        public static Avalonia.Media.Color Lavender { get { throw null; } }
        public static Avalonia.Media.Color LavenderBlush { get { throw null; } }
        public static Avalonia.Media.Color LawnGreen { get { throw null; } }
        public static Avalonia.Media.Color LemonChiffon { get { throw null; } }
        public static Avalonia.Media.Color LightBlue { get { throw null; } }
        public static Avalonia.Media.Color LightCoral { get { throw null; } }
        public static Avalonia.Media.Color LightCyan { get { throw null; } }
        public static Avalonia.Media.Color LightGoldenrodYellow { get { throw null; } }
        public static Avalonia.Media.Color LightGray { get { throw null; } }
        public static Avalonia.Media.Color LightGreen { get { throw null; } }
        public static Avalonia.Media.Color LightPink { get { throw null; } }
        public static Avalonia.Media.Color LightSalmon { get { throw null; } }
        public static Avalonia.Media.Color LightSeaGreen { get { throw null; } }
        public static Avalonia.Media.Color LightSkyBlue { get { throw null; } }
        public static Avalonia.Media.Color LightSlateGray { get { throw null; } }
        public static Avalonia.Media.Color LightSteelBlue { get { throw null; } }
        public static Avalonia.Media.Color LightYellow { get { throw null; } }
        public static Avalonia.Media.Color Lime { get { throw null; } }
        public static Avalonia.Media.Color LimeGreen { get { throw null; } }
        public static Avalonia.Media.Color Linen { get { throw null; } }
        public static Avalonia.Media.Color Magenta { get { throw null; } }
        public static Avalonia.Media.Color Maroon { get { throw null; } }
        public static Avalonia.Media.Color MediumAquamarine { get { throw null; } }
        public static Avalonia.Media.Color MediumBlue { get { throw null; } }
        public static Avalonia.Media.Color MediumOrchid { get { throw null; } }
        public static Avalonia.Media.Color MediumPurple { get { throw null; } }
        public static Avalonia.Media.Color MediumSeaGreen { get { throw null; } }
        public static Avalonia.Media.Color MediumSlateBlue { get { throw null; } }
        public static Avalonia.Media.Color MediumSpringGreen { get { throw null; } }
        public static Avalonia.Media.Color MediumTurquoise { get { throw null; } }
        public static Avalonia.Media.Color MediumVioletRed { get { throw null; } }
        public static Avalonia.Media.Color MidnightBlue { get { throw null; } }
        public static Avalonia.Media.Color MintCream { get { throw null; } }
        public static Avalonia.Media.Color MistyRose { get { throw null; } }
        public static Avalonia.Media.Color Moccasin { get { throw null; } }
        public static Avalonia.Media.Color NavajoWhite { get { throw null; } }
        public static Avalonia.Media.Color Navy { get { throw null; } }
        public static Avalonia.Media.Color OldLace { get { throw null; } }
        public static Avalonia.Media.Color Olive { get { throw null; } }
        public static Avalonia.Media.Color OliveDrab { get { throw null; } }
        public static Avalonia.Media.Color Orange { get { throw null; } }
        public static Avalonia.Media.Color OrangeRed { get { throw null; } }
        public static Avalonia.Media.Color Orchid { get { throw null; } }
        public static Avalonia.Media.Color PaleGoldenrod { get { throw null; } }
        public static Avalonia.Media.Color PaleGreen { get { throw null; } }
        public static Avalonia.Media.Color PaleTurquoise { get { throw null; } }
        public static Avalonia.Media.Color PaleVioletRed { get { throw null; } }
        public static Avalonia.Media.Color PapayaWhip { get { throw null; } }
        public static Avalonia.Media.Color PeachPuff { get { throw null; } }
        public static Avalonia.Media.Color Peru { get { throw null; } }
        public static Avalonia.Media.Color Pink { get { throw null; } }
        public static Avalonia.Media.Color Plum { get { throw null; } }
        public static Avalonia.Media.Color PowderBlue { get { throw null; } }
        public static Avalonia.Media.Color Purple { get { throw null; } }
        public static Avalonia.Media.Color Red { get { throw null; } }
        public static Avalonia.Media.Color RosyBrown { get { throw null; } }
        public static Avalonia.Media.Color RoyalBlue { get { throw null; } }
        public static Avalonia.Media.Color SaddleBrown { get { throw null; } }
        public static Avalonia.Media.Color Salmon { get { throw null; } }
        public static Avalonia.Media.Color SandyBrown { get { throw null; } }
        public static Avalonia.Media.Color SeaGreen { get { throw null; } }
        public static Avalonia.Media.Color SeaShell { get { throw null; } }
        public static Avalonia.Media.Color Sienna { get { throw null; } }
        public static Avalonia.Media.Color Silver { get { throw null; } }
        public static Avalonia.Media.Color SkyBlue { get { throw null; } }
        public static Avalonia.Media.Color SlateBlue { get { throw null; } }
        public static Avalonia.Media.Color SlateGray { get { throw null; } }
        public static Avalonia.Media.Color Snow { get { throw null; } }
        public static Avalonia.Media.Color SpringGreen { get { throw null; } }
        public static Avalonia.Media.Color SteelBlue { get { throw null; } }
        public static Avalonia.Media.Color Tan { get { throw null; } }
        public static Avalonia.Media.Color Teal { get { throw null; } }
        public static Avalonia.Media.Color Thistle { get { throw null; } }
        public static Avalonia.Media.Color Tomato { get { throw null; } }
        public static Avalonia.Media.Color Transparent { get { throw null; } }
        public static Avalonia.Media.Color Turquoise { get { throw null; } }
        public static Avalonia.Media.Color Violet { get { throw null; } }
        public static Avalonia.Media.Color Wheat { get { throw null; } }
        public static Avalonia.Media.Color White { get { throw null; } }
        public static Avalonia.Media.Color WhiteSmoke { get { throw null; } }
        public static Avalonia.Media.Color Yellow { get { throw null; } }
        public static Avalonia.Media.Color YellowGreen { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CombinedGeometry : Avalonia.Media.Geometry
    {
        public CombinedGeometry() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public CombinedGeometry(Avalonia.Media.Geometry geometry1, Avalonia.Media.Geometry geometry2) { throw null; }
        public CombinedGeometry(Avalonia.Media.GeometryCombineMode? combineMode, Avalonia.Media.Geometry? geometry1, Avalonia.Media.Geometry? geometry2) { throw null; }
        public CombinedGeometry(Avalonia.Media.GeometryCombineMode? combineMode, Avalonia.Media.Geometry? geometry1, Avalonia.Media.Geometry? geometry2, Avalonia.Media.Transform? transform) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry?> Geometry1Property;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry?> Geometry2Property;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.GeometryCombineMode> GeometryCombineModeProperty;
        public Avalonia.Media.Geometry? Geometry1 { get { throw null; } set { throw null; } }
        public Avalonia.Media.Geometry? Geometry2 { get { throw null; } set { throw null; } }
        public Avalonia.Media.GeometryCombineMode? GeometryCombineMode { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override Avalonia.Media.Geometry Clone() { throw null; }
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    public sealed partial class ConicGradientBrush : Avalonia.Media.GradientBrush, Avalonia.Media.IConicGradientBrush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        public ConicGradientBrush() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> AngleProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> CenterProperty;
        public double Angle { get { throw null; } set { throw null; } }
        public Avalonia.RelativePoint Center { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override Avalonia.Media.IImmutableBrush ToImmutable() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DashStyle : Avalonia.Animation.Animatable, Avalonia.Media.IDashStyle, Avalonia.Media.IAffectsRender
    {
        public DashStyle() { throw null; }
        public DashStyle(System.Collections.Generic.IEnumerable<double?>? dashes, double? offset) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Collections.AvaloniaList<double>> DashesProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> OffsetProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static Avalonia.Media.IDashStyle Dash { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static Avalonia.Media.IDashStyle DashDot { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static Avalonia.Media.IDashStyle DashDotDot { get { throw null; } }
        public Avalonia.Collections.AvaloniaList<double?>? Dashes { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static Avalonia.Media.IDashStyle Dot { get { throw null; } }
        public double? Offset { get { throw null; } set { throw null; } }
        public event System.EventHandler? Invalidated { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.Immutable.ImmutableDashStyle ToImmutable() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    public abstract partial class Drawing : Avalonia.AvaloniaObject
    {
        protected Drawing() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public abstract void Draw(Avalonia.Media.DrawingContext context);
        public abstract Avalonia.Rect GetBounds();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public sealed partial class DrawingCollection : Avalonia.Collections.AvaloniaList<Avalonia.Media.Drawing>
    {
        public DrawingCollection() { throw null; }
        public DrawingCollection(System.Collections.Generic.IEnumerable<Avalonia.Media.Drawing> items) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class DrawingContext
    {
        public sealed partial class PushedState
        {
            public sealed partial class PushedStateType
            {
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType Clip = 3;
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType GeometryClip = 5;
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType Matrix = 1;
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType MatrixContainer = 4;
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType None = 0;
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType Opacity = 2;
                public const Avalonia.Media.DrawingContext.PushedState.PushedStateType OpacityMask = 6;
                public int value__;
            }
            [System.Runtime.CompilerServices.NullableContextAttribute(null)]
            public PushedState(Avalonia.Media.DrawingContext context, Avalonia.Media.DrawingContext.PushedState.PushedStateType type, Avalonia.Matrix matrix = null) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator ==(Avalonia.Media.DrawingContext.PushedState left, Avalonia.Media.DrawingContext.PushedState right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator !=(Avalonia.Media.DrawingContext.PushedState left, Avalonia.Media.DrawingContext.PushedState right) { throw null; }
            public void Dispose() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public bool Equals(Avalonia.Media.DrawingContext.PushedState other) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override string ToString() { throw null; }
        }
        public DrawingContext(Avalonia.Platform.IDrawingContextImpl impl) { throw null; }
        public DrawingContext(Avalonia.Platform.IDrawingContextImpl impl, bool ownsImpl) { throw null; }
        [System.ObsoleteAttribute[missing](null)]
        public Avalonia.Matrix CurrentContainerTransform { get { throw null; } }
        public Avalonia.Matrix CurrentTransform { get { throw null; } }
        public Avalonia.Platform.IDrawingContextImpl PlatformImpl { get { throw null; } }
        public void Custom(Avalonia.Rendering.SceneGraph.ICustomDrawOperation custom) { throw null; }
        public void Dispose() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void DrawEllipse(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.Point? center, double? radiusX, double? radiusY) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void DrawGeometry(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.Media.Geometry geometry) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void DrawGeometry(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.Platform.IGeometryImpl geometry) { throw null; }
        public void DrawGlyphRun(Avalonia.Media.IBrush foreground, Avalonia.Media.GlyphRun glyphRun) { throw null; }
        public void DrawImage(Avalonia.Media.IImage source, Avalonia.Rect rect) { throw null; }
        public void DrawImage(Avalonia.Media.IImage source, Avalonia.Rect sourceRect, Avalonia.Rect destRect, Avalonia.Media.Imaging.BitmapInterpolationMode bitmapInterpolationMode = 0) { throw null; }
        public void DrawLine(Avalonia.Media.IPen pen, Avalonia.Point p1, Avalonia.Point p2) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void DrawRectangle(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.Rect? rect, double? radiusX = 0, double? radiusY = 0, Avalonia.Media.BoxShadows? boxShadows = null) { throw null; }
        public void DrawRectangle(Avalonia.Media.IPen pen, Avalonia.Rect rect, float cornerRadius = 0) { throw null; }
        public void DrawText(Avalonia.Media.FormattedText text, Avalonia.Point origin) { throw null; }
        public void FillRectangle(Avalonia.Media.IBrush brush, Avalonia.Rect rect, float cornerRadius = 0) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushClip(Avalonia.RoundedRect clip) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushClip(Avalonia.Rect clip) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushGeometryClip(Avalonia.Media.Geometry clip) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushOpacity(double opacity) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushOpacityMask(Avalonia.Media.IBrush mask, Avalonia.Rect bounds) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushPostTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushPreTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushSetTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Media.DrawingContext.PushedState PushTransformContainer() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DrawingGroup : Avalonia.Media.Drawing
    {
        public DrawingGroup() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Media.DrawingGroup, Avalonia.Media.DrawingCollection> ChildrenProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry> ClipGeometryProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> OpacityMaskProperty;
        public static readonly Avalonia.StyledProperty<double> OpacityProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Transform> TransformProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.DrawingCollection Children { get { throw null; } set { throw null; } }
        public Avalonia.Media.Geometry ClipGeometry { get { throw null; } set { throw null; } }
        public double Opacity { get { throw null; } set { throw null; } }
        public Avalonia.Media.IBrush OpacityMask { get { throw null; } set { throw null; } }
        public Avalonia.Media.Transform Transform { get { throw null; } set { throw null; } }
        public override void Draw(Avalonia.Media.DrawingContext context) { throw null; }
        public override Avalonia.Rect GetBounds() { throw null; }
        public Avalonia.Media.DrawingContext Open() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DrawingImage : Avalonia.AvaloniaObject, Avalonia.Media.IImage, Avalonia.Media.IAffectsRender
    {
        public DrawingImage() { throw null; }
        public DrawingImage(Avalonia.Media.Drawing drawing) { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Drawing> DrawingProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.Drawing Drawing { get { throw null; } set { throw null; } }
        public Avalonia.Size Size { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? Invalidated { add { throw null; } remove { throw null; } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
        protected void RaiseInvalidated(System.EventArgs e) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class EllipseGeometry : Avalonia.Media.Geometry
    {
        public EllipseGeometry() { throw null; }
        public EllipseGeometry(Avalonia.Rect rect) { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Point> CenterProperty;
        public static readonly Avalonia.StyledProperty<double> RadiusXProperty;
        public static readonly Avalonia.StyledProperty<double> RadiusYProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Rect> RectProperty;
        public Avalonia.Point Center { get { throw null; } set { throw null; } }
        public double RadiusX { get { throw null; } set { throw null; } }
        public double RadiusY { get { throw null; } set { throw null; } }
        public Avalonia.Rect Rect { get { throw null; } set { throw null; } }
        public override Avalonia.Media.Geometry Clone() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ExperimentalAcrylicMaterial : Avalonia.AvaloniaObject, Avalonia.Media.IMutableExperimentalAcrylicMaterial, Avalonia.Media.IExperimentalAcrylicMaterial, Avalonia.Media.IAffectsRender
    {
        public ExperimentalAcrylicMaterial() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.AcrylicBackgroundSource> BackgroundSourceProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> FallbackColorProperty;
        public static readonly Avalonia.StyledProperty<double> MaterialOpacityProperty;
        public static readonly Avalonia.StyledProperty<double> PlatformTransparencyCompensationLevelProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> TintColorProperty;
        public static readonly Avalonia.StyledProperty<double> TintOpacityProperty;
        public Avalonia.Media.AcrylicBackgroundSource BackgroundSource { get { throw null; } set { throw null; } }
        public Avalonia.Media.Color FallbackColor { get { throw null; } set { throw null; } }
        public double MaterialOpacity { get { throw null; } set { throw null; } }
        public double PlatformTransparencyCompensationLevel { get { throw null; } set { throw null; } }
        public Avalonia.Media.Color TintColor { get { throw null; } set { throw null; } }
        public double TintOpacity { get { throw null; } set { throw null; } }
        protected static void AffectsRender<T>(params Avalonia.AvaloniaProperty[] properties) where T : Avalonia.Media.ExperimentalAcrylicMaterial { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? Invalidated { add { throw null; } remove { throw null; } }
        public Avalonia.Media.IExperimentalAcrylicMaterial ToImmutable() { throw null; }
        protected void RaiseInvalidated(System.EventArgs e) { throw null; }
    }
    public sealed partial class FillRule
    {
        public const Avalonia.Media.FillRule EvenOdd = 0;
        public const Avalonia.Media.FillRule NonZero = 1;
        public int value__;
    }
    public sealed partial class FlowDirection
    {
        public const Avalonia.Media.FlowDirection LeftToRight = 0;
        public const Avalonia.Media.FlowDirection RightToLeft = 1;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FontFallback
    {
        public FontFallback() { throw null; }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { throw null; } }
        public Avalonia.Media.UnicodeRange UnicodeRange { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class FontFamily
    {
        public FontFamily(string name) { throw null; }
        public FontFamily(System.Uri? baseUri, string name) { throw null; }
        public const string DefaultFontFamilyName = "$Default";
        public static Avalonia.Media.FontFamily Default { get { throw null; } }
        public Avalonia.Media.Fonts.FamilyNameCollection FamilyNames { get { throw null; } }
        public bool IsDefault { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.Fonts.FontFamilyKey? Key { get { throw null; } }
        public string Name { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator ==(Avalonia.Media.FontFamily? a, Avalonia.Media.FontFamily? b) { throw null; }
        public static implicit operator Avalonia.Media.FontFamily(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator !=(Avalonia.Media.FontFamily? a, Avalonia.Media.FontFamily? b) { throw null; }
        public static Avalonia.Media.FontFamily Parse(string s) { throw null; }
        public static Avalonia.Media.FontFamily Parse(string s, System.Uri? baseUri) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class FontManager
    {
        public FontManager(Avalonia.Platform.IFontManagerImpl platformImpl) { throw null; }
        public static Avalonia.Media.FontManager Current { get { throw null; } }
        public string DefaultFontFamilyName { get { throw null; } }
        public Avalonia.Platform.IFontManagerImpl PlatformImpl { get { throw null; } }
        public System.Collections.Generic.IEnumerable<string> GetInstalledFontFamilyNames(bool checkForUpdates = false) { throw null; }
        public Avalonia.Media.IGlyphTypeface GetOrAddGlyphTypeface(Avalonia.Media.Typeface typeface) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool? TryMatchCharacter(int? codepoint, Avalonia.Media.FontStyle? fontStyle, Avalonia.Media.FontWeight? fontWeight, Avalonia.Media.FontStretch? fontStretch, Avalonia.Media.FontFamily? fontFamily, System.Globalization.CultureInfo? culture, out Avalonia.Media.Typeface? typeface) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FontManagerOptions
    {
        public FontManagerOptions() { throw null; }
        public string? DefaultFamilyName { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.FontFallback>? FontFallbacks { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class FontMetrics
    {
        public int Ascent { get { throw null; } set { throw null; } }
        public int Descent { get { throw null; } set { throw null; } }
        public short DesignEmHeight { get { throw null; } set { throw null; } }
        public bool IsFixedPitch { get { throw null; } set { throw null; } }
        public int LineGap { get { throw null; } set { throw null; } }
        public int LineSpacing { get { throw null; } }
        public int StrikethroughPosition { get { throw null; } set { throw null; } }
        public int StrikethroughThickness { get { throw null; } set { throw null; } }
        public int UnderlinePosition { get { throw null; } set { throw null; } }
        public int UnderlineThickness { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.FontMetrics left, Avalonia.Media.FontMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.FontMetrics left, Avalonia.Media.FontMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.FontMetrics other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class FontSimulations
    {
        public const Avalonia.Media.FontSimulations Bold = 1;
        public const Avalonia.Media.FontSimulations None = 0;
        public const Avalonia.Media.FontSimulations Oblique = 2;
        public byte value__;
    }
    public sealed partial class FontStretch
    {
        public const Avalonia.Media.FontStretch Condensed = 3;
        public const Avalonia.Media.FontStretch Expanded = 7;
        public const Avalonia.Media.FontStretch ExtraCondensed = 2;
        public const Avalonia.Media.FontStretch ExtraExpanded = 8;
        public const Avalonia.Media.FontStretch Normal = 5;
        public const Avalonia.Media.FontStretch SemiCondensed = 4;
        public const Avalonia.Media.FontStretch SemiExpanded = 6;
        public const Avalonia.Media.FontStretch UltraCondensed = 1;
        public const Avalonia.Media.FontStretch UltraExpanded = 9;
        public int value__;
    }
    public sealed partial class FontStyle
    {
        public const Avalonia.Media.FontStyle Italic = 1;
        public const Avalonia.Media.FontStyle Normal = 0;
        public const Avalonia.Media.FontStyle Oblique = 2;
        public int value__;
    }
    public sealed partial class FontWeight
    {
        public const Avalonia.Media.FontWeight Black = 900;
        public const Avalonia.Media.FontWeight Bold = 700;
        public const Avalonia.Media.FontWeight DemiBold = 600;
        public const Avalonia.Media.FontWeight ExtraBlack = 950;
        public const Avalonia.Media.FontWeight ExtraBold = 800;
        public const Avalonia.Media.FontWeight ExtraLight = 200;
        public const Avalonia.Media.FontWeight Heavy = 900;
        public const Avalonia.Media.FontWeight Light = 300;
        public const Avalonia.Media.FontWeight Medium = 500;
        public const Avalonia.Media.FontWeight Normal = 400;
        public const Avalonia.Media.FontWeight Regular = 400;
        public const Avalonia.Media.FontWeight SemiBold = 600;
        public const Avalonia.Media.FontWeight SemiLight = 350;
        public const Avalonia.Media.FontWeight Thin = 100;
        public const Avalonia.Media.FontWeight UltraBlack = 950;
        public const Avalonia.Media.FontWeight UltraBold = 800;
        public const Avalonia.Media.FontWeight UltraLight = 200;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FormattedText
    {
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, Avalonia.Media.FlowDirection flowDirection, Avalonia.Media.Typeface typeface, double emSize, Avalonia.Media.IBrush? foreground) { throw null; }
        public const double DefaultIdealToReal = 0.0033333333333333335;
        public const double DefaultRealToIdeal = 300;
        public const double GreatestMultiplierOfEm = 100;
        public const int IdealInfiniteWidth = 1073741822;
        public const double RealInfiniteWidth = 3579139.4066666667;
        public double Baseline { get { throw null; } }
        public double Extent { get { throw null; } }
        public Avalonia.Media.FlowDirection FlowDirection { get { throw null; } set { throw null; } }
        public double Height { get { throw null; } }
        public double LineHeight { get { throw null; } set { throw null; } }
        public int MaxLineCount { get { throw null; } set { throw null; } }
        public double MaxTextHeight { get { throw null; } set { throw null; } }
        public double MaxTextWidth { get { throw null; } set { throw null; } }
        public double OverhangAfter { get { throw null; } }
        public double OverhangLeading { get { throw null; } }
        public double OverhangTrailing { get { throw null; } }
        public Avalonia.Media.TextAlignment TextAlignment { get { throw null; } set { throw null; } }
        public Avalonia.Media.TextTrimming Trimming { get { throw null; } set { throw null; } }
        public double Width { get { throw null; } }
        public double WidthIncludingTrailingWhitespace { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.Geometry? BuildGeometry(Avalonia.Point? origin) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.Geometry? BuildHighlightGeometry(Avalonia.Point? origin) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.Geometry? BuildHighlightGeometry(Avalonia.Point? origin, int? startIndex, int? count) { throw null; }
        public double[] GetMaxTextWidths() { throw null; }
        public void SetCulture(System.Globalization.CultureInfo culture) { throw null; }
        public void SetCulture(System.Globalization.CultureInfo culture, int startIndex, int count) { throw null; }
        public void SetFontFamily(string fontFamily) { throw null; }
        public void SetFontFamily(string fontFamily, int startIndex, int count) { throw null; }
        public void SetFontFamily(Avalonia.Media.FontFamily fontFamily) { throw null; }
        public void SetFontFamily(Avalonia.Media.FontFamily fontFamily, int startIndex, int count) { throw null; }
        public void SetFontSize(double emSize) { throw null; }
        public void SetFontSize(double emSize, int startIndex, int count) { throw null; }
        public void SetFontStyle(Avalonia.Media.FontStyle style) { throw null; }
        public void SetFontStyle(Avalonia.Media.FontStyle style, int startIndex, int count) { throw null; }
        public void SetFontTypeface(Avalonia.Media.Typeface typeface) { throw null; }
        public void SetFontTypeface(Avalonia.Media.Typeface typeface, int startIndex, int count) { throw null; }
        public void SetFontWeight(Avalonia.Media.FontWeight weight) { throw null; }
        public void SetFontWeight(Avalonia.Media.FontWeight weight, int startIndex, int count) { throw null; }
        public void SetForegroundBrush(Avalonia.Media.IBrush foregroundBrush) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void SetForegroundBrush(Avalonia.Media.IBrush? foregroundBrush, int? startIndex, int? count) { throw null; }
        public void SetMaxTextWidths(double[] maxTextWidths) { throw null; }
        public void SetTextDecorations(Avalonia.Media.TextDecorationCollection textDecorations) { throw null; }
        public void SetTextDecorations(Avalonia.Media.TextDecorationCollection textDecorations, int startIndex, int count) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public abstract partial class Geometry : Avalonia.AvaloniaObject
    {
        protected Geometry() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Transform?> TransformProperty;
        public Avalonia.Rect? Bounds { get { throw null; } }
        public Avalonia.Platform.IGeometryImpl? PlatformImpl { get { throw null; } }
        public Avalonia.Media.Transform? Transform { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.Geometry Combine(Avalonia.Media.Geometry geometry1, Avalonia.Media.RectangleGeometry geometry2, Avalonia.Media.GeometryCombineMode combineMode, Avalonia.Media.Transform? transform = null) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.Geometry Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected static void AffectsGeometry(params Avalonia.AvaloniaProperty[] properties) { throw null; }
        public event System.EventHandler? Changed { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public abstract Avalonia.Media.Geometry Clone();
        public bool? FillContains(Avalonia.Point? point) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Rect GetRenderBounds(Avalonia.Media.IPen pen) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool StrokeContains(Avalonia.Media.IPen pen, Avalonia.Point point) { throw null; }
        protected abstract Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry();
        protected void InvalidateGeometry() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public sealed partial class GeometryCollection : Avalonia.Collections.AvaloniaList<Avalonia.Media.Geometry>
    {
        public GeometryCollection() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public GeometryCollection(System.Collections.Generic.IEnumerable<Avalonia.Media.Geometry> items) { throw null; }
        public Avalonia.Media.GeometryGroup? Parent { get { throw null; } set { throw null; } }
    }
    public sealed partial class GeometryCombineMode
    {
        public const Avalonia.Media.GeometryCombineMode Exclude = 3;
        public const Avalonia.Media.GeometryCombineMode Intersect = 1;
        public const Avalonia.Media.GeometryCombineMode Union = 0;
        public int value__;
        public const Avalonia.Media.GeometryCombineMode Xor = 2;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class GeometryDrawing : Avalonia.Media.Drawing
    {
        public GeometryDrawing() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BrushProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry> GeometryProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Pen?> PenProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.IBrush? Brush { get { throw null; } set { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.Geometry Geometry { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.IPen? Pen { get { throw null; } set { throw null; } }
        public override void Draw(Avalonia.Media.DrawingContext context) { throw null; }
        public override Avalonia.Rect GetBounds() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class GeometryGroup : Avalonia.Media.Geometry
    {
        public GeometryGroup() { throw null; }
        public static readonly Avalonia.DirectProperty<Avalonia.Media.GeometryGroup, Avalonia.Media.GeometryCollection> ChildrenProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FillRule> FillRuleProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.GeometryCollection Children { get { throw null; } set { throw null; } }
        public Avalonia.Media.FillRule FillRule { get { throw null; } set { throw null; } }
        public override Avalonia.Media.Geometry Clone() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
        protected void OnChildrenChanged(Avalonia.Media.GeometryCollection oldChildren, Avalonia.Media.GeometryCollection newChildren) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    public partial class GeometryTypeConverter
    {
        public GeometryTypeConverter() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class GlyphMetrics
    {
        public int Height { get { throw null; } set { throw null; } }
        public int Width { get { throw null; } set { throw null; } }
        public int XBearing { get { throw null; } set { throw null; } }
        public int YBearing { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.GlyphMetrics left, Avalonia.Media.GlyphMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.GlyphMetrics left, Avalonia.Media.GlyphMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.GlyphMetrics other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class GlyphRun
    {
        public GlyphRun(Avalonia.Media.IGlyphTypeface glyphTypeface, double fontRenderingEmSize, System.ReadOnlyMemory<char> characters, System.Collections.Generic.IReadOnlyList<ushort> glyphIndices, int biDiLevel = 0) { throw null; }
        public GlyphRun(Avalonia.Media.IGlyphTypeface glyphTypeface, double fontRenderingEmSize, System.ReadOnlyMemory<char> characters, System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.GlyphInfo> glyphInfos, int biDiLevel = 0) { throw null; }
        public Avalonia.Point BaselineOrigin { get { throw null; } }
        public int BiDiLevel { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public System.ReadOnlyMemory<char> Characters { get { throw null; } set { throw null; } }
        public double FontRenderingEmSize { get { throw null; } set { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.GlyphInfo> GlyphInfos { get { throw null; } set { throw null; } }
        public Avalonia.Media.IGlyphTypeface GlyphTypeface { get { throw null; } }
        public bool IsLeftToRight { get { throw null; } }
        public Avalonia.Media.GlyphRunMetrics Metrics { get { throw null; } }
        public Avalonia.Utilities.IRef<Avalonia.Platform.IGlyphRunImpl> PlatformImpl { get { throw null; } }
        public Avalonia.Size Size { get { throw null; } }
        public Avalonia.Media.Geometry BuildGeometry() { throw null; }
        public void Dispose() { throw null; }
        public int FindGlyphIndex(int characterIndex) { throw null; }
        public Avalonia.Media.CharacterHit FindNearestCharacterHit(int index, out double width) { throw null; }
        public Avalonia.Media.CharacterHit GetCharacterHitFromDistance(double distance, out bool isInside) { throw null; }
        public double GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit characterHit) { throw null; }
        public Avalonia.Media.CharacterHit GetNextCaretCharacterHit(Avalonia.Media.CharacterHit characterHit) { throw null; }
        public Avalonia.Media.CharacterHit GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit characterHit) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class GlyphRunDrawing : Avalonia.Media.Drawing
    {
        public GlyphRunDrawing() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> ForegroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.GlyphRun> GlyphRunProperty;
        public Avalonia.Media.IBrush Foreground { get { throw null; } set { throw null; } }
        public Avalonia.Media.GlyphRun GlyphRun { get { throw null; } set { throw null; } }
        public override void Draw(Avalonia.Media.DrawingContext context) { throw null; }
        public override Avalonia.Rect GetBounds() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class GlyphRunMetrics
    {
        public GlyphRunMetrics(double width, int trailingWhitespaceLength, int newLineLength, int firstCluster, int lastCluster) { throw null; }
        public int FirstCluster { get { throw null; } }
        public int LastCluster { get { throw null; } }
        public int NewLineLength { get { throw null; } }
        public int TrailingWhitespaceLength { get { throw null; } }
        public double Width { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.GlyphRunMetrics left, Avalonia.Media.GlyphRunMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.GlyphRunMetrics left, Avalonia.Media.GlyphRunMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.GlyphRunMetrics other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class GradientBrush : Avalonia.Media.Brush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush, Avalonia.Media.IAffectsRender
    {
        public GradientBrush() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.GradientStops> GradientStopsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.GradientSpreadMethod> SpreadMethodProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.GradientStops GradientStops { get { throw null; } set { throw null; } }
        public Avalonia.Media.GradientSpreadMethod SpreadMethod { get { throw null; } set { throw null; } }
        public abstract Avalonia.Media.IImmutableBrush ToImmutable();
    }
    public sealed partial class GradientSpreadMethod
    {
        public const Avalonia.Media.GradientSpreadMethod Pad = 0;
        public const Avalonia.Media.GradientSpreadMethod Reflect = 1;
        public const Avalonia.Media.GradientSpreadMethod Repeat = 2;
        public int value__;
    }
    public sealed partial class GradientStop : Avalonia.AvaloniaObject, Avalonia.Media.IGradientStop
    {
        public GradientStop() { throw null; }
        public GradientStop(Avalonia.Media.Color color, double offset) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> ColorProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> OffsetProperty;
        public Avalonia.Media.Color Color { get { throw null; } set { throw null; } }
        public double Offset { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class GradientStops : Avalonia.Collections.AvaloniaList<Avalonia.Media.GradientStop>
    {
        public GradientStops() { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.Immutable.ImmutableGradientStop> ToImmutable() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class HslColor
    {
        public HslColor(double alpha, double hue, double saturation, double lightness) { throw null; }
        public HslColor(Avalonia.Media.Color color) { throw null; }
        public double A { get { throw null; } }
        public double H { get { throw null; } }
        public double L { get { throw null; } }
        public double S { get { throw null; } }
        public static Avalonia.Media.HslColor FromAhsl(double a, double h, double s, double l) { throw null; }
        public static Avalonia.Media.HslColor FromHsl(double h, double s, double l) { throw null; }
        public static bool operator ==(Avalonia.Media.HslColor left, Avalonia.Media.HslColor right) { throw null; }
        public static explicit operator Avalonia.Media.Color(Avalonia.Media.HslColor hslColor) { throw null; }
        public static bool operator !=(Avalonia.Media.HslColor left, Avalonia.Media.HslColor right) { throw null; }
        public static Avalonia.Media.HslColor Parse(string s) { throw null; }
        public static Avalonia.Media.Color ToRgb(Avalonia.Media.HslColor hslColor) { throw null; }
        public static Avalonia.Media.Color ToRgb(double hue, double saturation, double lightness, double alpha = 1) { throw null; }
        public static bool TryParse(string s, out Avalonia.Media.HslColor hslColor) { throw null; }
        public bool Equals(Avalonia.Media.HslColor other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Media.Color ToRgb() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class HsvColor
    {
        public HsvColor(double alpha, double hue, double saturation, double value) { throw null; }
        public HsvColor(Avalonia.Media.Color color) { throw null; }
        public double A { get { throw null; } }
        public double H { get { throw null; } }
        public double S { get { throw null; } }
        public double V { get { throw null; } }
        public static Avalonia.Media.HsvColor FromAhsv(double a, double h, double s, double v) { throw null; }
        public static Avalonia.Media.HsvColor FromHsv(double h, double s, double v) { throw null; }
        public static bool operator ==(Avalonia.Media.HsvColor left, Avalonia.Media.HsvColor right) { throw null; }
        public static explicit operator Avalonia.Media.Color(Avalonia.Media.HsvColor hsvColor) { throw null; }
        public static bool operator !=(Avalonia.Media.HsvColor left, Avalonia.Media.HsvColor right) { throw null; }
        public static Avalonia.Media.HsvColor Parse(string s) { throw null; }
        public static Avalonia.Media.Color ToRgb(Avalonia.Media.HsvColor hsvColor) { throw null; }
        public static Avalonia.Media.Color ToRgb(double hue, double saturation, double value, double alpha = 1) { throw null; }
        public static bool TryParse(string s, out Avalonia.Media.HsvColor hsvColor) { throw null; }
        public bool Equals(Avalonia.Media.HsvColor other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public Avalonia.Media.Color ToRgb() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IAffectsRender
    {
        public event System.EventHandler Invalidated;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.ComponentModel.TypeConverterAttribute[missing]]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IBrush
    {
        double? Opacity { get; }
        Avalonia.Media.ITransform? Transform { get; }
        Avalonia.RelativePoint? TransformOrigin { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IConicGradientBrush : Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        double Angle { get; }
        Avalonia.RelativePoint Center { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IDashStyle
    {
        System.Collections.Generic.IReadOnlyList<double?>? Dashes { get; }
        double? Offset { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IExperimentalAcrylicMaterial
    {
        Avalonia.Media.AcrylicBackgroundSource BackgroundSource { get; }
        Avalonia.Media.Color FallbackColor { get; }
        Avalonia.Media.Color MaterialColor { get; }
        Avalonia.Media.Color TintColor { get; }
        double TintOpacity { get; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IGlyphTypeface
    {
        Avalonia.Media.FontSimulations FontSimulations { get; }
        int GlyphCount { get; }
        Avalonia.Media.FontMetrics Metrics { get; }
        ushort GetGlyph(uint codepoint);
        int GetGlyphAdvance(ushort glyph);
        int[] GetGlyphAdvances(System.ReadOnlySpan<ushort> glyphs);
        ushort[] GetGlyphs(System.ReadOnlySpan<uint> codepoints);
        bool TryGetGlyph(uint codepoint, out ushort glyph);
        bool TryGetGlyphMetrics(ushort glyph, out Avalonia.Media.GlyphMetrics metrics);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        bool TryGetTable(uint tag, out byte[] table);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IGradientBrush : Avalonia.Media.IBrush
    {
        System.Collections.Generic.IReadOnlyList<Avalonia.Media.IGradientStop> GradientStops { get; }
        Avalonia.Media.GradientSpreadMethod SpreadMethod { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IGradientStop
    {
        Avalonia.Media.Color Color { get; }
        double Offset { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IImage
    {
        Avalonia.Size Size { get; }
        void Draw(Avalonia.Media.DrawingContext context, Avalonia.Rect sourceRect, Avalonia.Rect destRect, Avalonia.Media.Imaging.BitmapInterpolationMode bitmapInterpolationMode);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IImageBrush : Avalonia.Media.ITileBrush, Avalonia.Media.IBrush
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Media.Imaging.IBitmap Source { get; }
    }
    public partial interface IImmutableBrush : Avalonia.Media.IBrush
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IImmutableSolidColorBrush : Avalonia.Media.ISolidColorBrush, Avalonia.Media.IBrush, Avalonia.Media.IImmutableBrush
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ILinearGradientBrush : Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        Avalonia.RelativePoint EndPoint { get; }
        Avalonia.RelativePoint StartPoint { get; }
    }
    public partial class ImageBrush : Avalonia.Media.TileBrush, Avalonia.Media.IImageBrush, Avalonia.Media.ITileBrush, Avalonia.Media.IBrush, Avalonia.Media.IAffectsRender
    {
        public ImageBrush() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImageBrush(Avalonia.Media.Imaging.IBitmap source) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Imaging.IBitmap> SourceProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.Imaging.IBitmap Source { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.IImmutableBrush ToImmutable() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ImageDrawing : Avalonia.Media.Drawing
    {
        public ImageDrawing() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IImage?> ImageSourceProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Rect> RectProperty;
        public Avalonia.Media.IImage? ImageSource { get { throw null; } set { throw null; } }
        public Avalonia.Rect? Rect { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override void Draw(Avalonia.Media.DrawingContext context) { throw null; }
        public override Avalonia.Rect? GetBounds() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class ImmediateDrawingContext : Avalonia.Platform.IOptionalFeatureProvider
    {
        public sealed partial class PushedState
        {
            public sealed partial class PushedStateType
            {
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType Clip = 3;
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType GeometryClip = 5;
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType Matrix = 1;
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType MatrixContainer = 4;
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType None = 0;
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType Opacity = 2;
                public const Avalonia.Media.ImmediateDrawingContext.PushedState.PushedStateType OpacityMask = 6;
                public int value__;
            }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator ==(Avalonia.Media.ImmediateDrawingContext.PushedState left, Avalonia.Media.ImmediateDrawingContext.PushedState right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator !=(Avalonia.Media.ImmediateDrawingContext.PushedState left, Avalonia.Media.ImmediateDrawingContext.PushedState right) { throw null; }
            public void Dispose() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public bool Equals(Avalonia.Media.ImmediateDrawingContext.PushedState other) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override string ToString() { throw null; }
        }
        public Avalonia.Matrix CurrentTransform { get { throw null; } }
        public Avalonia.Platform.IDrawingContextImpl PlatformImpl { get { throw null; } }
        public void Dispose() { throw null; }
        public void DrawBitmap(Avalonia.Media.Imaging.IBitmap source, Avalonia.Rect rect) { throw null; }
        public void DrawBitmap(Avalonia.Media.Imaging.IBitmap source, Avalonia.Rect sourceRect, Avalonia.Rect destRect, Avalonia.Media.Imaging.BitmapInterpolationMode bitmapInterpolationMode = 0) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void DrawEllipse(Avalonia.Media.IImmutableBrush? brush, Avalonia.Media.Immutable.ImmutablePen? pen, Avalonia.Point? center, double? radiusX, double? radiusY) { throw null; }
        public void DrawGlyphRun(Avalonia.Media.IImmutableBrush foreground, Avalonia.Utilities.IRef<Avalonia.Platform.IGlyphRunImpl> glyphRun) { throw null; }
        public void DrawLine(Avalonia.Media.Immutable.ImmutablePen pen, Avalonia.Point p1, Avalonia.Point p2) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void DrawRectangle(Avalonia.Media.IImmutableBrush? brush, Avalonia.Media.Immutable.ImmutablePen? pen, Avalonia.Rect? rect, double? radiusX = 0, double? radiusY = 0, Avalonia.Media.BoxShadows? boxShadows = null) { throw null; }
        public void DrawRectangle(Avalonia.Media.Immutable.ImmutablePen pen, Avalonia.Rect rect, float cornerRadius = 0) { throw null; }
        public void FillRectangle(Avalonia.Media.IImmutableBrush brush, Avalonia.Rect rect, float cornerRadius = 0) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushClip(Avalonia.RoundedRect clip) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushClip(Avalonia.Rect clip) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushOpacity(double opacity) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushOpacityMask(Avalonia.Media.IImmutableBrush mask, Avalonia.Rect bounds) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushPostTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushPreTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushSetTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Media.ImmediateDrawingContext.PushedState PushTransformContainer() { throw null; }
        public object? TryGetFeature(System.Type type) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class ImmutableExperimentalAcrylicMaterial : Avalonia.Media.IExperimentalAcrylicMaterial
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableExperimentalAcrylicMaterial(Avalonia.Media.IExperimentalAcrylicMaterial brush) { throw null; }
        public Avalonia.Media.AcrylicBackgroundSource BackgroundSource { get { throw null; } }
        public Avalonia.Media.Color FallbackColor { get { throw null; } }
        public Avalonia.Media.Color MaterialColor { get { throw null; } }
        public Avalonia.Media.Color TintColor { get { throw null; } }
        public double TintOpacity { get { throw null; } }
        public static bool operator ==(Avalonia.Media.ImmutableExperimentalAcrylicMaterial left, Avalonia.Media.ImmutableExperimentalAcrylicMaterial right) { throw null; }
        public static bool operator !=(Avalonia.Media.ImmutableExperimentalAcrylicMaterial left, Avalonia.Media.ImmutableExperimentalAcrylicMaterial right) { throw null; }
        public bool Equals(Avalonia.Media.ImmutableExperimentalAcrylicMaterial other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public Avalonia.Media.Color GetEffectiveTintColor() { throw null; }
        public override int GetHashCode() { throw null; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IMutableExperimentalAcrylicMaterial : Avalonia.Media.IExperimentalAcrylicMaterial, Avalonia.Media.IAffectsRender
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Media.IExperimentalAcrylicMaterial ToImmutable();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IMutableTransform : Avalonia.Media.ITransform
    {
        public event System.EventHandler Changed;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPen
    {
        Avalonia.Media.IBrush? Brush { get; }
        Avalonia.Media.IDashStyle? DashStyle { get; }
        Avalonia.Media.PenLineCap? LineCap { get; }
        Avalonia.Media.PenLineJoin? LineJoin { get; }
        double? MiterLimit { get; }
        double? Thickness { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IRadialGradientBrush : Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        Avalonia.RelativePoint Center { get; }
        Avalonia.RelativePoint GradientOrigin { get; }
        double Radius { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ISolidColorBrush : Avalonia.Media.IBrush
    {
        Avalonia.Media.Color Color { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ITileBrush : Avalonia.Media.IBrush
    {
        Avalonia.Media.AlignmentX AlignmentX { get; }
        Avalonia.Media.AlignmentY AlignmentY { get; }
        Avalonia.Media.Imaging.BitmapInterpolationMode BitmapInterpolationMode { get; }
        Avalonia.RelativeRect DestinationRect { get; }
        Avalonia.RelativeRect SourceRect { get; }
        Avalonia.Media.Stretch Stretch { get; }
        Avalonia.Media.TileMode TileMode { get; }
    }
    [System.ComponentModel.TypeConverterAttribute[missing]]
    public partial interface ITransform
    {
        Avalonia.Matrix Value { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IVisualBrush : Avalonia.Media.ITileBrush, Avalonia.Media.IBrush
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Visual Visual { get; }
    }
    public sealed partial class LinearGradientBrush : Avalonia.Media.GradientBrush, Avalonia.Media.ILinearGradientBrush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        public LinearGradientBrush() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> EndPointProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> StartPointProperty;
        public Avalonia.RelativePoint EndPoint { get { throw null; } set { throw null; } }
        public Avalonia.RelativePoint StartPoint { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override Avalonia.Media.IImmutableBrush ToImmutable() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class LineGeometry : Avalonia.Media.Geometry
    {
        public LineGeometry() { throw null; }
        public LineGeometry(Avalonia.Point startPoint, Avalonia.Point endPoint) { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Point> EndPointProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Point> StartPointProperty;
        public Avalonia.Point EndPoint { get { throw null; } set { throw null; } }
        public Avalonia.Point StartPoint { get { throw null; } set { throw null; } }
        public override Avalonia.Media.Geometry Clone() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class LineSegment : Avalonia.Media.PathSegment
    {
        public LineSegment() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Point> PointProperty;
        public Avalonia.Point Point { get { throw null; } set { throw null; } }
        public override string ToString() { throw null; }
        protected override void ApplyTo(Avalonia.Media.StreamGeometryContext ctx) { throw null; }
    }
    public static partial class MaterialExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.IExperimentalAcrylicMaterial ToImmutable(this Avalonia.Media.IExperimentalAcrylicMaterial material) { throw null; }
    }
    public partial class MatrixTransform : Avalonia.Media.Transform
    {
        public MatrixTransform() { throw null; }
        public MatrixTransform(Avalonia.Matrix matrix) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Matrix> MatrixProperty;
        public Avalonia.Matrix Matrix { get { throw null; } set { throw null; } }
        public override Avalonia.Matrix Value { get { throw null; } }
    }
    public static partial class MediaExtensions
    {
        public static Avalonia.Vector CalculateScaling(this Avalonia.Media.Stretch stretch, Avalonia.Size destinationSize, Avalonia.Size sourceSize, Avalonia.Media.StretchDirection stretchDirection = 2) { throw null; }
        public static Avalonia.Size CalculateSize(this Avalonia.Media.Stretch stretch, Avalonia.Size destinationSize, Avalonia.Size sourceSize, Avalonia.Media.StretchDirection stretchDirection = 2) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class PathFigure : Avalonia.AvaloniaObject
    {
        public PathFigure() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<bool> IsClosedProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<bool> IsFilledProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.Media.PathFigure, Avalonia.Media.PathSegments?> SegmentsProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Point> StartPointProperty;
        public bool? IsClosed { get { throw null; } set { throw null; } }
        public bool? IsFilled { get { throw null; } set { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.PathSegments? Segments { get { throw null; } set { throw null; } }
        public Avalonia.Point? StartPoint { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public sealed partial class PathFigures : Avalonia.Collections.AvaloniaList<Avalonia.Media.PathFigure>
    {
        public PathFigures() { throw null; }
        public static Avalonia.Media.PathFigures Parse(string pathData) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PathGeometry : Avalonia.Media.StreamGeometry
    {
        public PathGeometry() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public static readonly Avalonia.DirectProperty<Avalonia.Media.PathGeometry, Avalonia.Media.PathFigures?> FiguresProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FillRule> FillRuleProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.PathFigures? Figures { get { throw null; } set { throw null; } }
        public Avalonia.Media.FillRule? FillRule { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.PathGeometry Parse(string pathData) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    public partial class PathMarkupParser
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public PathMarkupParser(Avalonia.Platform.IGeometryContext geometryContext) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void Parse(string pathData) { throw null; }
        protected virtual void Dispose(bool disposing) { throw null; }
    }
    public abstract partial class PathSegment : Avalonia.AvaloniaObject
    {
        protected PathSegment() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected internal abstract void ApplyTo(Avalonia.Media.StreamGeometryContext ctx);
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public sealed partial class PathSegments : Avalonia.Collections.AvaloniaList<Avalonia.Media.PathSegment>
    {
        public PathSegments() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class Pen : Avalonia.AvaloniaObject, Avalonia.Media.IPen
    {
        public Pen() { throw null; }
        public Pen(uint? color, double? thickness = 1, Avalonia.Media.IDashStyle? dashStyle = null, Avalonia.Media.PenLineCap? lineCap = 0, Avalonia.Media.PenLineJoin? lineJoin = 1, double? miterLimit = 10) { throw null; }
        public Pen(Avalonia.Media.IBrush? brush, double? thickness = 1, Avalonia.Media.IDashStyle? dashStyle = null, Avalonia.Media.PenLineCap? lineCap = 0, Avalonia.Media.PenLineJoin? lineJoin = 1, double? miterLimit = 10) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BrushProperty;
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IDashStyle?> DashStyleProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineCap> LineCapProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineJoin> LineJoinProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> MiterLimitProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> ThicknessProperty;
        public Avalonia.Media.IBrush? Brush { get { throw null; } set { throw null; } }
        public Avalonia.Media.IDashStyle? DashStyle { get { throw null; } set { throw null; } }
        public Avalonia.Media.PenLineCap? LineCap { get { throw null; } set { throw null; } }
        public Avalonia.Media.PenLineJoin? LineJoin { get { throw null; } set { throw null; } }
        public double? MiterLimit { get { throw null; } set { throw null; } }
        public double? Thickness { get { throw null; } set { throw null; } }
        public event System.EventHandler? Invalidated { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.Immutable.ImmutablePen ToImmutable() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    public sealed partial class PenLineCap
    {
        public const Avalonia.Media.PenLineCap Flat = 0;
        public const Avalonia.Media.PenLineCap Round = 1;
        public const Avalonia.Media.PenLineCap Square = 2;
        public int value__;
    }
    public sealed partial class PenLineJoin
    {
        public const Avalonia.Media.PenLineJoin Bevel = 0;
        public const Avalonia.Media.PenLineJoin Miter = 1;
        public const Avalonia.Media.PenLineJoin Round = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PolylineGeometry : Avalonia.Media.Geometry
    {
        public PolylineGeometry() { throw null; }
        public PolylineGeometry(System.Collections.Generic.IEnumerable<Avalonia.Point> points, bool isFilled) { throw null; }
        public static readonly Avalonia.StyledProperty<bool> IsFilledProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Media.PolylineGeometry, Avalonia.Points> PointsProperty;
        public bool IsFilled { get { throw null; } set { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Points Points { get { throw null; } set { throw null; } }
        public override Avalonia.Media.Geometry Clone() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class PolyLineSegment : Avalonia.Media.PathSegment
    {
        public PolyLineSegment() { throw null; }
        public PolyLineSegment(System.Collections.Generic.IEnumerable<Avalonia.Point> points) { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Points> PointsProperty;
        public Avalonia.Collections.AvaloniaList<Avalonia.Point> Points { get { throw null; } set { throw null; } }
        public override string ToString() { throw null; }
        protected override void ApplyTo(Avalonia.Media.StreamGeometryContext ctx) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class QuadraticBezierSegment : Avalonia.Media.PathSegment
    {
        public QuadraticBezierSegment() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Point> Point1Property;
        public static readonly Avalonia.StyledProperty<Avalonia.Point> Point2Property;
        public Avalonia.Point Point1 { get { throw null; } set { throw null; } }
        public Avalonia.Point Point2 { get { throw null; } set { throw null; } }
        public override string ToString() { throw null; }
        protected override void ApplyTo(Avalonia.Media.StreamGeometryContext ctx) { throw null; }
    }
    public sealed partial class RadialGradientBrush : Avalonia.Media.GradientBrush, Avalonia.Media.IRadialGradientBrush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        public RadialGradientBrush() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> CenterProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.RelativePoint> GradientOriginProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<double> RadiusProperty;
        public Avalonia.RelativePoint Center { get { throw null; } set { throw null; } }
        public Avalonia.RelativePoint GradientOrigin { get { throw null; } set { throw null; } }
        public double Radius { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override Avalonia.Media.IImmutableBrush ToImmutable() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RectangleGeometry : Avalonia.Media.Geometry
    {
        public RectangleGeometry() { throw null; }
        public RectangleGeometry(Avalonia.Rect rect) { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Rect> RectProperty;
        public Avalonia.Rect Rect { get { throw null; } set { throw null; } }
        public override Avalonia.Media.Geometry Clone() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RenderOptions
    {
        public RenderOptions() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Imaging.BitmapInterpolationMode> BitmapInterpolationModeProperty;
        public static Avalonia.Media.Imaging.BitmapInterpolationMode GetBitmapInterpolationMode(Avalonia.AvaloniaObject element) { throw null; }
        public static void SetBitmapInterpolationMode(Avalonia.AvaloniaObject element, Avalonia.Media.Imaging.BitmapInterpolationMode value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Rotate3DTransform : Avalonia.Media.Transform
    {
        public Rotate3DTransform() { throw null; }
        public Rotate3DTransform(double angleX, double angleY, double angleZ, double centerX, double centerY, double centerZ, double depth) { throw null; }
        public static readonly Avalonia.StyledProperty<double> AngleXProperty;
        public static readonly Avalonia.StyledProperty<double> AngleYProperty;
        public static readonly Avalonia.StyledProperty<double> AngleZProperty;
        public static readonly Avalonia.StyledProperty<double> CenterXProperty;
        public static readonly Avalonia.StyledProperty<double> CenterYProperty;
        public static readonly Avalonia.StyledProperty<double> CenterZProperty;
        public static readonly Avalonia.StyledProperty<double> DepthProperty;
        public double AngleX { get { throw null; } set { throw null; } }
        public double AngleY { get { throw null; } set { throw null; } }
        public double AngleZ { get { throw null; } set { throw null; } }
        public double CenterX { get { throw null; } set { throw null; } }
        public double CenterY { get { throw null; } set { throw null; } }
        public double CenterZ { get { throw null; } set { throw null; } }
        public double Depth { get { throw null; } set { throw null; } }
        public override Avalonia.Matrix Value { get { throw null; } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RotateTransform : Avalonia.Media.Transform
    {
        public RotateTransform() { throw null; }
        public RotateTransform(double angle) { throw null; }
        public RotateTransform(double angle, double centerX, double centerY) { throw null; }
        public static readonly Avalonia.StyledProperty<double> AngleProperty;
        public static readonly Avalonia.StyledProperty<double> CenterXProperty;
        public static readonly Avalonia.StyledProperty<double> CenterYProperty;
        public double Angle { get { throw null; } set { throw null; } }
        public double CenterX { get { throw null; } set { throw null; } }
        public double CenterY { get { throw null; } set { throw null; } }
        public override Avalonia.Matrix Value { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ScaleTransform : Avalonia.Media.Transform
    {
        public ScaleTransform() { throw null; }
        public ScaleTransform(double scaleX, double scaleY) { throw null; }
        public static readonly Avalonia.StyledProperty<double> ScaleXProperty;
        public static readonly Avalonia.StyledProperty<double> ScaleYProperty;
        public double ScaleX { get { throw null; } set { throw null; } }
        public double ScaleY { get { throw null; } set { throw null; } }
        public override Avalonia.Matrix Value { get { throw null; } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SkewTransform : Avalonia.Media.Transform
    {
        public SkewTransform() { throw null; }
        public SkewTransform(double angleX, double angleY) { throw null; }
        public static readonly Avalonia.StyledProperty<double> AngleXProperty;
        public static readonly Avalonia.StyledProperty<double> AngleYProperty;
        public double AngleX { get { throw null; } set { throw null; } }
        public double AngleY { get { throw null; } set { throw null; } }
        public override Avalonia.Matrix Value { get { throw null; } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    public partial class SolidColorBrush : Avalonia.Media.Brush, Avalonia.Media.ISolidColorBrush, Avalonia.Media.IBrush, Avalonia.Media.IAffectsRender
    {
        public SolidColorBrush() { throw null; }
        public SolidColorBrush(Avalonia.Media.Color color, double opacity = 1) { throw null; }
        public SolidColorBrush(uint color) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> ColorProperty;
        public Avalonia.Media.Color Color { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.SolidColorBrush Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.IImmutableBrush ToImmutable() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class StreamGeometry : Avalonia.Media.Geometry
    {
        public StreamGeometry() { throw null; }
        public static Avalonia.Media.StreamGeometry Parse(string s) { throw null; }
        public override Avalonia.Media.Geometry Clone() { throw null; }
        public Avalonia.Media.StreamGeometryContext Open() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Platform.IGeometryImpl? CreateDefiningGeometry() { throw null; }
    }
    public partial class StreamGeometryContext : Avalonia.Platform.IGeometryContext
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public StreamGeometryContext(Avalonia.Platform.IStreamGeometryContextImpl impl) { throw null; }
        public void ArcTo(Avalonia.Point point, Avalonia.Size size, double rotationAngle, bool isLargeArc, Avalonia.Media.SweepDirection sweepDirection) { throw null; }
        public void BeginFigure(Avalonia.Point startPoint, bool isFilled) { throw null; }
        public void CubicBezierTo(Avalonia.Point point1, Avalonia.Point point2, Avalonia.Point point3) { throw null; }
        public void Dispose() { throw null; }
        public void EndFigure(bool isClosed) { throw null; }
        public void LineTo(Avalonia.Point point) { throw null; }
        public void PreciseArcTo(Avalonia.Point point, Avalonia.Size size, double rotationAngle, bool isLargeArc, Avalonia.Media.SweepDirection sweepDirection) { throw null; }
        public void QuadraticBezierTo(Avalonia.Point control, Avalonia.Point endPoint) { throw null; }
        public void SetFillRule(Avalonia.Media.FillRule fillRule) { throw null; }
    }
    public sealed partial class Stretch
    {
        public const Avalonia.Media.Stretch Fill = 1;
        public const Avalonia.Media.Stretch None = 0;
        public const Avalonia.Media.Stretch Uniform = 2;
        public const Avalonia.Media.Stretch UniformToFill = 3;
        public int value__;
    }
    public sealed partial class StretchDirection
    {
        public const Avalonia.Media.StretchDirection Both = 2;
        public const Avalonia.Media.StretchDirection DownOnly = 1;
        public const Avalonia.Media.StretchDirection UpOnly = 0;
        public int value__;
    }
    public sealed partial class SweepDirection
    {
        public const Avalonia.Media.SweepDirection Clockwise = 1;
        public const Avalonia.Media.SweepDirection CounterClockwise = 0;
        public int value__;
    }
    public sealed partial class TextAlignment
    {
        public const Avalonia.Media.TextAlignment Center = 1;
        public const Avalonia.Media.TextAlignment DetectFromContent = 5;
        public const Avalonia.Media.TextAlignment End = 4;
        public const Avalonia.Media.TextAlignment Justify = 6;
        public const Avalonia.Media.TextAlignment Left = 0;
        public const Avalonia.Media.TextAlignment Right = 2;
        public const Avalonia.Media.TextAlignment Start = 3;
        public int value__;
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextCollapsingCreateInfo
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TextCollapsingCreateInfo(double width, Avalonia.Media.TextFormatting.TextRunProperties textRunProperties) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public readonly Avalonia.Media.TextFormatting.TextRunProperties TextRunProperties;
        public readonly double Width;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextCollapsingCreateInfo left, Avalonia.Media.TextCollapsingCreateInfo right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextCollapsingCreateInfo left, Avalonia.Media.TextCollapsingCreateInfo right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextCollapsingCreateInfo other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextDecoration : Avalonia.AvaloniaObject
    {
        public TextDecoration() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextDecorationLocation> LocationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Collections.AvaloniaList<double>> StrokeDashArrayProperty;
        public static readonly Avalonia.StyledProperty<double> StrokeDashOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineCap> StrokeLineCapProperty;
        public static readonly Avalonia.StyledProperty<double> StrokeOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextDecorationUnit> StrokeOffsetUnitProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> StrokeProperty;
        public static readonly Avalonia.StyledProperty<double> StrokeThicknessProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextDecorationUnit> StrokeThicknessUnitProperty;
        public Avalonia.Media.TextDecorationLocation Location { get { throw null; } set { throw null; } }
        public Avalonia.Media.IBrush Stroke { get { throw null; } set { throw null; } }
        public Avalonia.Collections.AvaloniaList<double> StrokeDashArray { get { throw null; } set { throw null; } }
        public double StrokeDashOffset { get { throw null; } set { throw null; } }
        public Avalonia.Media.PenLineCap StrokeLineCap { get { throw null; } set { throw null; } }
        public double StrokeOffset { get { throw null; } set { throw null; } }
        public Avalonia.Media.TextDecorationUnit StrokeOffsetUnit { get { throw null; } set { throw null; } }
        public double StrokeThickness { get { throw null; } set { throw null; } }
        public Avalonia.Media.TextDecorationUnit StrokeThicknessUnit { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public partial class TextDecorationCollection : Avalonia.Collections.AvaloniaList<Avalonia.Media.TextDecoration>
    {
        public TextDecorationCollection() { throw null; }
        public TextDecorationCollection(System.Collections.Generic.IEnumerable<Avalonia.Media.TextDecoration> textDecorations) { throw null; }
        public static Avalonia.Media.TextDecorationCollection Parse(string s) { throw null; }
    }
    public sealed partial class TextDecorationLocation
    {
        public const Avalonia.Media.TextDecorationLocation Baseline = 3;
        public const Avalonia.Media.TextDecorationLocation Overline = 1;
        public const Avalonia.Media.TextDecorationLocation Strikethrough = 2;
        public const Avalonia.Media.TextDecorationLocation Underline = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class TextDecorations
    {
        public static Avalonia.Media.TextDecorationCollection Baseline { get { throw null; } }
        public static Avalonia.Media.TextDecorationCollection Overline { get { throw null; } }
        public static Avalonia.Media.TextDecorationCollection Strikethrough { get { throw null; } }
        public static Avalonia.Media.TextDecorationCollection Underline { get { throw null; } }
    }
    public sealed partial class TextDecorationUnit
    {
        public const Avalonia.Media.TextDecorationUnit FontRecommended = 0;
        public const Avalonia.Media.TextDecorationUnit FontRenderingEmSize = 1;
        public const Avalonia.Media.TextDecorationUnit Pixel = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextHitTestResult
    {
        public TextHitTestResult(Avalonia.Media.CharacterHit characterHit, int textPosition, bool isInside, bool isTrailing) { throw null; }
        public Avalonia.Media.CharacterHit CharacterHit { get { throw null; } }
        public bool IsInside { get { throw null; } }
        public bool IsTrailing { get { throw null; } }
        public int TextPosition { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextHitTestResult left, Avalonia.Media.TextHitTestResult right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextHitTestResult left, Avalonia.Media.TextHitTestResult right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextHitTestResult other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TextLeadingPrefixTrimming : Avalonia.Media.TextTrimming
    {
        public TextLeadingPrefixTrimming(string ellipsis, int prefixLength) { throw null; }
        public override Avalonia.Media.TextFormatting.TextCollapsingProperties CreateCollapsingProperties(Avalonia.Media.TextCollapsingCreateInfo createInfo) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TextTrailingTrimming : Avalonia.Media.TextTrimming
    {
        public TextTrailingTrimming(string ellipsis, bool isWordBased) { throw null; }
        public override Avalonia.Media.TextFormatting.TextCollapsingProperties CreateCollapsingProperties(Avalonia.Media.TextCollapsingCreateInfo createInfo) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TextTrimming
    {
        protected TextTrimming() { throw null; }
        public static Avalonia.Media.TextTrimming CharacterEllipsis { get { throw null; } }
        public static Avalonia.Media.TextTrimming LeadingCharacterEllipsis { get { throw null; } }
        public static Avalonia.Media.TextTrimming None { get { throw null; } }
        public static Avalonia.Media.TextTrimming PrefixCharacterEllipsis { get { throw null; } }
        public static Avalonia.Media.TextTrimming WordEllipsis { get { throw null; } }
        public static Avalonia.Media.TextTrimming Parse(string s) { throw null; }
        public abstract Avalonia.Media.TextFormatting.TextCollapsingProperties CreateCollapsingProperties(Avalonia.Media.TextCollapsingCreateInfo createInfo);
    }
    public sealed partial class TextWrapping
    {
        public const Avalonia.Media.TextWrapping NoWrap = 0;
        public int value__;
        public const Avalonia.Media.TextWrapping Wrap = 1;
        public const Avalonia.Media.TextWrapping WrapWithOverflow = 2;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TileBrush : Avalonia.Media.Brush, Avalonia.Media.ITileBrush, Avalonia.Media.IBrush
    {
        protected TileBrush() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.AlignmentX> AlignmentXProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.AlignmentY> AlignmentYProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.RelativeRect> DestinationRectProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.RelativeRect> SourceRectProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Stretch> StretchProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TileMode> TileModeProperty;
        public Avalonia.Media.AlignmentX AlignmentX { get { throw null; } set { throw null; } }
        public Avalonia.Media.AlignmentY AlignmentY { get { throw null; } set { throw null; } }
        public Avalonia.Media.Imaging.BitmapInterpolationMode BitmapInterpolationMode { get { throw null; } set { throw null; } }
        public Avalonia.RelativeRect DestinationRect { get { throw null; } set { throw null; } }
        public Avalonia.RelativeRect SourceRect { get { throw null; } set { throw null; } }
        public Avalonia.Media.Stretch Stretch { get { throw null; } set { throw null; } }
        public Avalonia.Media.TileMode TileMode { get { throw null; } set { throw null; } }
    }
    public sealed partial class TileMode
    {
        public const Avalonia.Media.TileMode FlipX = 1;
        public const Avalonia.Media.TileMode FlipXY = 3;
        public const Avalonia.Media.TileMode FlipY = 2;
        public const Avalonia.Media.TileMode None = 0;
        public const Avalonia.Media.TileMode Tile = 4;
        public int value__;
    }
    public abstract partial class Transform : Avalonia.Animation.Animatable, Avalonia.Media.IMutableTransform, Avalonia.Media.ITransform
    {
        protected Transform() { throw null; }
        public abstract Avalonia.Matrix Value { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.Transform Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? Changed { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.Immutable.ImmutableTransform ToImmutable() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
        protected void RaiseChanged() { throw null; }
    }
    public partial class TransformConverter
    {
        public TransformConverter() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value) { throw null; }
    }
    public static partial class TransformExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.Immutable.ImmutableTransform ToImmutable(this Avalonia.Media.ITransform transform) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TransformGroup : Avalonia.Media.Transform
    {
        public TransformGroup() { throw null; }
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Transforms> ChildrenProperty;
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.Transforms Children { get { throw null; } set { throw null; } }
        public override Avalonia.Matrix Value { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableAttribute({null, null})]
    public sealed partial class Transforms : Avalonia.Collections.AvaloniaList<Avalonia.Media.Transform>
    {
        public Transforms() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TranslateTransform : Avalonia.Media.Transform
    {
        public TranslateTransform() { throw null; }
        public TranslateTransform(double x, double y) { throw null; }
        public static readonly Avalonia.StyledProperty<double> XProperty;
        public static readonly Avalonia.StyledProperty<double> YProperty;
        public override Avalonia.Matrix Value { get { throw null; } }
        public double X { get { throw null; } set { throw null; } }
        public double Y { get { throw null; } set { throw null; } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    [System.Diagnostics.DebuggerDisplayAttribute[missing](null)]
    public sealed partial class Typeface
    {
        public Typeface(Avalonia.Media.FontFamily fontFamily, Avalonia.Media.FontStyle style = 0, Avalonia.Media.FontWeight weight = 400, Avalonia.Media.FontStretch stretch = 5) { throw null; }
        public Typeface(string fontFamilyName, Avalonia.Media.FontStyle style = 0, Avalonia.Media.FontWeight weight = 400, Avalonia.Media.FontStretch stretch = 5) { throw null; }
        public static Avalonia.Media.Typeface Default { get { throw null; } }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } }
        public Avalonia.Media.IGlyphTypeface GlyphTypeface { get { throw null; } }
        public Avalonia.Media.FontStretch Stretch { get { throw null; } }
        public Avalonia.Media.FontStyle Style { get { throw null; } }
        public Avalonia.Media.FontWeight Weight { get { throw null; } }
        public static bool operator ==(Avalonia.Media.Typeface a, Avalonia.Media.Typeface b) { throw null; }
        public static bool operator !=(Avalonia.Media.Typeface a, Avalonia.Media.Typeface b) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public bool Equals(Avalonia.Media.Typeface other) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class UnicodeRange
    {
        public UnicodeRange(int start, int end) { throw null; }
        public UnicodeRange(Avalonia.Media.UnicodeRangeSegment single) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public UnicodeRange(System.Collections.Generic.IReadOnlyList<Avalonia.Media.UnicodeRangeSegment> segments) { throw null; }
        public static readonly Avalonia.Media.UnicodeRange Default;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.UnicodeRange left, Avalonia.Media.UnicodeRange right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.UnicodeRange left, Avalonia.Media.UnicodeRange right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.UnicodeRange Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.UnicodeRange other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        public bool IsInRange(int value) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class UnicodeRangeSegment
    {
        public UnicodeRangeSegment(int start, int end) { throw null; }
        public int End { get { throw null; } }
        public int Start { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.UnicodeRangeSegment left, Avalonia.Media.UnicodeRangeSegment right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.UnicodeRangeSegment left, Avalonia.Media.UnicodeRangeSegment right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.UnicodeRangeSegment Parse(string s) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.UnicodeRangeSegment other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        public bool IsInRange(int value) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    public partial class VisualBrush : Avalonia.Media.TileBrush, Avalonia.Media.IVisualBrush, Avalonia.Media.ITileBrush, Avalonia.Media.IBrush, Avalonia.Media.IAffectsRender
    {
        public VisualBrush() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public VisualBrush(Avalonia.Visual visual) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.Visual> VisualProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Visual Visual { get { throw null; } set { throw null; } }
    }
}
namespace Avalonia.Media.Fonts
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public sealed partial class FamilyNameCollection
    {
        public FamilyNameCollection(string familyNames) { throw null; }
        public int Count { get { throw null; } }
        public bool HasFallbacks { get { throw null; } }
        public string PrimaryFamilyName { get { throw null; } }
        public string this[int index] { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator ==(Avalonia.Media.Fonts.FamilyNameCollection? a, Avalonia.Media.Fonts.FamilyNameCollection? b) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? operator !=(Avalonia.Media.Fonts.FamilyNameCollection? a, Avalonia.Media.Fonts.FamilyNameCollection? b) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public Avalonia.Utilities.ImmutableReadOnlyListStructEnumerator<string> GetEnumerator() { throw null; }
        public override int GetHashCode() { throw null; }
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FontFamilyKey
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public FontFamilyKey(System.Uri source, System.Uri? baseUri = null) { throw null; }
        public System.Uri? BaseUri { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public System.Uri Source { get { throw null; } }
        public static bool? operator ==(Avalonia.Media.Fonts.FontFamilyKey? a, Avalonia.Media.Fonts.FontFamilyKey? b) { throw null; }
        public static bool? operator !=(Avalonia.Media.Fonts.FontFamilyKey? a, Avalonia.Media.Fonts.FontFamilyKey? b) { throw null; }
        public override bool? Equals(object? obj) { throw null; }
        public override int? GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class FontFamilyLoader
    {
        public static System.Collections.Generic.IEnumerable<System.Uri> LoadFontAssets(Avalonia.Media.Fonts.FontFamilyKey fontFamilyKey) { throw null; }
    }
}
namespace Avalonia.Media.Imaging
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Bitmap : Avalonia.Media.Imaging.IBitmap, Avalonia.Media.IImage
    {
        public Bitmap(string fileName) { throw null; }
        public Bitmap(System.IO.Stream stream) { throw null; }
        public Bitmap(Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> impl) { throw null; }
        public Bitmap(Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat, System.IntPtr data, Avalonia.PixelSize size, Avalonia.Vector dpi, int stride) { throw null; }
        protected Bitmap(Avalonia.Platform.IBitmapImpl impl) { throw null; }
        public Avalonia.Vector Dpi { get { throw null; } }
        public Avalonia.PixelSize PixelSize { get { throw null; } }
        public Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> PlatformImpl { get { throw null; } }
        public Avalonia.Size Size { get { throw null; } }
        public static Avalonia.Media.Imaging.Bitmap DecodeToHeight(System.IO.Stream stream, int height, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3) { throw null; }
        public static Avalonia.Media.Imaging.Bitmap DecodeToWidth(System.IO.Stream stream, int width, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3) { throw null; }
        public Avalonia.Media.Imaging.Bitmap CreateScaledBitmap(Avalonia.PixelSize destinationSize, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3) { throw null; }
        public virtual void Dispose() { throw null; }
        public void Save(string fileName, System.Nullable<int> quality = null) { throw null; }
        public void Save(System.IO.Stream stream, System.Nullable<int> quality = null) { throw null; }
    }
    public sealed partial class BitmapBlendingMode
    {
        public const Avalonia.Media.Imaging.BitmapBlendingMode Destination = 2;
        public const Avalonia.Media.Imaging.BitmapBlendingMode DestinationAtop = 9;
        public const Avalonia.Media.Imaging.BitmapBlendingMode DestinationIn = 5;
        public const Avalonia.Media.Imaging.BitmapBlendingMode DestinationOut = 7;
        public const Avalonia.Media.Imaging.BitmapBlendingMode DestinationOver = 3;
        public const Avalonia.Media.Imaging.BitmapBlendingMode Plus = 11;
        public const Avalonia.Media.Imaging.BitmapBlendingMode Source = 1;
        public const Avalonia.Media.Imaging.BitmapBlendingMode SourceAtop = 8;
        public const Avalonia.Media.Imaging.BitmapBlendingMode SourceIn = 4;
        public const Avalonia.Media.Imaging.BitmapBlendingMode SourceOut = 6;
        public const Avalonia.Media.Imaging.BitmapBlendingMode SourceOver = 0;
        public int value__;
        public const Avalonia.Media.Imaging.BitmapBlendingMode Xor = 10;
    }
    public sealed partial class BitmapInterpolationMode
    {
        public const Avalonia.Media.Imaging.BitmapInterpolationMode Default = 0;
        public const Avalonia.Media.Imaging.BitmapInterpolationMode HighQuality = 3;
        public const Avalonia.Media.Imaging.BitmapInterpolationMode LowQuality = 1;
        public const Avalonia.Media.Imaging.BitmapInterpolationMode MediumQuality = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CroppedBitmap : Avalonia.AvaloniaObject, Avalonia.Media.IImage, Avalonia.Media.IAffectsRender
    {
        public CroppedBitmap() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public CroppedBitmap(Avalonia.Media.IImage source, Avalonia.PixelRect sourceRect) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IImage?> SourceProperty;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public static readonly Avalonia.StyledProperty<Avalonia.PixelRect> SourceRectProperty;
        public Avalonia.Size? Size { get { throw null; } }
        public Avalonia.Media.IImage? Source { get { throw null; } set { throw null; } }
        public Avalonia.PixelRect? SourceRect { get { throw null; } set { throw null; } }
        public virtual void Dispose() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void Draw(Avalonia.Media.DrawingContext context, Avalonia.Rect sourceRect, Avalonia.Rect destRect, Avalonia.Media.Imaging.BitmapInterpolationMode bitmapInterpolationMode) { throw null; }
        public event System.EventHandler? Invalidated { add { throw null; } remove { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IBitmap : Avalonia.Media.IImage
    {
        Avalonia.Vector Dpi { get; }
        Avalonia.PixelSize PixelSize { get; }
        Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> PlatformImpl { get; }
        void Save(string fileName, System.Nullable<int> quality = null);
        void Save(System.IO.Stream stream, System.Nullable<int> quality = null);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RenderTargetBitmap : Avalonia.Media.Imaging.Bitmap, Avalonia.Platform.IRenderTarget
    {
        public RenderTargetBitmap(Avalonia.PixelSize pixelSize) { throw null; }
        public RenderTargetBitmap(Avalonia.PixelSize pixelSize, Avalonia.Vector dpi) { throw null; }
        public Avalonia.Utilities.IRef<Avalonia.Platform.IRenderTargetBitmapImpl> PlatformImpl { get { throw null; } }
        public Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer? vbr) { throw null; }
        public void Render(Avalonia.Visual visual) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class WriteableBitmap : Avalonia.Media.Imaging.Bitmap
    {
        public WriteableBitmap(Avalonia.PixelSize size, Avalonia.Vector dpi, System.Nullable<Avalonia.Platform.PixelFormat> format = null, System.Nullable<Avalonia.Platform.AlphaFormat> alphaFormat = null) { throw null; }
        public static Avalonia.Media.Imaging.WriteableBitmap Decode(System.IO.Stream stream) { throw null; }
        public static Avalonia.Media.Imaging.WriteableBitmap DecodeToHeight(System.IO.Stream stream, int height, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3) { throw null; }
        public static Avalonia.Media.Imaging.WriteableBitmap DecodeToWidth(System.IO.Stream stream, int width, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3) { throw null; }
        public Avalonia.Platform.ILockedFramebuffer Lock() { throw null; }
    }
}
namespace Avalonia.Media.Immutable
{
    public partial class ImmutableConicGradientBrush : Avalonia.Media.Immutable.ImmutableGradientBrush, Avalonia.Media.IConicGradientBrush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableConicGradientBrush(System.Collections.Generic.IReadOnlyList<Avalonia.Media.Immutable.ImmutableGradientStop> gradientStops, double opacity = 1, Avalonia.Media.Immutable.ImmutableTransform? transform = null, System.Nullable<Avalonia.RelativePoint> transformOrigin = null, Avalonia.Media.GradientSpreadMethod spreadMethod = 0, System.Nullable<Avalonia.RelativePoint> center = null, double angle = 0) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableConicGradientBrush(Avalonia.Media.ConicGradientBrush source) { throw null; }
        public double Angle { get { throw null; } }
        public Avalonia.RelativePoint Center { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ImmutableDashStyle : Avalonia.Media.IDashStyle
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableDashStyle(System.Collections.Generic.IEnumerable<double?>? dashes, double? offset) { throw null; }
        public System.Collections.Generic.IReadOnlyList<double> Dashes { get { throw null; } }
        public double Offset { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool? Equals(Avalonia.Media.IDashStyle? other) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class ImmutableGradientBrush : Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush, Avalonia.Media.IImmutableBrush
    {
        protected ImmutableGradientBrush(System.Collections.Generic.IReadOnlyList<Avalonia.Media.Immutable.ImmutableGradientStop> gradientStops, double opacity, Avalonia.Media.Immutable.ImmutableTransform? transform, System.Nullable<Avalonia.RelativePoint> transformOrigin, Avalonia.Media.GradientSpreadMethod spreadMethod) { throw null; }
        protected ImmutableGradientBrush(Avalonia.Media.GradientBrush source) { throw null; }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.IGradientStop> GradientStops { get { throw null; } }
        public double Opacity { get { throw null; } }
        public Avalonia.Media.GradientSpreadMethod SpreadMethod { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.ITransform? Transform { get { throw null; } }
        public Avalonia.RelativePoint TransformOrigin { get { throw null; } }
    }
    public partial class ImmutableGradientStop : Avalonia.Media.IGradientStop
    {
        public ImmutableGradientStop(double offset, Avalonia.Media.Color color) { throw null; }
        public Avalonia.Media.Color Color { get { throw null; } }
        public double Offset { get { throw null; } }
    }
    public partial class ImmutableLinearGradientBrush : Avalonia.Media.Immutable.ImmutableGradientBrush, Avalonia.Media.ILinearGradientBrush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableLinearGradientBrush(System.Collections.Generic.IReadOnlyList<Avalonia.Media.Immutable.ImmutableGradientStop> gradientStops, double opacity = 1, Avalonia.Media.Immutable.ImmutableTransform? transform = null, System.Nullable<Avalonia.RelativePoint> transformOrigin = null, Avalonia.Media.GradientSpreadMethod spreadMethod = 0, System.Nullable<Avalonia.RelativePoint> startPoint = null, System.Nullable<Avalonia.RelativePoint> endPoint = null) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableLinearGradientBrush(Avalonia.Media.LinearGradientBrush source) { throw null; }
        public Avalonia.RelativePoint EndPoint { get { throw null; } }
        public Avalonia.RelativePoint StartPoint { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ImmutablePen : Avalonia.Media.IPen
    {
        public ImmutablePen(uint? color, double? thickness = 1, Avalonia.Media.Immutable.ImmutableDashStyle? dashStyle = null, Avalonia.Media.PenLineCap? lineCap = 0, Avalonia.Media.PenLineJoin? lineJoin = 1, double? miterLimit = 10) { throw null; }
        public ImmutablePen(Avalonia.Media.IImmutableBrush? brush, double? thickness = 1, Avalonia.Media.Immutable.ImmutableDashStyle? dashStyle = null, Avalonia.Media.PenLineCap? lineCap = 0, Avalonia.Media.PenLineJoin? lineJoin = 1, double? miterLimit = 10) { throw null; }
        public Avalonia.Media.IBrush? Brush { get { throw null; } }
        public Avalonia.Media.IDashStyle? DashStyle { get { throw null; } }
        public Avalonia.Media.PenLineCap? LineCap { get { throw null; } }
        public Avalonia.Media.PenLineJoin? LineJoin { get { throw null; } }
        public double? MiterLimit { get { throw null; } }
        public double? Thickness { get { throw null; } }
        public override bool? Equals(object? obj) { throw null; }
        public bool? Equals(Avalonia.Media.IPen? other) { throw null; }
        public override int? GetHashCode() { throw null; }
    }
    public partial class ImmutableRadialGradientBrush : Avalonia.Media.Immutable.ImmutableGradientBrush, Avalonia.Media.IRadialGradientBrush, Avalonia.Media.IGradientBrush, Avalonia.Media.IBrush
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableRadialGradientBrush(System.Collections.Generic.IReadOnlyList<Avalonia.Media.Immutable.ImmutableGradientStop> gradientStops, double opacity = 1, Avalonia.Media.Immutable.ImmutableTransform? transform = null, System.Nullable<Avalonia.RelativePoint> transformOrigin = null, Avalonia.Media.GradientSpreadMethod spreadMethod = 0, System.Nullable<Avalonia.RelativePoint> center = null, System.Nullable<Avalonia.RelativePoint> gradientOrigin = null, double radius = 0.5) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableRadialGradientBrush(Avalonia.Media.RadialGradientBrush source) { throw null; }
        public Avalonia.RelativePoint Center { get { throw null; } }
        public Avalonia.RelativePoint GradientOrigin { get { throw null; } }
        public double Radius { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ImmutableSolidColorBrush : Avalonia.Media.IImmutableSolidColorBrush, Avalonia.Media.ISolidColorBrush, Avalonia.Media.IBrush, Avalonia.Media.IImmutableBrush
    {
        public ImmutableSolidColorBrush(Avalonia.Media.Color? color, double? opacity = 1, Avalonia.Media.Immutable.ImmutableTransform? transform = null) { throw null; }
        public ImmutableSolidColorBrush(uint? color) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ImmutableSolidColorBrush(Avalonia.Media.ISolidColorBrush source) { throw null; }
        public Avalonia.Media.Color? Color { get { throw null; } }
        public double? Opacity { get { throw null; } }
        public Avalonia.Media.ITransform? Transform { get { throw null; } }
        public Avalonia.RelativePoint? TransformOrigin { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool operator ==(Avalonia.Media.Immutable.ImmutableSolidColorBrush left, Avalonia.Media.Immutable.ImmutableSolidColorBrush right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool operator !=(Avalonia.Media.Immutable.ImmutableSolidColorBrush left, Avalonia.Media.Immutable.ImmutableSolidColorBrush right) { throw null; }
        public bool? Equals(Avalonia.Media.Immutable.ImmutableSolidColorBrush? other) { throw null; }
        public override bool? Equals(object? obj) { throw null; }
        public override int? GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ImmutableTextDecoration
    {
        public ImmutableTextDecoration(Avalonia.Media.TextDecorationLocation location, Avalonia.Media.Immutable.ImmutablePen pen, Avalonia.Media.TextDecorationUnit penThicknessUnit, double penOffset, Avalonia.Media.TextDecorationUnit penOffsetUnit) { throw null; }
        public Avalonia.Media.TextDecorationLocation Location { get { throw null; } }
        public Avalonia.Media.Immutable.ImmutablePen Pen { get { throw null; } }
        public double PenOffset { get { throw null; } }
        public Avalonia.Media.TextDecorationUnit PenOffsetUnit { get { throw null; } }
        public Avalonia.Media.TextDecorationUnit PenThicknessUnit { get { throw null; } }
    }
    public abstract partial class ImmutableTileBrush : Avalonia.Media.ITileBrush, Avalonia.Media.IBrush, Avalonia.Media.IImmutableBrush
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected ImmutableTileBrush(Avalonia.Media.AlignmentX? alignmentX, Avalonia.Media.AlignmentY? alignmentY, Avalonia.RelativeRect? destinationRect, double? opacity, Avalonia.Media.Immutable.ImmutableTransform? transform, Avalonia.RelativePoint? transformOrigin, Avalonia.RelativeRect? sourceRect, Avalonia.Media.Stretch? stretch, Avalonia.Media.TileMode? tileMode, Avalonia.Media.Imaging.BitmapInterpolationMode? bitmapInterpolationMode) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected ImmutableTileBrush(Avalonia.Media.ITileBrush source) { throw null; }
        public Avalonia.Media.AlignmentX AlignmentX { get { throw null; } }
        public Avalonia.Media.AlignmentY AlignmentY { get { throw null; } }
        public Avalonia.Media.Imaging.BitmapInterpolationMode BitmapInterpolationMode { get { throw null; } }
        public Avalonia.RelativeRect DestinationRect { get { throw null; } }
        public double Opacity { get { throw null; } }
        public Avalonia.RelativeRect SourceRect { get { throw null; } }
        public Avalonia.Media.Stretch Stretch { get { throw null; } }
        public Avalonia.Media.TileMode TileMode { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.ITransform? Transform { get { throw null; } }
        public Avalonia.RelativePoint TransformOrigin { get { throw null; } }
    }
    public partial class ImmutableTransform : Avalonia.Media.ITransform
    {
        public ImmutableTransform(Avalonia.Matrix matrix) { throw null; }
        public Avalonia.Matrix Value { get { throw null; } }
    }
}
namespace Avalonia.Media.TextFormatting
{
    public abstract partial class DrawableTextRun : Avalonia.Media.TextFormatting.TextRun
    {
        protected DrawableTextRun() { throw null; }
        public abstract double Baseline { get; }
        public abstract Avalonia.Size Size { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public abstract void Draw(Avalonia.Media.DrawingContext drawingContext, Avalonia.Point origin);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class GenericTextParagraphProperties : Avalonia.Media.TextFormatting.TextParagraphProperties
    {
        public GenericTextParagraphProperties(Avalonia.Media.TextFormatting.TextRunProperties defaultTextRunProperties, Avalonia.Media.TextAlignment textAlignment = 0, Avalonia.Media.TextWrapping textWrap = 0, double lineHeight = 0, double letterSpacing = 0) { throw null; }
        public GenericTextParagraphProperties(Avalonia.Media.FlowDirection flowDirection, Avalonia.Media.TextAlignment textAlignment, bool firstLineInParagraph, bool alwaysCollapsible, Avalonia.Media.TextFormatting.TextRunProperties defaultTextRunProperties, Avalonia.Media.TextWrapping textWrap, double lineHeight, double indent, double letterSpacing) { throw null; }
        public GenericTextParagraphProperties(Avalonia.Media.TextFormatting.TextParagraphProperties textParagraphProperties) { throw null; }
        public override bool AlwaysCollapsible { get { throw null; } }
        public override Avalonia.Media.TextFormatting.TextRunProperties DefaultTextRunProperties { get { throw null; } }
        public override bool FirstLineInParagraph { get { throw null; } }
        public override Avalonia.Media.FlowDirection FlowDirection { get { throw null; } }
        public override double Indent { get { throw null; } }
        public override double LetterSpacing { get { throw null; } }
        public override double LineHeight { get { throw null; } }
        public override Avalonia.Media.TextAlignment TextAlignment { get { throw null; } }
        public override Avalonia.Media.TextWrapping TextWrapping { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class GenericTextRunProperties : Avalonia.Media.TextFormatting.TextRunProperties
    {
        public GenericTextRunProperties(Avalonia.Media.Typeface? typeface, double? fontRenderingEmSize = 12, Avalonia.Media.TextDecorationCollection? textDecorations = null, Avalonia.Media.IBrush? foregroundBrush = null, Avalonia.Media.IBrush? backgroundBrush = null, Avalonia.Media.BaselineAlignment? baselineAlignment = 3, System.Globalization.CultureInfo? cultureInfo = null) { throw null; }
        public override Avalonia.Media.IBrush? BackgroundBrush { get { throw null; } }
        public override Avalonia.Media.BaselineAlignment? BaselineAlignment { get { throw null; } }
        public override System.Globalization.CultureInfo? CultureInfo { get { throw null; } }
        public override double? FontRenderingEmSize { get { throw null; } }
        public override Avalonia.Media.IBrush? ForegroundBrush { get { throw null; } }
        public override Avalonia.Media.TextDecorationCollection? TextDecorations { get { throw null; } }
        public override Avalonia.Media.Typeface? Typeface { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class GlyphInfo
    {
        public GlyphInfo(ushort GlyphIndex, int GlyphCluster, double GlyphAdvance, Avalonia.Vector GlyphOffset = null) { throw null; }
        public double GlyphAdvance { get { throw null; } }
        public int GlyphCluster { get { throw null; } }
        public ushort GlyphIndex { get { throw null; } }
        public Avalonia.Vector GlyphOffset { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.GlyphInfo left, Avalonia.Media.TextFormatting.GlyphInfo right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.GlyphInfo left, Avalonia.Media.TextFormatting.GlyphInfo right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public void Deconstruct(out ushort GlyphIndex, out int GlyphCluster, out double GlyphAdvance, out Avalonia.Vector GlyphOffset) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.GlyphInfo other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ITextSource
    {
        Avalonia.Media.TextFormatting.TextRun? GetTextRun(int? textSourceIndex);
    }
    public abstract partial class JustificationProperties
    {
        protected JustificationProperties() { throw null; }
        public abstract double Width { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public abstract void Justify(Avalonia.Media.TextFormatting.TextLine textLine);
    }
    public sealed partial class LogicalDirection
    {
        public const Avalonia.Media.TextFormatting.LogicalDirection Backward = 0;
        public const Avalonia.Media.TextFormatting.LogicalDirection Forward = 1;
        public int value__;
    }
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public sealed partial class ShapedBuffer
    {
        public ShapedBuffer(System.ReadOnlyMemory<char> text, int bufferLength, Avalonia.Media.IGlyphTypeface glyphTypeface, double fontRenderingEmSize, sbyte bidiLevel) { throw null; }
        public sbyte BidiLevel { get { throw null; } }
        public double FontRenderingEmSize { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.IGlyphTypeface GlyphTypeface { get { throw null; } }
        public bool IsLeftToRight { get { throw null; } }
        public int Length { get { throw null; } }
        public System.ReadOnlyMemory<char> Text { get { throw null; } }
        public Avalonia.Media.TextFormatting.GlyphInfo this[int index] { get { throw null; } set { throw null; } }
        public void Dispose() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.Collections.Generic.IEnumerator<Avalonia.Media.TextFormatting.GlyphInfo> GetEnumerator() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class ShapedTextRun : Avalonia.Media.TextFormatting.DrawableTextRun
    {
        public ShapedTextRun(Avalonia.Media.TextFormatting.ShapedBuffer shapedBuffer, Avalonia.Media.TextFormatting.TextRunProperties properties) { throw null; }
        public override double Baseline { get { throw null; } }
        public sbyte BidiLevel { get { throw null; } }
        public Avalonia.Media.GlyphRun GlyphRun { get { throw null; } }
        public bool IsReversed { get { throw null; } }
        public override int Length { get { throw null; } }
        public override Avalonia.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
        public Avalonia.Media.TextFormatting.ShapedBuffer ShapedBuffer { get { throw null; } }
        public override Avalonia.Size Size { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public override System.ReadOnlyMemory<char> Text { get { throw null; } }
        public Avalonia.Media.TextFormatting.TextMetrics TextMetrics { get { throw null; } }
        public void Dispose() { throw null; }
        public override void Draw(Avalonia.Media.DrawingContext drawingContext, Avalonia.Point origin) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class SplitResult<T>
    {
        public SplitResult(T first, T? second) { throw null; }
        public T First { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public T? Second { get { throw null; } }
        public void Deconstruct(out T first, out T? second) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TextBounds
    {
        public Avalonia.Media.FlowDirection FlowDirection { get { throw null; } }
        public Avalonia.Rect Rectangle { get { throw null; } }
        public System.Collections.Generic.IList<Avalonia.Media.TextFormatting.TextRunBounds> TextRunBounds { get { throw null; } }
    }
    public partial class TextCharacters : Avalonia.Media.TextFormatting.TextRun
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TextCharacters(string text, Avalonia.Media.TextFormatting.TextRunProperties textRunProperties) { throw null; }
        public TextCharacters(System.ReadOnlyMemory<char> text, Avalonia.Media.TextFormatting.TextRunProperties textRunProperties) { throw null; }
        public override int Length { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public override Avalonia.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
        public override System.ReadOnlyMemory<char> Text { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TextCollapsingProperties
    {
        protected TextCollapsingProperties() { throw null; }
        public abstract Avalonia.Media.TextFormatting.TextRun Symbol { get; }
        public abstract double Width { get; }
        public abstract Avalonia.Media.TextFormatting.TextRun[]? Collapse(Avalonia.Media.TextFormatting.TextLine textLine);
    }
    public partial class TextEndOfLine : Avalonia.Media.TextFormatting.TextRun
    {
        public TextEndOfLine(int textSourceLength = 1) { throw null; }
        public override int Length { get { throw null; } }
    }
    public partial class TextEndOfParagraph : Avalonia.Media.TextFormatting.TextEndOfLine
    {
        public TextEndOfParagraph() { throw null; }
        public TextEndOfParagraph(int textSourceLength) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TextFormatter
    {
        protected TextFormatter() { throw null; }
        public static Avalonia.Media.TextFormatting.TextFormatter Current { get { throw null; } }
        public abstract Avalonia.Media.TextFormatting.TextLine FormatLine(Avalonia.Media.TextFormatting.ITextSource textSource, int firstTextSourceIndex, double paragraphWidth, Avalonia.Media.TextFormatting.TextParagraphProperties paragraphProperties, Avalonia.Media.TextFormatting.TextLineBreak? previousLineBreak = null);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextLayout
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TextLayout(string? text, Avalonia.Media.Typeface? typeface, double? fontSize, Avalonia.Media.IBrush? foreground, Avalonia.Media.TextAlignment? textAlignment = 0, Avalonia.Media.TextWrapping? textWrapping = 0, Avalonia.Media.TextTrimming? textTrimming = null, Avalonia.Media.TextDecorationCollection? textDecorations = null, Avalonia.Media.FlowDirection? flowDirection = 0, double? maxWidth = Infinity, double? maxHeight = Infinity, double? lineHeight = NaN, double? letterSpacing = 0, int? maxLines = 0, System.Collections.Generic.IReadOnlyList<Avalonia.Utilities.ValueSpan<Avalonia.Media.TextFormatting.TextRunProperties>>? textStyleOverrides = null) { throw null; }
        public TextLayout(Avalonia.Media.TextFormatting.ITextSource textSource, Avalonia.Media.TextFormatting.TextParagraphProperties paragraphProperties, Avalonia.Media.TextTrimming? textTrimming = null, double maxWidth = Infinity, double maxHeight = Infinity, double lineHeight = NaN, double letterSpacing = 0, int maxLines = 0) { throw null; }
        public Avalonia.Rect Bounds { get { throw null; } }
        public double LetterSpacing { get { throw null; } }
        public double LineHeight { get { throw null; } }
        public double MaxHeight { get { throw null; } }
        public int MaxLines { get { throw null; } }
        public double MaxWidth { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.TextLine> TextLines { get { throw null; } }
        public void Dispose() { throw null; }
        public void Draw(Avalonia.Media.DrawingContext context, Avalonia.Point origin) { throw null; }
        public int GetLineIndexFromCharacterIndex(int charIndex, bool trailingEdge) { throw null; }
        public Avalonia.Media.TextHitTestResult HitTestPoint(in Avalonia.Point point) { throw null; }
        public Avalonia.Rect HitTestTextPosition(int textPosition) { throw null; }
        public System.Collections.Generic.IEnumerable<Avalonia.Rect> HitTestTextRange(int start, int length) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TextLeadingPrefixCharacterEllipsis : Avalonia.Media.TextFormatting.TextCollapsingProperties
    {
        public TextLeadingPrefixCharacterEllipsis(string ellipsis, int prefixLength, double width, Avalonia.Media.TextFormatting.TextRunProperties textRunProperties) { throw null; }
        public override Avalonia.Media.TextFormatting.TextRun Symbol { get { throw null; } }
        public override double Width { get { throw null; } }
        public override Avalonia.Media.TextFormatting.TextRun[]? Collapse(Avalonia.Media.TextFormatting.TextLine textLine) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TextLine
    {
        protected TextLine() { throw null; }
        public abstract double Baseline { get; }
        public abstract double Extent { get; }
        public abstract int FirstTextSourceIndex { get; }
        public abstract bool HasCollapsed { get; }
        public abstract bool HasOverflowed { get; }
        public abstract double Height { get; }
        public abstract int Length { get; }
        public abstract int NewLineLength { get; }
        public abstract double OverhangAfter { get; }
        public abstract double OverhangLeading { get; }
        public abstract double OverhangTrailing { get; }
        public abstract double Start { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public abstract Avalonia.Media.TextFormatting.TextLineBreak? TextLineBreak { get; }
        public abstract System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.TextRun> TextRuns { get; }
        public abstract int TrailingWhitespaceLength { get; }
        public abstract double Width { get; }
        public abstract double WidthIncludingTrailingWhitespace { get; }
        public abstract Avalonia.Media.TextFormatting.TextLine Collapse(params Avalonia.Media.TextFormatting.TextCollapsingProperties?[] collapsingPropertiesList);
        public abstract void Dispose();
        public abstract void Draw(Avalonia.Media.DrawingContext drawingContext, Avalonia.Point lineOrigin);
        public abstract Avalonia.Media.CharacterHit GetBackspaceCaretCharacterHit(Avalonia.Media.CharacterHit characterHit);
        public abstract Avalonia.Media.CharacterHit GetCharacterHitFromDistance(double distance);
        public abstract double GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit characterHit);
        public abstract Avalonia.Media.CharacterHit GetNextCaretCharacterHit(Avalonia.Media.CharacterHit characterHit);
        public abstract Avalonia.Media.CharacterHit GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit characterHit);
        public abstract System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.TextBounds> GetTextBounds(int firstTextSourceCharacterIndex, int textLength);
        public abstract void Justify(Avalonia.Media.TextFormatting.JustificationProperties justificationProperties);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextLineBreak
    {
        public TextLineBreak(Avalonia.Media.TextFormatting.TextEndOfLine? textEndOfLine = null, Avalonia.Media.FlowDirection? flowDirection = 0, System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.TextRun>? remainingRuns = null) { throw null; }
        public Avalonia.Media.FlowDirection? FlowDirection { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.TextRun>? RemainingRuns { get { throw null; } }
        public Avalonia.Media.TextFormatting.TextEndOfLine? TextEndOfLine { get { throw null; } }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextLineMetrics
    {
        public TextLineMetrics(bool hasOverflowed, double height, int newlineLength, double start, double textBaseline, int trailingWhitespaceLength, double width, double widthIncludingTrailingWhitespace) { throw null; }
        public bool HasOverflowed { get { throw null; } }
        public double Height { get { throw null; } }
        public int NewlineLength { get { throw null; } }
        public double Start { get { throw null; } }
        public double TextBaseline { get { throw null; } }
        public int TrailingWhitespaceLength { get { throw null; } }
        public double Width { get { throw null; } }
        public double WidthIncludingTrailingWhitespace { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.TextLineMetrics left, Avalonia.Media.TextFormatting.TextLineMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.TextLineMetrics left, Avalonia.Media.TextFormatting.TextLineMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.TextLineMetrics other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextMetrics
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TextMetrics(Avalonia.Media.IGlyphTypeface glyphTypeface, double fontRenderingEmSize) { throw null; }
        public double Ascent { get { throw null; } }
        public double Descent { get { throw null; } }
        public double FontRenderingEmSize { get { throw null; } }
        public double LineGap { get { throw null; } }
        public double LineHeight { get { throw null; } }
        public double StrikethroughPosition { get { throw null; } }
        public double StrikethroughThickness { get { throw null; } }
        public double UnderlinePosition { get { throw null; } }
        public double UnderlineThickness { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.TextMetrics left, Avalonia.Media.TextFormatting.TextMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.TextMetrics left, Avalonia.Media.TextFormatting.TextMetrics right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.TextMetrics other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TextParagraphProperties
    {
        protected TextParagraphProperties() { throw null; }
        public virtual bool AlwaysCollapsible { get { throw null; } }
        public virtual double DefaultIncrementalTab { get { throw null; } }
        public abstract Avalonia.Media.TextFormatting.TextRunProperties DefaultTextRunProperties { get; }
        public abstract bool FirstLineInParagraph { get; }
        public abstract Avalonia.Media.FlowDirection FlowDirection { get; }
        public abstract double Indent { get; }
        public virtual double LetterSpacing { get { throw null; } }
        public abstract double LineHeight { get; }
        public virtual double ParagraphIndent { get { throw null; } }
        public abstract Avalonia.Media.TextAlignment TextAlignment { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public virtual Avalonia.Media.TextDecorationCollection? TextDecorations { get { throw null; } }
        public abstract Avalonia.Media.TextWrapping TextWrapping { get; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextRange
    {
        public TextRange(int start, int length) { throw null; }
        public int End { get { throw null; } }
        public int Length { get { throw null; } }
        public int Start { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.TextRange left, Avalonia.Media.TextFormatting.TextRange right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.TextRange left, Avalonia.Media.TextFormatting.TextRange right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.TextRange other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        public Avalonia.Media.TextFormatting.TextRange Skip(int length) { throw null; }
        public Avalonia.Media.TextFormatting.TextRange Take(int length) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Diagnostics.DebuggerTypeProxyAttribute[missing]]
    public abstract partial class TextRun
    {
        protected TextRun() { throw null; }
        public const int DefaultTextSourceLength = 1;
        public virtual int Length { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public virtual Avalonia.Media.TextFormatting.TextRunProperties? Properties { get { throw null; } }
        public virtual System.ReadOnlyMemory<char> Text { get { throw null; } }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextRunBounds
    {
        public int Length { get { throw null; } }
        public Avalonia.Rect Rectangle { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.TextFormatting.TextRun TextRun { get { throw null; } }
        public int TextSourceCharacterIndex { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.TextRunBounds left, Avalonia.Media.TextFormatting.TextRunBounds right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.TextRunBounds left, Avalonia.Media.TextFormatting.TextRunBounds right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.TextRunBounds other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class TextRunProperties
    {
        protected TextRunProperties() { throw null; }
        public abstract Avalonia.Media.IBrush? BackgroundBrush { get; }
        public virtual Avalonia.Media.BaselineAlignment? BaselineAlignment { get { throw null; } }
        public abstract System.Globalization.CultureInfo? CultureInfo { get; }
        public abstract double? FontRenderingEmSize { get; }
        public abstract Avalonia.Media.IBrush? ForegroundBrush { get; }
        public abstract Avalonia.Media.TextDecorationCollection? TextDecorations { get; }
        public abstract Avalonia.Media.Typeface? Typeface { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool operator ==(Avalonia.Media.TextFormatting.TextRunProperties left, Avalonia.Media.TextFormatting.TextRunProperties right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool operator !=(Avalonia.Media.TextFormatting.TextRunProperties left, Avalonia.Media.TextFormatting.TextRunProperties right) { throw null; }
        public bool? Equals(Avalonia.Media.TextFormatting.TextRunProperties? other) { throw null; }
        public override bool? Equals(object? obj) { throw null; }
        public override int? GetHashCode() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class TextShaper
    {
        public TextShaper(Avalonia.Platform.ITextShaperImpl platformImpl) { throw null; }
        public static Avalonia.Media.TextFormatting.TextShaper Current { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Media.TextFormatting.ShapedBuffer ShapeText(System.ReadOnlyMemory<char> text, Avalonia.Media.TextFormatting.TextShaperOptions options = null) { throw null; }
        public Avalonia.Media.TextFormatting.ShapedBuffer ShapeText(string text, Avalonia.Media.TextFormatting.TextShaperOptions options = null) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TextShaperOptions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TextShaperOptions(Avalonia.Media.IGlyphTypeface typeface, double fontRenderingEmSize = 12, sbyte bidiLevel = 0, System.Globalization.CultureInfo? culture = null, double incrementalTabWidth = 0, double letterSpacing = 0) { throw null; }
        public sbyte BidiLevel { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public System.Globalization.CultureInfo? Culture { get { throw null; } }
        public double FontRenderingEmSize { get { throw null; } }
        public double IncrementalTabWidth { get { throw null; } }
        public double LetterSpacing { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.IGlyphTypeface Typeface { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.TextShaperOptions left, Avalonia.Media.TextFormatting.TextShaperOptions right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.TextShaperOptions left, Avalonia.Media.TextFormatting.TextShaperOptions right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.TextShaperOptions other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TextTrailingCharacterEllipsis : Avalonia.Media.TextFormatting.TextCollapsingProperties
    {
        public TextTrailingCharacterEllipsis(string ellipsis, double width, Avalonia.Media.TextFormatting.TextRunProperties textRunProperties) { throw null; }
        public override Avalonia.Media.TextFormatting.TextRun Symbol { get { throw null; } }
        public override double Width { get { throw null; } }
        public override Avalonia.Media.TextFormatting.TextRun[]? Collapse(Avalonia.Media.TextFormatting.TextLine textLine) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TextTrailingWordEllipsis : Avalonia.Media.TextFormatting.TextCollapsingProperties
    {
        public TextTrailingWordEllipsis(string ellipsis, double width, Avalonia.Media.TextFormatting.TextRunProperties textRunProperties) { throw null; }
        public override Avalonia.Media.TextFormatting.TextRun Symbol { get { throw null; } }
        public override double Width { get { throw null; } }
        public override Avalonia.Media.TextFormatting.TextRun[]? Collapse(Avalonia.Media.TextFormatting.TextLine textLine) { throw null; }
    }
    public sealed partial class UnshapedTextRun : Avalonia.Media.TextFormatting.TextRun
    {
        public UnshapedTextRun(System.ReadOnlyMemory<char> text, Avalonia.Media.TextFormatting.TextRunProperties properties, sbyte biDiLevel) { throw null; }
        public sbyte BidiLevel { get { throw null; } }
        public override int Length { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public override Avalonia.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
        public override System.ReadOnlyMemory<char> Text { get { throw null; } }
    }
}
namespace Avalonia.Media.TextFormatting.Unicode
{
    public sealed partial class BidiClass
    {
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass ArabicLetter = 1;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass ArabicNumber = 2;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass BoundaryNeutral = 4;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass CommonSeparator = 5;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass EuropeanNumber = 6;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass EuropeanSeparator = 7;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass EuropeanTerminator = 8;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass FirstStrongIsolate = 9;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass LeftToRight = 0;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass LeftToRightEmbedding = 10;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass LeftToRightIsolate = 11;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass LeftToRightOverride = 12;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass NonspacingMark = 13;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass OtherNeutral = 14;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass ParagraphSeparator = 3;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass PopDirectionalFormat = 15;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass PopDirectionalIsolate = 16;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass RightToLeft = 17;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass RightToLeftEmbedding = 18;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass RightToLeftIsolate = 19;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass RightToLeftOverride = 20;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass SegmentSeparator = 21;
        public int value__;
        public const Avalonia.Media.TextFormatting.Unicode.BidiClass WhiteSpace = 22;
    }
    public sealed partial class BidiPairedBracketType
    {
        public const Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType Close = 1;
        public const Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType None = 0;
        public const Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType Open = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Codepoint
    {
        public Codepoint(uint value) { throw null; }
        public Avalonia.Media.TextFormatting.Unicode.BidiClass BiDiClass { get { throw null; } }
        public Avalonia.Media.TextFormatting.Unicode.GeneralCategory GeneralCategory { get { throw null; } }
        public Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass GraphemeBreakClass { get { throw null; } }
        public bool IsBreakChar { get { throw null; } }
        public bool IsWhiteSpace { get { throw null; } }
        public Avalonia.Media.TextFormatting.Unicode.LineBreakClass LineBreakClass { get { throw null; } }
        public Avalonia.Media.TextFormatting.Unicode.BidiPairedBracketType PairedBracketType { get { throw null; } }
        public static Avalonia.Media.TextFormatting.Unicode.Codepoint ReplacementCodepoint { get { throw null; } }
        public Avalonia.Media.TextFormatting.Unicode.Script Script { get { throw null; } }
        public uint Value { get { throw null; } }
        public static bool IsInRangeInclusive(Avalonia.Media.TextFormatting.Unicode.Codepoint cp, uint lowerBound, uint upperBound) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.Unicode.Codepoint left, Avalonia.Media.TextFormatting.Unicode.Codepoint right) { throw null; }
        public static implicit operator int(Avalonia.Media.TextFormatting.Unicode.Codepoint codepoint) { throw null; }
        public static implicit operator uint(Avalonia.Media.TextFormatting.Unicode.Codepoint codepoint) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.Unicode.Codepoint left, Avalonia.Media.TextFormatting.Unicode.Codepoint right) { throw null; }
        public static Avalonia.Media.TextFormatting.Unicode.Codepoint ReadAt(System.ReadOnlySpan<char> text, int index, out int count) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.Unicode.Codepoint other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
        public bool TryGetPairedBracket(out Avalonia.Media.TextFormatting.Unicode.Codepoint codepoint) { throw null; }
    }
    [System.Runtime.CompilerServices.IsByRefLikeAttribute[missing]]
    [System.ObsoleteAttribute[missing](null, null)]
    public sealed partial class CodepointEnumerator
    {
        public CodepointEnumerator(System.ReadOnlySpan<char> text) { throw null; }
        public bool MoveNext(out Avalonia.Media.TextFormatting.Unicode.Codepoint codepoint) { throw null; }
    }
    public sealed partial class GeneralCategory
    {
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory CasedLetter = 7;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory ClosePunctuation = 24;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory ConnectorPunctuation = 22;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Control = 1;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory CurrencySymbol = 30;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory DashPunctuation = 23;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory DecimalNumber = 18;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory EnclosingMark = 15;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory FinalPunctuation = 25;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Format = 2;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory InitialPunctuation = 26;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Letter = 6;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory LetterNumber = 19;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory LineSeparator = 35;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory LowercaseLetter = 8;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Mark = 13;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory MathSymbol = 32;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory ModifierLetter = 9;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory ModifierSymbol = 31;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory NonspacingMark = 16;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Number = 17;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory OpenPunctuation = 28;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Other = 0;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory OtherLetter = 10;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory OtherNumber = 20;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory OtherPunctuation = 27;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory OtherSymbol = 33;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory ParagraphSeparator = 36;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory PrivateUse = 4;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Punctuation = 21;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Separator = 34;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory SpaceSeparator = 37;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory SpacingMark = 14;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Surrogate = 5;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Symbol = 29;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory TitlecaseLetter = 11;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory Unassigned = 3;
        public const Avalonia.Media.TextFormatting.Unicode.GeneralCategory UppercaseLetter = 12;
        public int value__;
    }
    [System.Runtime.CompilerServices.IsByRefLikeAttribute[missing]]
    [System.ObsoleteAttribute[missing](null, null)]
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class Grapheme
    {
        public Grapheme(Avalonia.Media.TextFormatting.Unicode.Codepoint firstCodepoint, int offset, int length) { throw null; }
        public Avalonia.Media.TextFormatting.Unicode.Codepoint FirstCodepoint { get { throw null; } }
        public int Length { get { throw null; } }
        public int Offset { get { throw null; } }
    }
    public sealed partial class GraphemeBreakClass
    {
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass Control = 1;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass CR = 2;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass EBase = 3;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass EBaseGAZ = 4;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass EModifier = 5;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass Extend = 6;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass ExtendedPictographic = 18;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass GlueAfterZwj = 7;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass L = 8;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass LF = 9;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass LV = 10;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass LVT = 11;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass Other = 0;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass Prepend = 12;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass RegionalIndicator = 13;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass SpacingMark = 14;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass T = 15;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass V = 16;
        public int value__;
        public const Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass ZWJ = 17;
    }
    [System.Runtime.CompilerServices.IsByRefLikeAttribute[missing]]
    [System.ObsoleteAttribute[missing](null, null)]
    public sealed partial class GraphemeEnumerator
    {
        public GraphemeEnumerator(System.ReadOnlySpan<char> text) { throw null; }
        public bool MoveNext(out Avalonia.Media.TextFormatting.Unicode.Grapheme grapheme) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    [System.Diagnostics.DebuggerDisplayAttribute[missing](null)]
    public sealed partial class LineBreak
    {
        public LineBreak(int positionMeasure, int positionWrap, bool required = false) { throw null; }
        public int PositionMeasure { get { throw null; } }
        public int PositionWrap { get { throw null; } }
        public bool Required { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.TextFormatting.Unicode.LineBreak left, Avalonia.Media.TextFormatting.Unicode.LineBreak right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.TextFormatting.Unicode.LineBreak left, Avalonia.Media.TextFormatting.Unicode.LineBreak right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.TextFormatting.Unicode.LineBreak other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    public sealed partial class LineBreakClass
    {
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Alphabetic = 12;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Ambiguous = 34;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass BreakAfter = 17;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass BreakBefore = 18;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass BreakBoth = 19;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass BreakSymbols = 7;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass CarriageReturn = 37;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass CloseParenthesis = 2;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass ClosePunctuation = 1;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass CombiningMark = 21;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass ComplexContext = 40;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass ConditionalJapaneseStarter = 36;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass ContingentBreak = 32;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass EBase = 29;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass EModifier = 30;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Exclamation = 6;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Glue = 4;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass H2 = 23;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass H3 = 24;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass HebrewLetter = 13;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Hyphen = 16;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Ideographic = 14;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass InfixNumeric = 8;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Inseparable = 15;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass JL = 25;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass JT = 27;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass JV = 26;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass LineFeed = 38;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass MandatoryBreak = 35;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass NextLine = 39;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Nonstarter = 5;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Numeric = 11;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass OpenPunctuation = 0;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass PostfixNumeric = 10;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass PrefixNumeric = 9;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Quotation = 3;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass RegionalIndicator = 28;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Space = 42;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Surrogate = 41;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass Unknown = 33;
        public int value__;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass WordJoiner = 22;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass ZWJ = 31;
        public const Avalonia.Media.TextFormatting.Unicode.LineBreakClass ZWSpace = 20;
    }
    [System.Runtime.CompilerServices.IsByRefLikeAttribute[missing]]
    [System.ObsoleteAttribute[missing](null, null)]
    public sealed partial class LineBreakEnumerator
    {
        public LineBreakEnumerator(System.ReadOnlySpan<char> text) { throw null; }
        public bool MoveNext(out Avalonia.Media.TextFormatting.Unicode.LineBreak lineBreak) { throw null; }
    }
    public sealed partial class Script
    {
        public const Avalonia.Media.TextFormatting.Unicode.Script Adlam = 3;
        public const Avalonia.Media.TextFormatting.Unicode.Script Ahom = 5;
        public const Avalonia.Media.TextFormatting.Unicode.Script AnatolianHieroglyphs = 55;
        public const Avalonia.Media.TextFormatting.Unicode.Script Arabic = 6;
        public const Avalonia.Media.TextFormatting.Unicode.Script Armenian = 8;
        public const Avalonia.Media.TextFormatting.Unicode.Script Avestan = 9;
        public const Avalonia.Media.TextFormatting.Unicode.Script Balinese = 10;
        public const Avalonia.Media.TextFormatting.Unicode.Script Bamum = 11;
        public const Avalonia.Media.TextFormatting.Unicode.Script BassaVah = 12;
        public const Avalonia.Media.TextFormatting.Unicode.Script Batak = 13;
        public const Avalonia.Media.TextFormatting.Unicode.Script Bengali = 14;
        public const Avalonia.Media.TextFormatting.Unicode.Script Bhaiksuki = 15;
        public const Avalonia.Media.TextFormatting.Unicode.Script Bopomofo = 16;
        public const Avalonia.Media.TextFormatting.Unicode.Script Brahmi = 17;
        public const Avalonia.Media.TextFormatting.Unicode.Script Braille = 18;
        public const Avalonia.Media.TextFormatting.Unicode.Script Buginese = 19;
        public const Avalonia.Media.TextFormatting.Unicode.Script Buhid = 20;
        public const Avalonia.Media.TextFormatting.Unicode.Script CanadianAboriginal = 22;
        public const Avalonia.Media.TextFormatting.Unicode.Script Carian = 23;
        public const Avalonia.Media.TextFormatting.Unicode.Script CaucasianAlbanian = 4;
        public const Avalonia.Media.TextFormatting.Unicode.Script Chakma = 21;
        public const Avalonia.Media.TextFormatting.Unicode.Script Cham = 24;
        public const Avalonia.Media.TextFormatting.Unicode.Script Cherokee = 25;
        public const Avalonia.Media.TextFormatting.Unicode.Script Chorasmian = 26;
        public const Avalonia.Media.TextFormatting.Unicode.Script Common = 1;
        public const Avalonia.Media.TextFormatting.Unicode.Script Coptic = 27;
        public const Avalonia.Media.TextFormatting.Unicode.Script Cuneiform = 161;
        public const Avalonia.Media.TextFormatting.Unicode.Script Cypriot = 29;
        public const Avalonia.Media.TextFormatting.Unicode.Script CyproMinoan = 28;
        public const Avalonia.Media.TextFormatting.Unicode.Script Cyrillic = 30;
        public const Avalonia.Media.TextFormatting.Unicode.Script Deseret = 34;
        public const Avalonia.Media.TextFormatting.Unicode.Script Devanagari = 31;
        public const Avalonia.Media.TextFormatting.Unicode.Script DivesAkuru = 32;
        public const Avalonia.Media.TextFormatting.Unicode.Script Dogra = 33;
        public const Avalonia.Media.TextFormatting.Unicode.Script Duployan = 35;
        public const Avalonia.Media.TextFormatting.Unicode.Script EgyptianHieroglyphs = 36;
        public const Avalonia.Media.TextFormatting.Unicode.Script Elbasan = 37;
        public const Avalonia.Media.TextFormatting.Unicode.Script Elymaic = 38;
        public const Avalonia.Media.TextFormatting.Unicode.Script Ethiopic = 39;
        public const Avalonia.Media.TextFormatting.Unicode.Script Georgian = 40;
        public const Avalonia.Media.TextFormatting.Unicode.Script Glagolitic = 41;
        public const Avalonia.Media.TextFormatting.Unicode.Script Gothic = 44;
        public const Avalonia.Media.TextFormatting.Unicode.Script Grantha = 45;
        public const Avalonia.Media.TextFormatting.Unicode.Script Greek = 46;
        public const Avalonia.Media.TextFormatting.Unicode.Script Gujarati = 47;
        public const Avalonia.Media.TextFormatting.Unicode.Script GunjalaGondi = 42;
        public const Avalonia.Media.TextFormatting.Unicode.Script Gurmukhi = 48;
        public const Avalonia.Media.TextFormatting.Unicode.Script Han = 50;
        public const Avalonia.Media.TextFormatting.Unicode.Script Hangul = 49;
        public const Avalonia.Media.TextFormatting.Unicode.Script HanifiRohingya = 121;
        public const Avalonia.Media.TextFormatting.Unicode.Script Hanunoo = 51;
        public const Avalonia.Media.TextFormatting.Unicode.Script Hatran = 52;
        public const Avalonia.Media.TextFormatting.Unicode.Script Hebrew = 53;
        public const Avalonia.Media.TextFormatting.Unicode.Script Hiragana = 54;
        public const Avalonia.Media.TextFormatting.Unicode.Script ImperialAramaic = 7;
        public const Avalonia.Media.TextFormatting.Unicode.Script Inherited = 2;
        public const Avalonia.Media.TextFormatting.Unicode.Script InscriptionalPahlavi = 115;
        public const Avalonia.Media.TextFormatting.Unicode.Script InscriptionalParthian = 119;
        public const Avalonia.Media.TextFormatting.Unicode.Script Javanese = 61;
        public const Avalonia.Media.TextFormatting.Unicode.Script Kaithi = 70;
        public const Avalonia.Media.TextFormatting.Unicode.Script Kannada = 69;
        public const Avalonia.Media.TextFormatting.Unicode.Script Katakana = 63;
        public const Avalonia.Media.TextFormatting.Unicode.Script KatakanaOrHiragana = 58;
        public const Avalonia.Media.TextFormatting.Unicode.Script Kawi = 64;
        public const Avalonia.Media.TextFormatting.Unicode.Script KayahLi = 62;
        public const Avalonia.Media.TextFormatting.Unicode.Script Kharoshthi = 65;
        public const Avalonia.Media.TextFormatting.Unicode.Script KhitanSmallScript = 68;
        public const Avalonia.Media.TextFormatting.Unicode.Script Khmer = 66;
        public const Avalonia.Media.TextFormatting.Unicode.Script Khojki = 67;
        public const Avalonia.Media.TextFormatting.Unicode.Script Khudawadi = 130;
        public const Avalonia.Media.TextFormatting.Unicode.Script Lao = 72;
        public const Avalonia.Media.TextFormatting.Unicode.Script Latin = 73;
        public const Avalonia.Media.TextFormatting.Unicode.Script Lepcha = 74;
        public const Avalonia.Media.TextFormatting.Unicode.Script Limbu = 75;
        public const Avalonia.Media.TextFormatting.Unicode.Script LinearA = 76;
        public const Avalonia.Media.TextFormatting.Unicode.Script LinearB = 77;
        public const Avalonia.Media.TextFormatting.Unicode.Script Lisu = 78;
        public const Avalonia.Media.TextFormatting.Unicode.Script Lycian = 79;
        public const Avalonia.Media.TextFormatting.Unicode.Script Lydian = 80;
        public const Avalonia.Media.TextFormatting.Unicode.Script Mahajani = 81;
        public const Avalonia.Media.TextFormatting.Unicode.Script Makasar = 82;
        public const Avalonia.Media.TextFormatting.Unicode.Script Malayalam = 90;
        public const Avalonia.Media.TextFormatting.Unicode.Script Mandaic = 83;
        public const Avalonia.Media.TextFormatting.Unicode.Script Manichaean = 84;
        public const Avalonia.Media.TextFormatting.Unicode.Script Marchen = 85;
        public const Avalonia.Media.TextFormatting.Unicode.Script MasaramGondi = 43;
        public const Avalonia.Media.TextFormatting.Unicode.Script Medefaidrin = 86;
        public const Avalonia.Media.TextFormatting.Unicode.Script MeeteiMayek = 94;
        public const Avalonia.Media.TextFormatting.Unicode.Script MendeKikakui = 87;
        public const Avalonia.Media.TextFormatting.Unicode.Script MeroiticCursive = 88;
        public const Avalonia.Media.TextFormatting.Unicode.Script MeroiticHieroglyphs = 89;
        public const Avalonia.Media.TextFormatting.Unicode.Script Miao = 118;
        public const Avalonia.Media.TextFormatting.Unicode.Script Modi = 91;
        public const Avalonia.Media.TextFormatting.Unicode.Script Mongolian = 92;
        public const Avalonia.Media.TextFormatting.Unicode.Script Mro = 93;
        public const Avalonia.Media.TextFormatting.Unicode.Script Multani = 95;
        public const Avalonia.Media.TextFormatting.Unicode.Script Myanmar = 96;
        public const Avalonia.Media.TextFormatting.Unicode.Script Nabataean = 100;
        public const Avalonia.Media.TextFormatting.Unicode.Script NagMundari = 97;
        public const Avalonia.Media.TextFormatting.Unicode.Script Nandinagari = 98;
        public const Avalonia.Media.TextFormatting.Unicode.Script Newa = 101;
        public const Avalonia.Media.TextFormatting.Unicode.Script NewTaiLue = 142;
        public const Avalonia.Media.TextFormatting.Unicode.Script Nko = 102;
        public const Avalonia.Media.TextFormatting.Unicode.Script Nushu = 103;
        public const Avalonia.Media.TextFormatting.Unicode.Script NyiakengPuachueHmong = 57;
        public const Avalonia.Media.TextFormatting.Unicode.Script Ogham = 104;
        public const Avalonia.Media.TextFormatting.Unicode.Script OlChiki = 105;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldHungarian = 59;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldItalic = 60;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldNorthArabian = 99;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldPermic = 113;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldPersian = 160;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldSogdian = 133;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldSouthArabian = 124;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldTurkic = 106;
        public const Avalonia.Media.TextFormatting.Unicode.Script OldUyghur = 110;
        public const Avalonia.Media.TextFormatting.Unicode.Script Oriya = 107;
        public const Avalonia.Media.TextFormatting.Unicode.Script Osage = 108;
        public const Avalonia.Media.TextFormatting.Unicode.Script Osmanya = 109;
        public const Avalonia.Media.TextFormatting.Unicode.Script PahawhHmong = 56;
        public const Avalonia.Media.TextFormatting.Unicode.Script Palmyrene = 111;
        public const Avalonia.Media.TextFormatting.Unicode.Script PauCinHau = 112;
        public const Avalonia.Media.TextFormatting.Unicode.Script PhagsPa = 114;
        public const Avalonia.Media.TextFormatting.Unicode.Script Phoenician = 117;
        public const Avalonia.Media.TextFormatting.Unicode.Script PsalterPahlavi = 116;
        public const Avalonia.Media.TextFormatting.Unicode.Script Rejang = 120;
        public const Avalonia.Media.TextFormatting.Unicode.Script Runic = 122;
        public const Avalonia.Media.TextFormatting.Unicode.Script Samaritan = 123;
        public const Avalonia.Media.TextFormatting.Unicode.Script Saurashtra = 125;
        public const Avalonia.Media.TextFormatting.Unicode.Script Sharada = 128;
        public const Avalonia.Media.TextFormatting.Unicode.Script Shavian = 127;
        public const Avalonia.Media.TextFormatting.Unicode.Script Siddham = 129;
        public const Avalonia.Media.TextFormatting.Unicode.Script SignWriting = 126;
        public const Avalonia.Media.TextFormatting.Unicode.Script Sinhala = 131;
        public const Avalonia.Media.TextFormatting.Unicode.Script Sogdian = 132;
        public const Avalonia.Media.TextFormatting.Unicode.Script SoraSompeng = 134;
        public const Avalonia.Media.TextFormatting.Unicode.Script Soyombo = 135;
        public const Avalonia.Media.TextFormatting.Unicode.Script Sundanese = 136;
        public const Avalonia.Media.TextFormatting.Unicode.Script SylotiNagri = 137;
        public const Avalonia.Media.TextFormatting.Unicode.Script Syriac = 138;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tagalog = 148;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tagbanwa = 139;
        public const Avalonia.Media.TextFormatting.Unicode.Script TaiLe = 141;
        public const Avalonia.Media.TextFormatting.Unicode.Script TaiTham = 71;
        public const Avalonia.Media.TextFormatting.Unicode.Script TaiViet = 145;
        public const Avalonia.Media.TextFormatting.Unicode.Script Takri = 140;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tamil = 143;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tangsa = 153;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tangut = 144;
        public const Avalonia.Media.TextFormatting.Unicode.Script Telugu = 146;
        public const Avalonia.Media.TextFormatting.Unicode.Script Thaana = 149;
        public const Avalonia.Media.TextFormatting.Unicode.Script Thai = 150;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tibetan = 151;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tifinagh = 147;
        public const Avalonia.Media.TextFormatting.Unicode.Script Tirhuta = 152;
        public const Avalonia.Media.TextFormatting.Unicode.Script Toto = 154;
        public const Avalonia.Media.TextFormatting.Unicode.Script Ugaritic = 155;
        public const Avalonia.Media.TextFormatting.Unicode.Script Unknown = 0;
        public const Avalonia.Media.TextFormatting.Unicode.Script Vai = 156;
        public int value__;
        public const Avalonia.Media.TextFormatting.Unicode.Script Vithkuqi = 157;
        public const Avalonia.Media.TextFormatting.Unicode.Script Wancho = 159;
        public const Avalonia.Media.TextFormatting.Unicode.Script WarangCiti = 158;
        public const Avalonia.Media.TextFormatting.Unicode.Script Yezidi = 162;
        public const Avalonia.Media.TextFormatting.Unicode.Script Yi = 163;
        public const Avalonia.Media.TextFormatting.Unicode.Script ZanabazarSquare = 164;
    }
}
namespace Avalonia.Media.Transformation
{
    public sealed partial class TransformOperation
    {
        public sealed partial class DataLayout
        {
            public sealed partial class RotateLayout
            {
                public double Angle;
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator ==(Avalonia.Media.Transformation.TransformOperation.DataLayout.RotateLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.RotateLayout right) { throw null; }
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator !=(Avalonia.Media.Transformation.TransformOperation.DataLayout.RotateLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.RotateLayout right) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override bool Equals(object obj) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public bool Equals(Avalonia.Media.Transformation.TransformOperation.DataLayout.RotateLayout other) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override int GetHashCode() { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override string ToString() { throw null; }
            }
            public sealed partial class ScaleLayout
            {
                public double X;
                public double Y;
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator ==(Avalonia.Media.Transformation.TransformOperation.DataLayout.ScaleLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.ScaleLayout right) { throw null; }
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator !=(Avalonia.Media.Transformation.TransformOperation.DataLayout.ScaleLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.ScaleLayout right) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override bool Equals(object obj) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public bool Equals(Avalonia.Media.Transformation.TransformOperation.DataLayout.ScaleLayout other) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override int GetHashCode() { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override string ToString() { throw null; }
            }
            public sealed partial class SkewLayout
            {
                public double X;
                public double Y;
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator ==(Avalonia.Media.Transformation.TransformOperation.DataLayout.SkewLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.SkewLayout right) { throw null; }
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator !=(Avalonia.Media.Transformation.TransformOperation.DataLayout.SkewLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.SkewLayout right) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override bool Equals(object obj) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public bool Equals(Avalonia.Media.Transformation.TransformOperation.DataLayout.SkewLayout other) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override int GetHashCode() { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override string ToString() { throw null; }
            }
            public sealed partial class TranslateLayout
            {
                public double X;
                public double Y;
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator ==(Avalonia.Media.Transformation.TransformOperation.DataLayout.TranslateLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.TranslateLayout right) { throw null; }
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public static bool operator !=(Avalonia.Media.Transformation.TransformOperation.DataLayout.TranslateLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout.TranslateLayout right) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override bool Equals(object obj) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public bool Equals(Avalonia.Media.Transformation.TransformOperation.DataLayout.TranslateLayout other) { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override int GetHashCode() { throw null; }
                [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
                [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
                public override string ToString() { throw null; }
            }
            public Avalonia.Media.Transformation.TransformOperation.DataLayout.RotateLayout Rotate;
            public Avalonia.Media.Transformation.TransformOperation.DataLayout.ScaleLayout Scale;
            public Avalonia.Media.Transformation.TransformOperation.DataLayout.SkewLayout Skew;
            public Avalonia.Media.Transformation.TransformOperation.DataLayout.TranslateLayout Translate;
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator ==(Avalonia.Media.Transformation.TransformOperation.DataLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator !=(Avalonia.Media.Transformation.TransformOperation.DataLayout left, Avalonia.Media.Transformation.TransformOperation.DataLayout right) { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public bool Equals(Avalonia.Media.Transformation.TransformOperation.DataLayout other) { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override string ToString() { throw null; }
        }
        public sealed partial class OperationType
        {
            public const Avalonia.Media.Transformation.TransformOperation.OperationType Identity = 5;
            public const Avalonia.Media.Transformation.TransformOperation.OperationType Matrix = 4;
            public const Avalonia.Media.Transformation.TransformOperation.OperationType Rotate = 1;
            public const Avalonia.Media.Transformation.TransformOperation.OperationType Scale = 2;
            public const Avalonia.Media.Transformation.TransformOperation.OperationType Skew = 3;
            public const Avalonia.Media.Transformation.TransformOperation.OperationType Translate = 0;
            public int value__;
        }
        public Avalonia.Media.Transformation.TransformOperation.DataLayout Data;
        public Avalonia.Matrix Matrix;
        public Avalonia.Media.Transformation.TransformOperation.OperationType Type;
        public static Avalonia.Media.Transformation.TransformOperation Identity { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Media.Transformation.TransformOperation left, Avalonia.Media.Transformation.TransformOperation right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Media.Transformation.TransformOperation left, Avalonia.Media.Transformation.TransformOperation right) { throw null; }
        public static bool TryInterpolate(System.Nullable<Avalonia.Media.Transformation.TransformOperation> from, System.Nullable<Avalonia.Media.Transformation.TransformOperation> to, double progress, ref Avalonia.Media.Transformation.TransformOperation result) { throw null; }
        public void Bake() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Media.Transformation.TransformOperation other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TransformOperations : Avalonia.Media.ITransform
    {
        public sealed partial class Builder
        {
            public Builder(int capacity) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator ==(Avalonia.Media.Transformation.TransformOperations.Builder left, Avalonia.Media.Transformation.TransformOperations.Builder right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public static bool operator !=(Avalonia.Media.Transformation.TransformOperations.Builder left, Avalonia.Media.Transformation.TransformOperations.Builder right) { throw null; }
            public void Append(Avalonia.Media.Transformation.TransformOperation toAdd) { throw null; }
            public void AppendIdentity() { throw null; }
            public void AppendMatrix(Avalonia.Matrix matrix) { throw null; }
            public void AppendRotate(double angle) { throw null; }
            public void AppendScale(double x, double y) { throw null; }
            public void AppendSkew(double x, double y) { throw null; }
            public void AppendTranslate(double x, double y) { throw null; }
            [System.Runtime.CompilerServices.NullableContextAttribute(null)]
            public Avalonia.Media.Transformation.TransformOperations Build() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public bool Equals(Avalonia.Media.Transformation.TransformOperations.Builder other) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
            public override string ToString() { throw null; }
        }
        public static Avalonia.Media.Transformation.TransformOperations Identity { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Media.Transformation.TransformOperation> Operations { get { throw null; } }
        public Avalonia.Matrix Value { get { throw null; } }
        public static Avalonia.Media.Transformation.TransformOperations.Builder CreateBuilder(int capacity) { throw null; }
        public static Avalonia.Media.Transformation.TransformOperations Interpolate(Avalonia.Media.Transformation.TransformOperations from, Avalonia.Media.Transformation.TransformOperations to, double progress) { throw null; }
        public static Avalonia.Media.Transformation.TransformOperations Parse(string s) { throw null; }
    }
    public static partial class TransformParser
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Media.Transformation.TransformOperations Parse(string s) { throw null; }
    }
}
namespace Avalonia.Metadata
{
    [System.AttributeUsageAttribute[missing]]
    public partial class AmbientAttribute
    {
        public AmbientAttribute() { throw null; }
    }
    [System.AttributeUsageAttribute[missing]]
    public partial class ContentAttribute
    {
        public ContentAttribute() { throw null; }
    }
    [System.AttributeUsageAttribute[missing]]
    public partial class DataTypeAttribute
    {
        public DataTypeAttribute() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public partial class DependsOnAttribute
    {
        public DependsOnAttribute(string propertyName) { throw null; }
        public string Name { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IAddChild
    {
        void AddChild(object child);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IAddChild<T>
    {
        void AddChild(T child);
    }
    [System.AttributeUsageAttribute[missing]]
    public sealed partial class MarkupExtensionDefaultOptionAttribute
    {
        public MarkupExtensionDefaultOptionAttribute() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public sealed partial class MarkupExtensionOptionAttribute
    {
        public MarkupExtensionOptionAttribute(object value) { throw null; }
        public int Priority { get { throw null; } set { throw null; } }
        public object Value { get { throw null; } }
    }
    [System.AttributeUsageAttribute[missing]]
    public partial class NotClientImplementableAttribute
    {
        public NotClientImplementableAttribute() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public partial class TemplateContentAttribute
    {
        public TemplateContentAttribute() { throw null; }
        public System.Type? TemplateResultType { get { throw null; } set { throw null; } }
    }
    [System.AttributeUsageAttribute[missing]]
    public partial class TrimSurroundingWhitespaceAttribute
    {
        public TrimSurroundingWhitespaceAttribute() { throw null; }
    }
    public partial class UnstableAttribute
    {
        public UnstableAttribute() { throw null; }
    }
    [System.AttributeUsageAttribute[missing]]
    public partial class UsableDuringInitializationAttribute
    {
        public UsableDuringInitializationAttribute() { throw null; }
    }
    [System.AttributeUsageAttribute[missing]]
    public partial class WhitespaceSignificantCollectionAttribute
    {
        public WhitespaceSignificantCollectionAttribute() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public partial class XmlnsDefinitionAttribute
    {
        public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace) { throw null; }
        public string ClrNamespace { get { throw null; } }
        public string XmlNamespace { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.AttributeUsageAttribute[missing]]
    public sealed partial class XmlnsPrefixAttribute
    {
        public XmlnsPrefixAttribute(string xmlNamespace, string prefix) { throw null; }
        public string Prefix { get { throw null; } }
        public string XmlNamespace { get { throw null; } }
    }
}
namespace Avalonia.Platform
{
    public sealed partial class AlphaFormat
    {
        public const Avalonia.Platform.AlphaFormat Opaque = 2;
        public const Avalonia.Platform.AlphaFormat Premul = 0;
        public const Avalonia.Platform.AlphaFormat Unpremul = 1;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AssetLoader : Avalonia.Platform.IAssetLoader
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public AssetLoader(System.Reflection.Assembly? assembly = null) { throw null; }
        public static void RegisterResUriParsers() { throw null; }
        public bool Exists(System.Uri uri, System.Uri? baseUri = null) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.Reflection.Assembly? GetAssembly(System.Uri uri, System.Uri? baseUri) { throw null; }
        public System.Collections.Generic.IEnumerable<System.Uri> GetAssets(System.Uri uri, System.Uri? baseUri) { throw null; }
        public System.IO.Stream Open(System.Uri uri, System.Uri? baseUri = null) { throw null; }
        public (System.IO.Stream, System.Reflection.Assembly) OpenAndGetAssembly(System.Uri uri, System.Uri? baseUri = null) { throw null; }
        public void SetDefaultAssembly(System.Reflection.Assembly assembly) { throw null; }
    }
    public sealed partial class ColorContrastPreference
    {
        public const Avalonia.Platform.ColorContrastPreference High = 1;
        public const Avalonia.Platform.ColorContrastPreference NoPreference = 0;
        public int value__;
    }
    public partial class DefaultPlatformSettings : Avalonia.Platform.IPlatformSettings
    {
        public DefaultPlatformSettings() { throw null; }
        public virtual System.TimeSpan HoldWaitDuration { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Platform.PlatformColorValues>? ColorValuesChanged { add { throw null; } remove { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public virtual Avalonia.Platform.PlatformColorValues GetColorValues() { throw null; }
        public virtual Avalonia.Size GetDoubleTapSize(Avalonia.Input.PointerType type) { throw null; }
        public virtual System.TimeSpan GetDoubleTapTime(Avalonia.Input.PointerType type) { throw null; }
        public virtual Avalonia.Size GetTapSize(Avalonia.Input.PointerType type) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected void OnColorValuesChanged(Avalonia.Platform.PlatformColorValues colorValues) { throw null; }
    }
    public static partial class DrawingContextImplExtensions
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static T? GetFeature<T>(this Avalonia.Platform.IDrawingContextImpl context) where T : class { throw null; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public sealed partial class FormFactorType
    {
        public const Avalonia.Platform.FormFactorType Desktop = 1;
        public const Avalonia.Platform.FormFactorType Mobile = 2;
        public const Avalonia.Platform.FormFactorType Unknown = 0;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IAssetLoader
    {
        bool Exists(System.Uri uri, System.Uri? baseUri = null);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.Reflection.Assembly? GetAssembly(System.Uri uri, System.Uri? baseUri = null);
        System.Collections.Generic.IEnumerable<System.Uri> GetAssets(System.Uri uri, System.Uri? baseUri);
        System.IO.Stream Open(System.Uri uri, System.Uri? baseUri = null);
        (System.IO.Stream, System.Reflection.Assembly) OpenAndGetAssembly(System.Uri uri, System.Uri? baseUri = null);
        void SetDefaultAssembly(System.Reflection.Assembly assembly);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IBitmapImpl
    {
        Avalonia.Vector Dpi { get; }
        Avalonia.PixelSize PixelSize { get; }
        int Version { get; }
        void Save(string fileName, System.Nullable<int> quality = null);
        void Save(System.IO.Stream stream, System.Nullable<int> quality = null);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ICursorFactory
    {
        Avalonia.Platform.ICursorImpl CreateCursor(Avalonia.Platform.IBitmapImpl cursor, Avalonia.PixelPoint hotSpot);
        Avalonia.Platform.ICursorImpl GetCursor(Avalonia.Input.StandardCursorType cursorType);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ICursorImpl
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IDrawingContextImpl
    {
        Avalonia.Matrix Transform { get; set; }
        void Clear(Avalonia.Media.Color color);
        Avalonia.Platform.IDrawingContextLayerImpl CreateLayer(Avalonia.Size size);
        void Custom(Avalonia.Rendering.SceneGraph.ICustomDrawOperation custom);
        void DrawBitmap(Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> source, double opacity, Avalonia.Rect sourceRect, Avalonia.Rect destRect, Avalonia.Media.Imaging.BitmapInterpolationMode bitmapInterpolationMode = 0);
        void DrawBitmap(Avalonia.Utilities.IRef<Avalonia.Platform.IBitmapImpl> source, Avalonia.Media.IBrush opacityMask, Avalonia.Rect opacityMaskRect, Avalonia.Rect destRect);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void DrawEllipse(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.Rect? rect);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void DrawGeometry(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.Platform.IGeometryImpl geometry);
        void DrawGlyphRun(Avalonia.Media.IBrush foreground, Avalonia.Utilities.IRef<Avalonia.Platform.IGlyphRunImpl> glyphRun);
        void DrawLine(Avalonia.Media.IPen pen, Avalonia.Point p1, Avalonia.Point p2);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void DrawRectangle(Avalonia.Media.IBrush? brush, Avalonia.Media.IPen? pen, Avalonia.RoundedRect? rect, Avalonia.Media.BoxShadows? boxShadows = null);
        object? GetFeature(System.Type t);
        void PopBitmapBlendMode();
        void PopClip();
        void PopGeometryClip();
        void PopOpacity();
        void PopOpacityMask();
        void PushBitmapBlendMode(Avalonia.Media.Imaging.BitmapBlendingMode blendingMode);
        void PushClip(Avalonia.Rect clip);
        void PushClip(Avalonia.RoundedRect clip);
        void PushGeometryClip(Avalonia.Platform.IGeometryImpl clip);
        void PushOpacity(double opacity);
        void PushOpacityMask(Avalonia.Media.IBrush mask, Avalonia.Rect bounds);
    }
    public partial interface IDrawingContextLayerImpl : Avalonia.Platform.IRenderTargetBitmapImpl, Avalonia.Platform.IBitmapImpl, Avalonia.Platform.IRenderTarget
    {
        bool CanBlit { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void Blit(Avalonia.Platform.IDrawingContextImpl context);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IDrawingContextWithAcrylicLikeSupport
    {
        void DrawRectangle(Avalonia.Media.IExperimentalAcrylicMaterial material, Avalonia.RoundedRect rect);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IExternalObjectsRenderInterfaceContextFeature
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        byte?[]? DeviceLuid { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        byte?[]? DeviceUuid { get; }
        System.Collections.Generic.IReadOnlyList<string> SupportedImageHandleTypes { get; }
        System.Collections.Generic.IReadOnlyList<string> SupportedSemaphoreTypes { get; }
        Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
        Avalonia.Platform.IPlatformRenderInterfaceImportedImage ImportImage(Avalonia.Platform.IPlatformHandle handle, Avalonia.Platform.PlatformGraphicsExternalImageProperties properties);
        Avalonia.Platform.IPlatformRenderInterfaceImportedImage ImportImage(Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextImage image);
        Avalonia.Platform.IPlatformRenderInterfaceImportedSemaphore ImportSemaphore(Avalonia.Platform.IPlatformHandle handle);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IFontManagerImpl
    {
        Avalonia.Media.IGlyphTypeface CreateGlyphTypeface(Avalonia.Media.Typeface typeface);
        string GetDefaultFontFamilyName();
        System.Collections.Generic.IEnumerable<string> GetInstalledFontFamilyNames(bool checkForUpdates = false);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        bool? TryMatchCharacter(int? codepoint, Avalonia.Media.FontStyle? fontStyle, Avalonia.Media.FontWeight? fontWeight, Avalonia.Media.FontStretch? fontStretch, Avalonia.Media.FontFamily? fontFamily, System.Globalization.CultureInfo? culture, out Avalonia.Media.Typeface? typeface);
    }
    public partial interface IGeometryContext
    {
        void ArcTo(Avalonia.Point point, Avalonia.Size size, double rotationAngle, bool isLargeArc, Avalonia.Media.SweepDirection sweepDirection);
        void BeginFigure(Avalonia.Point startPoint, bool isFilled = true);
        void CubicBezierTo(Avalonia.Point point1, Avalonia.Point point2, Avalonia.Point point3);
        void EndFigure(bool isClosed);
        void LineTo(Avalonia.Point point);
        void QuadraticBezierTo(Avalonia.Point control, Avalonia.Point endPoint);
        void SetFillRule(Avalonia.Media.FillRule fillRule);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IGeometryImpl
    {
        Avalonia.Rect Bounds { get; }
        double ContourLength { get; }
        bool FillContains(Avalonia.Point point);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Rect? GetRenderBounds(Avalonia.Media.IPen? pen);
        Avalonia.Platform.IGeometryImpl? Intersect(Avalonia.Platform.IGeometryImpl geometry);
        bool StrokeContains(Avalonia.Media.IPen pen, Avalonia.Point point);
        bool TryGetPointAndTangentAtDistance(double distance, out Avalonia.Point point, out Avalonia.Point tangent);
        bool TryGetPointAtDistance(double distance, out Avalonia.Point point);
        bool TryGetSegment(double startDistance, double stopDistance, bool startOnBeginFigure, out Avalonia.Platform.IGeometryImpl segmentGeometry);
        Avalonia.Platform.ITransformedGeometryImpl WithTransform(Avalonia.Matrix transform);
    }
    public partial interface IGlyphRunBuffer
    {
        System.Span<ushort> GlyphIndices { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Platform.IGlyphRunImpl Build();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IGlyphRunImpl
    {
        Avalonia.Point BaselineOrigin { get; }
        Avalonia.Size Size { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.Collections.Generic.IReadOnlyList<float> GetIntersections(float lowerLimit, float upperLimit);
    }
    public partial interface IHorizontalGlyphRunBuffer : Avalonia.Platform.IGlyphRunBuffer
    {
        System.Span<float> GlyphPositions { get; }
    }
    public partial interface ILockedFramebuffer
    {
        System.IntPtr Address { get; }
        Avalonia.Vector Dpi { get; }
        Avalonia.Platform.PixelFormat Format { get; }
        int RowBytes { get; }
        Avalonia.PixelSize Size { get; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IMacOSTopLevelPlatformHandle
    {
        System.IntPtr NSView { get; }
        System.IntPtr NSWindow { get; }
        System.IntPtr GetNSViewRetained();
        System.IntPtr GetNSWindowRetained();
    }
    public partial interface IModuleEnvironmentChecker
    {
        bool IsCompatible { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IOptionalFeatureProvider
    {
        object? TryGetFeature(System.Type featureType);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformGraphics
    {
        bool UsesSharedContext { get; }
        Avalonia.Platform.IPlatformGraphicsContext CreateContext();
        Avalonia.Platform.IPlatformGraphicsContext GetSharedContext();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformGraphicsContext : Avalonia.Platform.IOptionalFeatureProvider
    {
        bool IsLost { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.IDisposable EnsureCurrent();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IPlatformHandle
    {
        System.IntPtr? Handle { get; }
        string? HandleDescriptor { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformRenderInterface
    {
        Avalonia.Platform.AlphaFormat DefaultAlphaFormat { get; }
        Avalonia.Platform.PixelFormat DefaultPixelFormat { get; }
        bool SupportsIndividualRoundRects { get; }
        Avalonia.Platform.IGeometryImpl BuildGlyphRunGeometry(Avalonia.Media.GlyphRun glyphRun);
        Avalonia.Platform.IPlatformRenderInterfaceContext CreateBackendContext(Avalonia.Platform.IPlatformGraphicsContext? graphicsApiContext);
        Avalonia.Platform.IGeometryImpl CreateCombinedGeometry(Avalonia.Media.GeometryCombineMode combineMode, Avalonia.Media.Geometry g1, Avalonia.Media.Geometry g2);
        Avalonia.Platform.IGeometryImpl CreateEllipseGeometry(Avalonia.Rect rect);
        Avalonia.Platform.IGeometryImpl CreateGeometryGroup(Avalonia.Media.FillRule fillRule, System.Collections.Generic.IReadOnlyList<Avalonia.Media.Geometry> children);
        Avalonia.Platform.IGlyphRunImpl CreateGlyphRun(Avalonia.Media.IGlyphTypeface glyphTypeface, double fontRenderingEmSize, System.Collections.Generic.IReadOnlyList<Avalonia.Media.TextFormatting.GlyphInfo> glyphInfos);
        Avalonia.Platform.IGeometryImpl CreateLineGeometry(Avalonia.Point p1, Avalonia.Point p2);
        Avalonia.Platform.IGeometryImpl CreateRectangleGeometry(Avalonia.Rect rect);
        Avalonia.Platform.IRenderTargetBitmapImpl CreateRenderTargetBitmap(Avalonia.PixelSize size, Avalonia.Vector dpi);
        Avalonia.Platform.IStreamGeometryImpl CreateStreamGeometry();
        Avalonia.Platform.IWriteableBitmapImpl CreateWriteableBitmap(Avalonia.PixelSize size, Avalonia.Vector dpi, Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat);
        Avalonia.Platform.IBitmapImpl LoadBitmap(string fileName);
        Avalonia.Platform.IBitmapImpl LoadBitmap(System.IO.Stream stream);
        Avalonia.Platform.IBitmapImpl LoadBitmap(Avalonia.Platform.PixelFormat format, Avalonia.Platform.AlphaFormat alphaFormat, System.IntPtr data, Avalonia.PixelSize size, Avalonia.Vector dpi, int stride);
        Avalonia.Platform.IBitmapImpl LoadBitmapToHeight(System.IO.Stream stream, int height, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3);
        Avalonia.Platform.IBitmapImpl LoadBitmapToWidth(System.IO.Stream stream, int width, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3);
        Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmap(string fileName);
        Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmap(System.IO.Stream stream);
        Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmapToHeight(System.IO.Stream stream, int height, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3);
        Avalonia.Platform.IWriteableBitmapImpl LoadWriteableBitmapToWidth(System.IO.Stream stream, int width, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3);
        Avalonia.Platform.IBitmapImpl ResizeBitmap(Avalonia.Platform.IBitmapImpl bitmapImpl, Avalonia.PixelSize destinationSize, Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode = 3);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformRenderInterfaceContext : Avalonia.Platform.IOptionalFeatureProvider
    {
        bool IsLost { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Platform.IRenderTarget CreateRenderTarget(System.Collections.Generic.IEnumerable<object> surfaces);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformRenderInterfaceImportedImage : Avalonia.Platform.IPlatformRenderInterfaceImportedObject
    {
        Avalonia.Platform.IBitmapImpl SnapshotWithAutomaticSync();
        Avalonia.Platform.IBitmapImpl SnapshotWithKeyedMutex(uint acquireIndex, uint releaseIndex);
        Avalonia.Platform.IBitmapImpl SnapshotWithSemaphores(Avalonia.Platform.IPlatformRenderInterfaceImportedSemaphore waitForSemaphore, Avalonia.Platform.IPlatformRenderInterfaceImportedSemaphore signalSemaphore);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformRenderInterfaceImportedObject
    {
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformRenderInterfaceImportedSemaphore : Avalonia.Platform.IPlatformRenderInterfaceImportedObject
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformSettings
    {
        System.TimeSpan HoldWaitDuration { get; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Platform.PlatformColorValues>? ColorValuesChanged;
        Avalonia.Platform.PlatformColorValues GetColorValues();
        Avalonia.Size GetDoubleTapSize(Avalonia.Input.PointerType type);
        System.TimeSpan GetDoubleTapTime(Avalonia.Input.PointerType type);
        Avalonia.Size GetTapSize(Avalonia.Input.PointerType type);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformThreadingInterface
    {
        bool CurrentThreadIsLoopThread { get; }
        void RunLoop(System.Threading.CancellationToken cancellationToken);
        void Signal(Avalonia.Threading.DispatcherPriority priority);
        public event System.Action<System.Nullable<Avalonia.Threading.DispatcherPriority>> Signaled;
        System.IDisposable StartTimer(Avalonia.Threading.DispatcherPriority priority, System.TimeSpan interval, System.Action tick);
    }
    public partial interface IPositionedGlyphRunBuffer : Avalonia.Platform.IGlyphRunBuffer
    {
        System.Span<System.Drawing.PointF> GlyphPositions { get; }
    }
    public partial interface IRenderTarget
    {
        bool IsCorrupted { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Platform.IDrawingContextImpl CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer? visualBrushRenderer);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IRenderTargetBitmapImpl : Avalonia.Platform.IBitmapImpl, Avalonia.Platform.IRenderTarget
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IRuntimePlatform
    {
        Avalonia.Platform.IUnmanagedBlob AllocBlob(int size);
        Avalonia.Platform.RuntimePlatformInfo GetRuntimeInfo();
        System.IDisposable StartSystemTimer(System.TimeSpan interval, System.Action tick);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IStreamGeometryContextImpl : Avalonia.Platform.IGeometryContext
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IStreamGeometryImpl : Avalonia.Platform.IGeometryImpl
    {
        Avalonia.Platform.IStreamGeometryImpl Clone();
        Avalonia.Platform.IStreamGeometryContextImpl Open();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ISystemNavigationManager
    {
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? BackRequested;
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITextShaperImpl
    {
        Avalonia.Media.TextFormatting.ShapedBuffer ShapeText(System.ReadOnlyMemory<char> text, Avalonia.Media.TextFormatting.TextShaperOptions options);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITopLevelWithSystemNavigationManager
    {
        Avalonia.Platform.ISystemNavigationManager SystemNavigationManager { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITransformedGeometryImpl : Avalonia.Platform.IGeometryImpl
    {
        Avalonia.Platform.IGeometryImpl SourceGeometry { get; }
        Avalonia.Matrix Transform { get; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IUnmanagedBlob
    {
        System.IntPtr Address { get; }
        bool IsDisposed { get; }
        int Size { get; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IWriteableBitmapImpl : Avalonia.Platform.IBitmapImpl
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        Avalonia.Platform.ILockedFramebuffer Lock();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class KnownPlatformGraphicsExternalImageHandleTypes
    {
        public const string D3D11TextureGlobalSharedHandle = "D3D11TextureGlobalSharedHandle";
        public const string D3D11TextureNtHandle = "D3D11TextureNtHandle";
        public const string VulkanOpaquePosixFileDescriptor = "VulkanOpaquePosixFileDescriptor";
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class KnownPlatformGraphicsExternalSemaphoreHandleTypes
    {
        public const string Direct3D12FenceNtHandle = "Direct3D12FenceNtHandle";
        public const string VulkanOpaqueKmtHandle = "VulkanOpaqueKmtHandle";
        public const string VulkanOpaqueNtHandle = "VulkanOpaqueNtHandle";
        public const string VulkanOpaquePosixFileDescriptor = "VulkanOpaquePosixFileDescriptor";
    }
    public partial class LockedFramebuffer : Avalonia.Platform.ILockedFramebuffer
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public LockedFramebuffer(System.IntPtr? address, Avalonia.PixelSize? size, int? rowBytes, Avalonia.Vector? dpi, Avalonia.Platform.PixelFormat? format, System.Action? onDispose) { throw null; }
        public System.IntPtr Address { get { throw null; } }
        public Avalonia.Vector Dpi { get { throw null; } }
        public Avalonia.Platform.PixelFormat Format { get { throw null; } }
        public int RowBytes { get { throw null; } }
        public Avalonia.PixelSize Size { get { throw null; } }
        public void Dispose() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class OptionalFeatureProviderExtensions
    {
        public static T? TryGetFeature<T>(this Avalonia.Platform.IOptionalFeatureProvider provider) where T : class { throw null; }
        public static bool TryGetFeature<T>(this Avalonia.Platform.IOptionalFeatureProvider provider, out T rv) where T : class { throw null; }
    }
    public sealed partial class PixelFormat
    {
        public const Avalonia.Platform.PixelFormat Bgra8888 = 2;
        public const Avalonia.Platform.PixelFormat Rgb565 = 0;
        public const Avalonia.Platform.PixelFormat Rgba8888 = 1;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PlatformColorValues
    {
        public PlatformColorValues() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        protected PlatformColorValues(Avalonia.Platform.PlatformColorValues original) { throw null; }
        public Avalonia.Media.Color AccentColor1 { get { throw null; } set { throw null; } }
        public Avalonia.Media.Color AccentColor2 { get { throw null; } set { throw null; } }
        public Avalonia.Media.Color AccentColor3 { get { throw null; } set { throw null; } }
        public Avalonia.Platform.ColorContrastPreference ContrastPreference { get { throw null; } set { throw null; } }
        public Avalonia.Platform.PlatformThemeVariant ThemeVariant { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        protected virtual System.Type EqualityContract { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool? operator ==(Avalonia.Platform.PlatformColorValues? left, Avalonia.Platform.PlatformColorValues? right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool? operator !=(Avalonia.Platform.PlatformColorValues? left, Avalonia.Platform.PlatformColorValues? right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public virtual Avalonia.Platform.PlatformColorValues <Clone>$() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool? Equals(object? obj) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public virtual bool? Equals(Avalonia.Platform.PlatformColorValues? other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        protected virtual bool PrintMembers(System.Text.StringBuilder builder) { throw null; }
    }
    public partial class PlatformGraphicsContextLostException
    {
        public PlatformGraphicsContextLostException() { throw null; }
    }
    public sealed partial class PlatformGraphicsExternalImageFormat
    {
        public const Avalonia.Platform.PlatformGraphicsExternalImageFormat B8G8R8A8UNorm = 1;
        public const Avalonia.Platform.PlatformGraphicsExternalImageFormat R8G8B8A8UNorm = 0;
        public int value__;
    }
    public sealed partial class PlatformGraphicsExternalImageProperties
    {
        public Avalonia.Platform.PlatformGraphicsExternalImageFormat Format { get { throw null; } set { throw null; } }
        public int Height { get { throw null; } set { throw null; } }
        public ulong MemoryOffset { get { throw null; } set { throw null; } }
        public ulong MemorySize { get { throw null; } set { throw null; } }
        public bool TopLeftOrigin { get { throw null; } set { throw null; } }
        public int Width { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PlatformHandle : Avalonia.Platform.IPlatformHandle
    {
        public PlatformHandle(System.IntPtr? handle, string? descriptor) { throw null; }
        public System.IntPtr? Handle { get { throw null; } }
        public string? HandleDescriptor { get { throw null; } }
    }
    public sealed partial class PlatformThemeVariant
    {
        public const Avalonia.Platform.PlatformThemeVariant Dark = 1;
        public const Avalonia.Platform.PlatformThemeVariant Light = 0;
        public int value__;
    }
    [Avalonia.Metadata.UnstableAttribute]
    public sealed partial class RuntimePlatformInfo
    {
        public Avalonia.Platform.FormFactorType FormFactor { get { throw null; } }
        public bool IsDesktop { get { throw null; } set { throw null; } }
        public bool IsMobile { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Platform.RuntimePlatformInfo left, Avalonia.Platform.RuntimePlatformInfo right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Platform.RuntimePlatformInfo left, Avalonia.Platform.RuntimePlatformInfo right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Platform.RuntimePlatformInfo other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    public partial class StandardRuntimePlatform : Avalonia.Platform.IRuntimePlatform
    {
        public StandardRuntimePlatform() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Platform.IUnmanagedBlob AllocBlob(int size) { throw null; }
        public virtual Avalonia.Platform.RuntimePlatformInfo GetRuntimeInfo() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable StartSystemTimer(System.TimeSpan interval, System.Action tick) { throw null; }
    }
    public static partial class StandardRuntimePlatformServices
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static void Register(System.Reflection.Assembly? assembly = null) { throw null; }
    }
}
namespace Avalonia.Platform.Interop
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DynamicLibraryLoaderException
    {
        public DynamicLibraryLoaderException(string message) { throw null; }
        public DynamicLibraryLoaderException(string message, System.Exception innerException) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IDynamicLibraryLoader
    {
        System.IntPtr GetProcAddress(System.IntPtr dll, string proc, bool optional);
        System.IntPtr LoadLibrary(string dll);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Utf8Buffer
    {
        public Utf8Buffer(string? s) { throw null; }
        public int? ByteLen { get { throw null; } }
        public override bool? IsInvalid { get { throw null; } }
        public static string? StringFromPtr(System.IntPtr? s) { throw null; }
        protected override bool? ReleaseHandle() { throw null; }
    }
}
namespace Avalonia.Platform.Storage
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class FilePickerFileType
    {
        public FilePickerFileType(string name) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<string>? AppleUniformTypeIdentifiers { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<string>? MimeTypes { get { throw null; } set { throw null; } }
        public string Name { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<string>? Patterns { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class FilePickerFileTypes
    {
        public static Avalonia.Platform.Storage.FilePickerFileType All { get { throw null; } }
        public static Avalonia.Platform.Storage.FilePickerFileType ImageAll { get { throw null; } }
        public static Avalonia.Platform.Storage.FilePickerFileType ImageJpg { get { throw null; } }
        public static Avalonia.Platform.Storage.FilePickerFileType ImagePng { get { throw null; } }
        public static Avalonia.Platform.Storage.FilePickerFileType Pdf { get { throw null; } }
        public static Avalonia.Platform.Storage.FilePickerFileType TextPlain { get { throw null; } }
    }
    public partial class FilePickerOpenOptions : Avalonia.Platform.Storage.PickerOptions
    {
        public FilePickerOpenOptions() { throw null; }
        public bool AllowMultiple { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.FilePickerFileType>? FileTypeFilter { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class FilePickerSaveOptions : Avalonia.Platform.Storage.PickerOptions
    {
        public FilePickerSaveOptions() { throw null; }
        public string? DefaultExtension { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.FilePickerFileType>? FileTypeChoices { get { throw null; } set { throw null; } }
        public System.Nullable<bool?>? ShowOverwritePrompt { get { throw null; } set { throw null; } }
        public string? SuggestedFileName { get { throw null; } set { throw null; } }
    }
    public partial class FolderPickerOpenOptions : Avalonia.Platform.Storage.PickerOptions
    {
        public FolderPickerOpenOptions() { throw null; }
        public bool AllowMultiple { get { throw null; } set { throw null; } }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageBookmarkFile : Avalonia.Platform.Storage.IStorageFile, Avalonia.Platform.Storage.IStorageItem, Avalonia.Platform.Storage.IStorageBookmarkItem
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageBookmarkFolder : Avalonia.Platform.Storage.IStorageFolder, Avalonia.Platform.Storage.IStorageItem, Avalonia.Platform.Storage.IStorageBookmarkItem
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageBookmarkItem : Avalonia.Platform.Storage.IStorageItem
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.Threading.Tasks.Task ReleaseBookmarkAsync();
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageFile : Avalonia.Platform.Storage.IStorageItem
    {
        bool CanOpenRead { get; }
        bool CanOpenWrite { get; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync();
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.Threading.Tasks.Task<System.IO.Stream> OpenWriteAsync();
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageFolder : Avalonia.Platform.Storage.IStorageItem
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.IStorageItem>> GetItemsAsync();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageItem
    {
        bool CanBookmark { get; }
        string Name { get; }
        System.Threading.Tasks.Task<Avalonia.Platform.Storage.StorageItemProperties> GetBasicPropertiesAsync();
        System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageFolder?> GetParentAsync();
        System.Threading.Tasks.Task<string?> SaveBookmarkAsync();
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        bool? TryGetUri(out System.Uri? uri);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStorageProvider
    {
        bool CanOpen { get; }
        bool CanPickFolder { get; }
        bool CanSave { get; }
        System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageBookmarkFile?> OpenFileBookmarkAsync(string bookmark);
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.IStorageFile>> OpenFilePickerAsync(Avalonia.Platform.Storage.FilePickerOpenOptions options);
        System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageBookmarkFolder?> OpenFolderBookmarkAsync(string bookmark);
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.IStorageFolder>> OpenFolderPickerAsync(Avalonia.Platform.Storage.FolderPickerOpenOptions options);
        System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageFile?> SaveFilePickerAsync(Avalonia.Platform.Storage.FilePickerSaveOptions options);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class PickerOptions
    {
        public PickerOptions() { throw null; }
        public Avalonia.Platform.Storage.IStorageFolder? SuggestedStartLocation { get { throw null; } set { throw null; } }
        public string? Title { get { throw null; } set { throw null; } }
    }
    public partial class StorageItemProperties
    {
        public StorageItemProperties(System.Nullable<ulong> size = null, System.Nullable<System.DateTimeOffset> dateCreated = null, System.Nullable<System.DateTimeOffset> dateModified = null) { throw null; }
        public System.Nullable<System.DateTimeOffset> DateCreated { get { throw null; } }
        public System.Nullable<System.DateTimeOffset> DateModified { get { throw null; } }
        public System.Nullable<ulong> Size { get { throw null; } }
    }
}
namespace Avalonia.Platform.Storage.FileIO
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial class BclStorageFile : Avalonia.Platform.Storage.IStorageBookmarkFile, Avalonia.Platform.Storage.IStorageFile, Avalonia.Platform.Storage.IStorageItem, Avalonia.Platform.Storage.IStorageBookmarkItem
    {
        public BclStorageFile(string fileName) { throw null; }
        public BclStorageFile(System.IO.FileInfo fileInfo) { throw null; }
        public virtual bool CanBookmark { get { throw null; } }
        public bool CanOpenRead { get { throw null; } }
        public bool CanOpenWrite { get { throw null; } }
        public string Name { get { throw null; } }
        public void Dispose() { throw null; }
        public System.Threading.Tasks.Task<Avalonia.Platform.Storage.StorageItemProperties> GetBasicPropertiesAsync() { throw null; }
        public System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageFolder?> GetParentAsync() { throw null; }
        public System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync() { throw null; }
        public System.Threading.Tasks.Task<System.IO.Stream> OpenWriteAsync() { throw null; }
        public System.Threading.Tasks.Task ReleaseBookmarkAsync() { throw null; }
        public virtual System.Threading.Tasks.Task<string?> SaveBookmarkAsync() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool? TryGetUri(out System.Uri? uri) { throw null; }
        protected virtual void Dispose(bool disposing) { throw null; }
        protected override void Finalize() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial class BclStorageFolder : Avalonia.Platform.Storage.IStorageBookmarkFolder, Avalonia.Platform.Storage.IStorageFolder, Avalonia.Platform.Storage.IStorageItem, Avalonia.Platform.Storage.IStorageBookmarkItem
    {
        public BclStorageFolder(string path) { throw null; }
        public BclStorageFolder(System.IO.DirectoryInfo directoryInfo) { throw null; }
        public bool CanBookmark { get { throw null; } }
        public string Name { get { throw null; } }
        public void Dispose() { throw null; }
        public System.Threading.Tasks.Task<Avalonia.Platform.Storage.StorageItemProperties> GetBasicPropertiesAsync() { throw null; }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.IStorageItem>> GetItemsAsync() { throw null; }
        public System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageFolder?> GetParentAsync() { throw null; }
        public System.Threading.Tasks.Task ReleaseBookmarkAsync() { throw null; }
        public virtual System.Threading.Tasks.Task<string?> SaveBookmarkAsync() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool? TryGetUri(out System.Uri? uri) { throw null; }
        protected virtual void Dispose(bool disposing) { throw null; }
        protected override void Finalize() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public abstract partial class BclStorageProvider : Avalonia.Platform.Storage.IStorageProvider
    {
        protected BclStorageProvider() { throw null; }
        public abstract bool CanOpen { get; }
        public abstract bool CanPickFolder { get; }
        public abstract bool CanSave { get; }
        public virtual System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageBookmarkFile?> OpenFileBookmarkAsync(string bookmark) { throw null; }
        public abstract System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.IStorageFile>> OpenFilePickerAsync(Avalonia.Platform.Storage.FilePickerOpenOptions options);
        public virtual System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageBookmarkFolder?> OpenFolderBookmarkAsync(string bookmark) { throw null; }
        public abstract System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Storage.IStorageFolder>> OpenFolderPickerAsync(Avalonia.Platform.Storage.FolderPickerOpenOptions options);
        public abstract System.Threading.Tasks.Task<Avalonia.Platform.Storage.IStorageFile?> SaveFilePickerAsync(Avalonia.Platform.Storage.FilePickerSaveOptions options);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public static partial class StorageProviderHelpers
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static string NameWithExtension(string path, string? defaultExtension, Avalonia.Platform.Storage.FilePickerFileType? filter) { throw null; }
    }
}
namespace Avalonia.Reactive
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class LightweightObservableBase<T>
    {
        protected LightweightObservableBase() { throw null; }
        public bool HasObservers { get { throw null; } }
        public System.IDisposable Subscribe(System.IObserver<T> observer) { throw null; }
        protected abstract void Deinitialize();
        protected abstract void Initialize();
        protected void PublishCompleted() { throw null; }
        protected void PublishError(System.Exception error) { throw null; }
        protected void PublishNext(T value) { throw null; }
        protected virtual void Subscribed(System.IObserver<T> observer, bool first) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class SingleSubscriberObservableBase<T>
    {
        protected SingleSubscriberObservableBase() { throw null; }
        public virtual void Dispose() { throw null; }
        public System.IDisposable Subscribe(System.IObserver<T> observer) { throw null; }
        protected void PublishCompleted() { throw null; }
        protected void PublishError(System.Exception error) { throw null; }
        protected void PublishNext(T value) { throw null; }
        protected abstract void Subscribed();
        protected abstract void Unsubscribed();
    }
}
namespace Avalonia.Rendering
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class CustomSimpleHitTestExtensions
    {
        public static bool HitTestCustom(this Avalonia.Visual visual, Avalonia.Point point) { throw null; }
        public static bool HitTestCustom(this System.Collections.Generic.IEnumerable<Avalonia.Visual> children, Avalonia.Point point) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DefaultRenderTimer : Avalonia.Rendering.IRenderTimer
    {
        public DefaultRenderTimer(int framesPerSecond) { throw null; }
        public int FramesPerSecond { get { throw null; } }
        public bool RunsInBackground { get { throw null; } }
        public event System.Action<System.TimeSpan> Tick { add { throw null; } remove { throw null; } }
        protected void Start() { throw null; }
        protected virtual System.IDisposable StartCore(System.Action<System.TimeSpan> tick) { throw null; }
        protected void Stop() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DeferredRenderer : Avalonia.Rendering.RendererBase, Avalonia.Rendering.IRenderer, Avalonia.Rendering.IRenderLoopTask, Avalonia.Rendering.IVisualBrushRenderer
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public DeferredRenderer(Avalonia.Rendering.IRenderRoot root, Avalonia.Rendering.IRenderLoop renderLoop, System.Func<Avalonia.Platform.IRenderTarget> renderTargetFactory, Avalonia.Rendering.PlatformRenderInterfaceContextManager? renderInterface = null, Avalonia.Rendering.SceneGraph.ISceneBuilder? sceneBuilder = null, Avalonia.Threading.IDispatcher? dispatcher = null, Avalonia.Rendering.IDeferredRendererLock? rendererLock = null) { throw null; }
        public DeferredRenderer(Avalonia.Visual root, Avalonia.Platform.IRenderTarget renderTarget, Avalonia.Rendering.SceneGraph.ISceneBuilder? sceneBuilder = null) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string? DebugFramesPath { get { throw null; } set { throw null; } }
        public bool DrawDirtyRects { get { throw null; } set { throw null; } }
        public bool DrawFps { get { throw null; } set { throw null; } }
        public bool RenderOnlyOnRenderThread { get { throw null; } set { throw null; } }
        public void AddDirty(Avalonia.Visual visual) { throw null; }
        public void Dispose() { throw null; }
        public System.Collections.Generic.IEnumerable<Avalonia.Visual> HitTest(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public Avalonia.Visual? HitTestFirst(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public void Paint(Avalonia.Rect rect) { throw null; }
        public void RecalculateChildren(Avalonia.Visual visual) { throw null; }
        public void Resized(Avalonia.Size size) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Rendering.SceneInvalidatedEventArgs>? SceneInvalidated { add { throw null; } remove { throw null; } }
        public void Start() { throw null; }
        public void Stop() { throw null; }
        public System.Threading.Tasks.ValueTask<object?> TryGetRenderInterfaceFeature(System.Type featureType) { throw null; }
    }
    public partial interface ICustomHitTest : Avalonia.Rendering.ICustomSimpleHitTest
    {
    }
    public partial interface ICustomSimpleHitTest
    {
        bool HitTest(Avalonia.Point point);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IDeferredRendererLock
    {
        System.IDisposable? TryLock();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ImmediateRenderer : Avalonia.Rendering.RendererBase, Avalonia.Rendering.IRenderer, Avalonia.Rendering.IVisualBrushRenderer
    {
        public ImmediateRenderer(Avalonia.Visual root, System.Func<Avalonia.Platform.IRenderTarget> renderTargetFactory, Avalonia.Rendering.PlatformRenderInterfaceContextManager? renderContext = null) { throw null; }
        public bool DrawDirtyRects { get { throw null; } set { throw null; } }
        public bool DrawFps { get { throw null; } set { throw null; } }
        public static void Render(Avalonia.Visual visual, Avalonia.Platform.IRenderTarget target) { throw null; }
        public static void Render(Avalonia.Visual visual, Avalonia.Media.DrawingContext context) { throw null; }
        public void AddDirty(Avalonia.Visual visual) { throw null; }
        public void Dispose() { throw null; }
        public System.Collections.Generic.IEnumerable<Avalonia.Visual> HitTest(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public Avalonia.Visual? HitTestFirst(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public void Paint(Avalonia.Rect rect) { throw null; }
        public void RecalculateChildren(Avalonia.Visual visual) { throw null; }
        public void Resized(Avalonia.Size size) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Rendering.SceneInvalidatedEventArgs>? SceneInvalidated { add { throw null; } remove { throw null; } }
        public void Start() { throw null; }
        public void Stop() { throw null; }
        public System.Threading.Tasks.ValueTask<object?> TryGetRenderInterfaceFeature(System.Type featureType) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IRenderer
    {
        bool DrawDirtyRects { get; set; }
        bool DrawFps { get; set; }
        void AddDirty(Avalonia.Visual visual);
        System.Collections.Generic.IEnumerable<Avalonia.Visual> HitTest(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter);
        Avalonia.Visual? HitTestFirst(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter);
        void Paint(Avalonia.Rect rect);
        void RecalculateChildren(Avalonia.Visual visual);
        void Resized(Avalonia.Size size);
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Rendering.SceneInvalidatedEventArgs>? SceneInvalidated;
        void Start();
        void Stop();
        System.Threading.Tasks.ValueTask<object?> TryGetRenderInterfaceFeature(System.Type featureType);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IRendererFactory
    {
        Avalonia.Rendering.IRenderer Create(Avalonia.Rendering.IRenderRoot root, Avalonia.Rendering.IRenderLoop renderLoop);
    }
    public partial interface IRendererWithCompositor : Avalonia.Rendering.IRenderer
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Rendering.Composition.Compositor Compositor { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IRenderLoop
    {
        bool RunsInBackground { get; }
        void Add(Avalonia.Rendering.IRenderLoopTask i);
        void Remove(Avalonia.Rendering.IRenderLoopTask i);
    }
    public partial interface IRenderLoopTask
    {
        bool NeedsUpdate { get; }
        void Render();
        void Update(System.TimeSpan time);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IRenderRoot
    {
        Avalonia.Size ClientSize { get; }
        Avalonia.Rendering.IRenderer Renderer { get; }
        double RenderScaling { get; }
        void Invalidate(Avalonia.Rect rect);
        Avalonia.Point PointToClient(Avalonia.PixelPoint point);
        Avalonia.PixelPoint PointToScreen(Avalonia.Point point);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IRenderTimer
    {
        bool RunsInBackground { get; }
        public event System.Action<System.TimeSpan> Tick;
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IVisualBrushInitialize
    {
        void EnsureInitialized();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IVisualBrushRenderer
    {
        Avalonia.Size GetRenderTargetSize(Avalonia.Media.IVisualBrush brush);
        void RenderVisualBrush(Avalonia.Platform.IDrawingContextImpl context, Avalonia.Media.IVisualBrush brush);
    }
    public partial class ManagedDeferredRendererLock : Avalonia.Utilities.DisposableLock, Avalonia.Rendering.IDeferredRendererLock
    {
        public ManagedDeferredRendererLock() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial class PlatformRenderInterfaceContextManager
    {
        public PlatformRenderInterfaceContextManager(Avalonia.Platform.IPlatformGraphics? graphics) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Platform.IPlatformRenderInterfaceContext Value { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Platform.IRenderTarget CreateRenderTarget(System.Collections.Generic.IEnumerable<object> surfaces) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable EnsureCurrent() { throw null; }
        public void EnsureValidBackendContext() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RendererBase
    {
        public RendererBase(bool useManualFpsCounting = false) { throw null; }
        protected void FpsTick() { throw null; }
        protected void RenderFps(Avalonia.Media.DrawingContext context, Avalonia.Rect clientRect, System.Nullable<int> layerCount) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RenderLayer
    {
        public RenderLayer(Avalonia.Platform.IDrawingContextImpl drawingContext, Avalonia.Size size, double scaling, Avalonia.Visual layerRoot) { throw null; }
        public Avalonia.Utilities.IRef<Avalonia.Platform.IDrawingContextLayerImpl> Bitmap { get { throw null; } }
        public bool IsEmpty { get { throw null; } set { throw null; } }
        public Avalonia.Visual LayerRoot { get { throw null; } }
        public double Scaling { get { throw null; } }
        public Avalonia.Size Size { get { throw null; } }
        public void RecreateBitmap(Avalonia.Platform.IDrawingContextImpl drawingContext, Avalonia.Size size, double scaling) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class RenderLayers
    {
        public RenderLayers() { throw null; }
        public int Count { get { throw null; } }
        public Avalonia.Rendering.RenderLayer this[Avalonia.Visual layerRoot] { get { throw null; } }
        public void Clear() { throw null; }
        public System.Collections.Generic.IEnumerator<Avalonia.Rendering.RenderLayer> GetEnumerator() { throw null; }
        public bool TryGetValue(Avalonia.Visual layerRoot, out Avalonia.Rendering.RenderLayer? value) { throw null; }
        public void Update(Avalonia.Rendering.SceneGraph.Scene scene, Avalonia.Platform.IDrawingContextImpl context) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class RenderLoop : Avalonia.Rendering.IRenderLoop
    {
        public RenderLoop() { throw null; }
        public RenderLoop(Avalonia.Rendering.IRenderTimer timer, Avalonia.Threading.IDispatcher dispatcher) { throw null; }
        public bool RunsInBackground { get { throw null; } }
        protected Avalonia.Rendering.IRenderTimer Timer { get { throw null; } }
        public void Add(Avalonia.Rendering.IRenderLoopTask i) { throw null; }
        public void Remove(Avalonia.Rendering.IRenderLoopTask i) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SceneInvalidatedEventArgs
    {
        public Avalonia.Rect DirtyRect { get { throw null; } }
        public Avalonia.Rendering.IRenderRoot RenderRoot { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SleepLoopRenderTimer : Avalonia.Rendering.IRenderTimer
    {
        public SleepLoopRenderTimer(int fps) { throw null; }
        public bool RunsInBackground { get { throw null; } }
        public event System.Action<System.TimeSpan> Tick { add { throw null; } remove { throw null; } }
    }
    public partial class UiThreadRenderTimer : Avalonia.Rendering.DefaultRenderTimer
    {
        public UiThreadRenderTimer(int framesPerSecond) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override System.IDisposable StartCore(System.Action<System.TimeSpan> tick) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ZIndexComparer
    {
        public ZIndexComparer() { throw null; }
        public static readonly System.Comparison<Avalonia.Visual> ComparisonInstance;
        public static readonly Avalonia.Rendering.ZIndexComparer Instance;
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public int? Compare(Avalonia.Visual? x, Avalonia.Visual? y) { throw null; }
    }
}
namespace Avalonia.Rendering.Composition
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class BooleanKeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public BooleanKeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, bool value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, bool value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ColorKeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public ColorKeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, Avalonia.Media.Color value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, Avalonia.Media.Color value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositingRenderer : Avalonia.Rendering.IRendererWithCompositor, Avalonia.Rendering.IRenderer
    {
        public CompositingRenderer(Avalonia.Rendering.IRenderRoot root, Avalonia.Rendering.Composition.Compositor compositor, System.Func<System.Collections.Generic.IEnumerable<object>> surfaces) { throw null; }
        public Avalonia.Rendering.Composition.Compositor Compositor { get { throw null; } }
        public bool DrawDirtyRects { get { throw null; } set { throw null; } }
        public bool DrawFps { get { throw null; } set { throw null; } }
        public bool RenderOnlyOnRenderThread { get { throw null; } set { throw null; } }
        public void AddDirty(Avalonia.Visual visual) { throw null; }
        public void Dispose() { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public System.Collections.Generic.IEnumerable<Avalonia.Visual> HitTest(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public Avalonia.Visual? HitTestFirst(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public void Paint(Avalonia.Rect rect) { throw null; }
        public void RecalculateChildren(Avalonia.Visual visual) { throw null; }
        public void Resized(Avalonia.Size size) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public event System.EventHandler<Avalonia.Rendering.SceneInvalidatedEventArgs>? SceneInvalidated { add { throw null; } remove { throw null; } }
        public void Start() { throw null; }
        public void Stop() { throw null; }
        public System.Threading.Tasks.ValueTask<object?> TryGetRenderInterfaceFeature(System.Type featureType) { throw null; }
    }
    public sealed partial class CompositionBlendMode
    {
        public const Avalonia.Rendering.Composition.CompositionBlendMode Clear = 0;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Color = 27;
        public const Avalonia.Rendering.Composition.CompositionBlendMode ColorBurn = 19;
        public const Avalonia.Rendering.Composition.CompositionBlendMode ColorDodge = 18;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Darken = 16;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Difference = 22;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Dst = 2;
        public const Avalonia.Rendering.Composition.CompositionBlendMode DstATop = 10;
        public const Avalonia.Rendering.Composition.CompositionBlendMode DstIn = 6;
        public const Avalonia.Rendering.Composition.CompositionBlendMode DstOut = 8;
        public const Avalonia.Rendering.Composition.CompositionBlendMode DstOver = 4;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Exclusion = 23;
        public const Avalonia.Rendering.Composition.CompositionBlendMode HardLight = 20;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Hue = 25;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Lighten = 17;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Luminosity = 28;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Modulate = 13;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Multiply = 24;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Overlay = 15;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Plus = 12;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Saturation = 26;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Screen = 14;
        public const Avalonia.Rendering.Composition.CompositionBlendMode SoftLight = 21;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Src = 1;
        public const Avalonia.Rendering.Composition.CompositionBlendMode SrcATop = 9;
        public const Avalonia.Rendering.Composition.CompositionBlendMode SrcIn = 5;
        public const Avalonia.Rendering.Composition.CompositionBlendMode SrcOut = 7;
        public const Avalonia.Rendering.Composition.CompositionBlendMode SrcOver = 3;
        public int value__;
        public const Avalonia.Rendering.Composition.CompositionBlendMode Xor = 11;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionContainerVisual : Avalonia.Rendering.Composition.CompositionVisual
    {
        public Avalonia.Rendering.Composition.CompositionVisualCollection Children { get { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionCustomVisual : Avalonia.Rendering.Composition.CompositionContainerVisual
    {
        public void SendHandlerMessage(object message) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class CompositionCustomVisualHandler
    {
        protected CompositionCustomVisualHandler() { throw null; }
        protected System.TimeSpan CompositionNow { get { throw null; } }
        protected System.Numerics.Vector2 EffectiveSize { get { throw null; } }
        public virtual Avalonia.Rect GetRenderBounds() { throw null; }
        public virtual void OnAnimationFrameUpdate() { throw null; }
        public virtual void OnMessage(object message) { throw null; }
        public abstract void OnRender(Avalonia.Media.ImmediateDrawingContext drawingContext);
        protected void Invalidate() { throw null; }
        protected void RegisterForNextAnimationFrameUpdate() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionDrawingSurface : Avalonia.Rendering.Composition.CompositionSurface
    {
        public System.Threading.Tasks.Task UpdateAsync(Avalonia.Rendering.Composition.ICompositionImportedGpuImage image) { throw null; }
        public System.Threading.Tasks.Task UpdateWithKeyedMutexAsync(Avalonia.Rendering.Composition.ICompositionImportedGpuImage image, uint acquireIndex, uint releaseIndex) { throw null; }
        public System.Threading.Tasks.Task UpdateWithSemaphoresAsync(Avalonia.Rendering.Composition.ICompositionImportedGpuImage image, Avalonia.Rendering.Composition.ICompositionImportedGpuSemaphore waitForSemaphore, Avalonia.Rendering.Composition.ICompositionImportedGpuSemaphore signalSemaphore) { throw null; }
        protected override void Finalize() { throw null; }
    }
    public sealed partial class CompositionGetValueStatus
    {
        public const Avalonia.Rendering.Composition.CompositionGetValueStatus NotFound = 2;
        public const Avalonia.Rendering.Composition.CompositionGetValueStatus Succeeded = 0;
        public const Avalonia.Rendering.Composition.CompositionGetValueStatus TypeMismatch = 1;
        public int value__;
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class CompositionGpuImportedImageSynchronizationCapabilities
    {
        public const Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities Automatic = 4;
        public const Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities KeyedMutex = 2;
        public const Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities Semaphores = 1;
        public int value__;
    }
    public sealed partial class CompositionGradientExtendMode
    {
        public const Avalonia.Rendering.Composition.CompositionGradientExtendMode Clamp = 0;
        public const Avalonia.Rendering.Composition.CompositionGradientExtendMode Mirror = 2;
        public int value__;
        public const Avalonia.Rendering.Composition.CompositionGradientExtendMode Wrap = 1;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class CompositionObject
    {
        public Avalonia.Rendering.Composition.Compositor Compositor { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Rendering.Composition.Animations.ImplicitAnimationCollection? ImplicitAnimations { get { throw null; } set { throw null; } }
        public bool IsDisposed { get { throw null; } }
        public void Dispose() { throw null; }
        public void StartAnimation(string propertyName, Avalonia.Rendering.Composition.Animations.CompositionAnimation animation) { throw null; }
        public void StartAnimationGroup(Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase grp) { throw null; }
        protected void RegisterForSerialization() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionPropertySet : Avalonia.Rendering.Composition.CompositionObject
    {
        public void InsertBoolean(string propertyName, bool value) { throw null; }
        public void InsertColor(string propertyName, Avalonia.Media.Color value) { throw null; }
        public void InsertMatrix3x2(string propertyName, System.Numerics.Matrix3x2 value) { throw null; }
        public void InsertMatrix4x4(string propertyName, System.Numerics.Matrix4x4 value) { throw null; }
        public void InsertQuaternion(string propertyName, System.Numerics.Quaternion value) { throw null; }
        public void InsertScalar(string propertyName, float value) { throw null; }
        public void InsertVector2(string propertyName, System.Numerics.Vector2 value) { throw null; }
        public void InsertVector3(string propertyName, System.Numerics.Vector3 value) { throw null; }
        public void InsertVector4(string propertyName, System.Numerics.Vector4 value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetBoolean(string propertyName, out bool value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetColor(string propertyName, out Avalonia.Media.Color value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetMatrix3x2(string propertyName, out System.Numerics.Matrix3x2 value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetMatrix4x4(string propertyName, out System.Numerics.Matrix4x4 value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetQuaternion(string propertyName, out System.Numerics.Quaternion value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetScalar(string propertyName, out float value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetVector2(string propertyName, out System.Numerics.Vector2 value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetVector3(string propertyName, out System.Numerics.Vector3 value) { throw null; }
        public Avalonia.Rendering.Composition.CompositionGetValueStatus TryGetVector4(string propertyName, out System.Numerics.Vector4 value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionSolidColorVisual : Avalonia.Rendering.Composition.CompositionContainerVisual
    {
        public Avalonia.Media.Color Color { get { throw null; } set { throw null; } }
    }
    public sealed partial class CompositionStretch
    {
        public const Avalonia.Rendering.Composition.CompositionStretch Fill = 1;
        public const Avalonia.Rendering.Composition.CompositionStretch None = 0;
        public int value__;
    }
    public partial class CompositionSurface : Avalonia.Rendering.Composition.CompositionObject
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionSurfaceVisual : Avalonia.Rendering.Composition.CompositionContainerVisual
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Rendering.Composition.CompositionSurface? Surface { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionTarget : Avalonia.Rendering.Composition.CompositionObject
    {
        public bool DrawDirtyRects { get { throw null; } set { throw null; } }
        public bool DrawFps { get { throw null; } set { throw null; } }
        public bool IsEnabled { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Rendering.Composition.CompositionVisual? Root { get { throw null; } set { throw null; } }
        public double Scaling { get { throw null; } set { throw null; } }
        public Avalonia.Size Size { get { throw null; } set { throw null; } }
        public void RequestRedraw() { throw null; }
        public Avalonia.Collections.Pooled.PooledList<Avalonia.Rendering.Composition.CompositionVisual>? TryHitTest(Avalonia.Point point, System.Func<Avalonia.Rendering.Composition.CompositionVisual, bool> filter) { throw null; }
        public System.Nullable<Avalonia.Point> TryTransformToVisual(Avalonia.Rendering.Composition.CompositionVisual visual, Avalonia.Point point) { throw null; }
    }
    [System.FlagsAttribute[missing]]
    public sealed partial class CompositionTileMode
    {
        public const Avalonia.Rendering.Composition.CompositionTileMode Flip = 12;
        public const Avalonia.Rendering.Composition.CompositionTileMode FlipX = 4;
        public const Avalonia.Rendering.Composition.CompositionTileMode FlipY = 8;
        public const Avalonia.Rendering.Composition.CompositionTileMode None = 0;
        public const Avalonia.Rendering.Composition.CompositionTileMode Tile = 3;
        public const Avalonia.Rendering.Composition.CompositionTileMode TileX = 1;
        public const Avalonia.Rendering.Composition.CompositionTileMode TileY = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class CompositionVisual : Avalonia.Rendering.Composition.CompositionObject
    {
        public System.Numerics.Vector2? AnchorPoint { get { throw null; } set { throw null; } }
        public System.Numerics.Vector3? CenterPoint { get { throw null; } set { throw null; } }
        public bool? ClipToBounds { get { throw null; } set { throw null; } }
        public System.Numerics.Vector3? Offset { get { throw null; } set { throw null; } }
        public float? Opacity { get { throw null; } set { throw null; } }
        public Avalonia.Media.IBrush? OpacityMask { get { throw null; } set { throw null; } }
        public System.Numerics.Quaternion? Orientation { get { throw null; } set { throw null; } }
        public Avalonia.Rendering.Composition.CompositionVisual? Parent { get { throw null; } }
        public Avalonia.Rendering.Composition.CompositionTarget? Root { get { throw null; } }
        public float? RotationAngle { get { throw null; } set { throw null; } }
        public System.Numerics.Vector3? Scale { get { throw null; } set { throw null; } }
        public System.Numerics.Vector2? Size { get { throw null; } set { throw null; } }
        public System.Numerics.Matrix4x4? TransformMatrix { get { throw null; } set { throw null; } }
        public bool? Visible { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class CompositionVisualCollection : Avalonia.Rendering.Composition.CompositionObject, Avalonia.Rendering.Composition.Transport.ServerListProxyHelper<Avalonia.Rendering.Composition.CompositionVisual, Avalonia.Rendering.Composition.Server.ServerCompositionVisual>.IRegisterForSerialization
    {
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public Avalonia.Rendering.Composition.CompositionVisual this[int index] { get { throw null; } set { throw null; } }
        public void Add(Avalonia.Rendering.Composition.CompositionVisual item) { throw null; }
        public void Clear() { throw null; }
        public bool Contains(Avalonia.Rendering.Composition.CompositionVisual item) { throw null; }
        public void CopyTo(Avalonia.Rendering.Composition.CompositionVisual[] array, int arrayIndex) { throw null; }
        public System.Collections.Generic.List<Avalonia.Rendering.Composition.CompositionVisual>.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(Avalonia.Rendering.Composition.CompositionVisual item) { throw null; }
        public void Insert(int index, Avalonia.Rendering.Composition.CompositionVisual item) { throw null; }
        public void InsertAbove(Avalonia.Rendering.Composition.CompositionVisual newChild, Avalonia.Rendering.Composition.CompositionVisual sibling) { throw null; }
        public void InsertAtBottom(Avalonia.Rendering.Composition.CompositionVisual newChild) { throw null; }
        public void InsertAtTop(Avalonia.Rendering.Composition.CompositionVisual newChild) { throw null; }
        public void InsertBelow(Avalonia.Rendering.Composition.CompositionVisual newChild, Avalonia.Rendering.Composition.CompositionVisual sibling) { throw null; }
        public bool Remove(Avalonia.Rendering.Composition.CompositionVisual item) { throw null; }
        public void RemoveAll() { throw null; }
        public void RemoveAt(int index) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Compositor
    {
        public Compositor(Avalonia.Rendering.IRenderLoop loop, Avalonia.Platform.IPlatformGraphics? gpu) { throw null; }
        public Avalonia.Rendering.Composition.Animations.CompositionAnimationGroup CreateAnimationGroup() { throw null; }
        public Avalonia.Rendering.Composition.BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation() { throw null; }
        public Avalonia.Rendering.Composition.ColorKeyFrameAnimation CreateColorKeyFrameAnimation() { throw null; }
        public Avalonia.Rendering.Composition.CompositionTarget CreateCompositionTarget(System.Func<System.Collections.Generic.IEnumerable<object>> surfaces) { throw null; }
        public Avalonia.Rendering.Composition.CompositionContainerVisual CreateContainerVisual() { throw null; }
        public Avalonia.Rendering.Composition.CompositionCustomVisual CreateCustomVisual(Avalonia.Rendering.Composition.CompositionCustomVisualHandler handler) { throw null; }
        public Avalonia.Rendering.Composition.CompositionDrawingSurface CreateDrawingSurface() { throw null; }
        public Avalonia.Rendering.Composition.Animations.ExpressionAnimation CreateExpressionAnimation() { throw null; }
        public Avalonia.Rendering.Composition.Animations.ExpressionAnimation CreateExpressionAnimation(string expression) { throw null; }
        public Avalonia.Rendering.Composition.Animations.ImplicitAnimationCollection CreateImplicitAnimationCollection() { throw null; }
        public Avalonia.Rendering.Composition.QuaternionKeyFrameAnimation CreateQuaternionKeyFrameAnimation() { throw null; }
        public Avalonia.Rendering.Composition.ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation() { throw null; }
        public Avalonia.Rendering.Composition.CompositionSolidColorVisual CreateSolidColorVisual() { throw null; }
        public Avalonia.Rendering.Composition.CompositionSurfaceVisual CreateSurfaceVisual() { throw null; }
        public Avalonia.Rendering.Composition.Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation() { throw null; }
        public Avalonia.Rendering.Composition.Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation() { throw null; }
        public Avalonia.Rendering.Composition.Vector4KeyFrameAnimation CreateVector4KeyFrameAnimation() { throw null; }
        public System.Threading.Tasks.Task RequestCommitAsync() { throw null; }
        public void RequestCompositionUpdate(System.Action action) { throw null; }
        public System.Threading.Tasks.ValueTask<Avalonia.Rendering.Composition.ICompositionGpuInterop?> TryGetCompositionGpuInterop() { throw null; }
        public System.Threading.Tasks.ValueTask<object?> TryGetRenderInterfaceFeature(System.Type featureType) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class ElementComposition
    {
        public static Avalonia.Rendering.Composition.CompositionVisual? GetElementChildVisual(Avalonia.Visual visual) { throw null; }
        public static Avalonia.Rendering.Composition.CompositionVisual? GetElementVisual(Avalonia.Visual visual) { throw null; }
        public static void SetElementChildVisual(Avalonia.Visual visual, Avalonia.Rendering.Composition.CompositionVisual? compositionVisual) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ICompositionGpuImportedObject
    {
        System.Threading.Tasks.Task ImportCompeted { get; }
        bool IsLost { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ICompositionGpuInterop
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        byte?[]? DeviceLuid { get; set; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        byte?[]? DeviceUuid { get; set; }
        bool IsLost { get; }
        System.Collections.Generic.IReadOnlyList<string> SupportedImageHandleTypes { get; }
        System.Collections.Generic.IReadOnlyList<string> SupportedSemaphoreTypes { get; }
        Avalonia.Rendering.Composition.CompositionGpuImportedImageSynchronizationCapabilities GetSynchronizationCapabilities(string imageHandleType);
        Avalonia.Rendering.Composition.ICompositionImportedGpuImage ImportImage(Avalonia.Platform.IPlatformHandle handle, Avalonia.Platform.PlatformGraphicsExternalImageProperties properties);
        Avalonia.Rendering.Composition.ICompositionImportedGpuImage ImportImage(Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextImage image);
        Avalonia.Rendering.Composition.ICompositionImportedGpuSemaphore ImportSemaphore(Avalonia.Platform.IPlatformHandle handle);
        Avalonia.Rendering.Composition.ICompositionImportedGpuImage ImportSemaphore(Avalonia.Rendering.Composition.ICompositionImportableSharedGpuContextSemaphore image);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ICompositionImportableSharedGpuContextImage
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ICompositionImportableSharedGpuContextObject
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ICompositionImportableSharedGpuContextSemaphore
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ICompositionImportedGpuImage : Avalonia.Rendering.Composition.ICompositionGpuImportedObject
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ICompositionImportedGpuSemaphore : Avalonia.Rendering.Composition.ICompositionGpuImportedObject
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class QuaternionKeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public QuaternionKeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Quaternion value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Quaternion value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ScalarKeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public ScalarKeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, float value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, float value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Vector2KeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public Vector2KeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Vector2 value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Vector2 value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Vector3KeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public Vector3KeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Vector3 value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Vector3 value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Vector4KeyFrameAnimation : Avalonia.Rendering.Composition.Animations.KeyFrameAnimation
    {
        public Vector4KeyFrameAnimation(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Vector4 value, Avalonia.Animation.Easings.IEasing easingFunction) { throw null; }
        public void InsertKeyFrame(float normalizedProgressKey, System.Numerics.Vector4 value) { throw null; }
    }
}
namespace Avalonia.Rendering.Composition.Animations
{
    public sealed partial class AnimationDelayBehavior
    {
        public const Avalonia.Rendering.Composition.Animations.AnimationDelayBehavior SetInitialValueAfterDelay = 0;
        public const Avalonia.Rendering.Composition.Animations.AnimationDelayBehavior SetInitialValueBeforeDelay = 1;
        public int value__;
    }
    public sealed partial class AnimationIterationBehavior
    {
        public const Avalonia.Rendering.Composition.Animations.AnimationIterationBehavior Count = 0;
        public const Avalonia.Rendering.Composition.Animations.AnimationIterationBehavior Forever = 1;
        public int value__;
    }
    public sealed partial class AnimationStopBehavior
    {
        public const Avalonia.Rendering.Composition.Animations.AnimationStopBehavior LeaveCurrentValue = 0;
        public const Avalonia.Rendering.Composition.Animations.AnimationStopBehavior SetToFinalValue = 2;
        public const Avalonia.Rendering.Composition.Animations.AnimationStopBehavior SetToInitialValue = 1;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class CompositionAnimation : Avalonia.Rendering.Composition.CompositionObject, Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string? Target { get { throw null; } set { throw null; } }
        public void ClearAllParameters() { throw null; }
        public void ClearParameter(string key) { throw null; }
        public void SetColorParameter(string key, Avalonia.Media.Color value) { throw null; }
        public void SetMatrix3x2Parameter(string key, System.Numerics.Matrix3x2 value) { throw null; }
        public void SetMatrix4x4Parameter(string key, System.Numerics.Matrix4x4 value) { throw null; }
        public void SetQuaternionParameter(string key, System.Numerics.Quaternion value) { throw null; }
        public void SetReferenceParameter(string key, Avalonia.Rendering.Composition.CompositionObject compositionObject) { throw null; }
        public void SetScalarParameter(string key, float value) { throw null; }
        public void SetVector2Parameter(string key, System.Numerics.Vector2 value) { throw null; }
        public void SetVector3Parameter(string key, System.Numerics.Vector3 value) { throw null; }
        public void SetVector4Parameter(string key, System.Numerics.Vector4 value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class CompositionAnimationGroup : Avalonia.Rendering.Composition.CompositionObject, Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase
    {
        public CompositionAnimationGroup(Avalonia.Rendering.Composition.Compositor compositor) { throw null; }
        public void Add(Avalonia.Rendering.Composition.Animations.CompositionAnimation value) { throw null; }
        public void Remove(Avalonia.Rendering.Composition.Animations.CompositionAnimation value) { throw null; }
        public void RemoveAll() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ExpressionAnimation : Avalonia.Rendering.Composition.Animations.CompositionAnimation
    {
        public string? Expression { get { throw null; } set { throw null; } }
    }
    public partial interface ICompositionAnimationBase
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class ImplicitAnimationCollection : Avalonia.Rendering.Composition.CompositionObject
    {
        public int Count { get { throw null; } }
        public uint Size { get { throw null; } }
        public Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase this[string key] { get { throw null; } set { throw null; } }
        public void Add(string key, Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase value) { throw null; }
        public void Clear() { throw null; }
        public bool ContainsKey(string key) { throw null; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase>> GetEnumerator() { throw null; }
        public System.Collections.Generic.IReadOnlyDictionary<string, Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase> GetView() { throw null; }
        public bool HasKey(string key) { throw null; }
        public void Insert(string key, Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase animation) { throw null; }
        public Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase? Lookup(string key) { throw null; }
        public bool Remove(string key) { throw null; }
        public bool TryGetValue(string key, out Avalonia.Rendering.Composition.Animations.ICompositionAnimationBase value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class KeyFrameAnimation : Avalonia.Rendering.Composition.Animations.CompositionAnimation
    {
        public Avalonia.Rendering.Composition.Animations.AnimationDelayBehavior DelayBehavior { get { throw null; } set { throw null; } }
        public System.TimeSpan DelayTime { get { throw null; } set { throw null; } }
        public Avalonia.Animation.PlaybackDirection Direction { get { throw null; } set { throw null; } }
        public System.TimeSpan Duration { get { throw null; } set { throw null; } }
        public Avalonia.Rendering.Composition.Animations.AnimationIterationBehavior IterationBehavior { get { throw null; } set { throw null; } }
        public int IterationCount { get { throw null; } set { throw null; } }
        public Avalonia.Rendering.Composition.Animations.AnimationStopBehavior StopBehavior { get { throw null; } set { throw null; } }
        public void InsertExpressionKeyFrame(float normalizedProgressKey, string value, Avalonia.Animation.Easings.Easing? easingFunction = null) { throw null; }
    }
}
namespace Avalonia.Rendering.Composition.Transport
{
    public sealed partial class BatchStreamSegment<TData>
    {
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public TData Data { get { throw null; } set { throw null; } }
        public int ElementCount { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Rendering.Composition.Transport.BatchStreamSegment<TData> left, Avalonia.Rendering.Composition.Transport.BatchStreamSegment<TData> right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Rendering.Composition.Transport.BatchStreamSegment<TData> left, Avalonia.Rendering.Composition.Transport.BatchStreamSegment<TData> right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Rendering.Composition.Transport.BatchStreamSegment<TData> other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
}
namespace Avalonia.Rendering.SceneGraph
{
    public partial interface ICustomDrawOperation : Avalonia.Rendering.SceneGraph.IDrawOperation
    {
    }
    public partial interface IDrawOperation
    {
        Avalonia.Rect Bounds { get; }
        bool HitTest(Avalonia.Point p);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        void Render(Avalonia.Platform.IDrawingContextImpl context);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ISceneBuilder
    {
        bool Update(Avalonia.Rendering.SceneGraph.Scene scene, Avalonia.Visual visual);
        void UpdateAll(Avalonia.Rendering.SceneGraph.Scene scene);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IVisualNode
    {
        Avalonia.Rect Bounds { get; }
        System.Collections.Generic.IReadOnlyList<Avalonia.Rendering.SceneGraph.IVisualNode> Children { get; }
        Avalonia.Rect ClipBounds { get; }
        bool ClipToBounds { get; }
        Avalonia.CornerRadius ClipToBoundsRadius { get; }
        bool Disposed { get; }
        System.Collections.Generic.IReadOnlyList<Avalonia.Utilities.IRef<Avalonia.Rendering.SceneGraph.IDrawOperation>> DrawOperations { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Platform.IGeometryImpl? GeometryClip { get; set; }
        bool HasAncestorGeometryClip { get; }
        Avalonia.Rect LayoutBounds { get; }
        double Opacity { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Rendering.SceneGraph.IVisualNode? Parent { get; }
        Avalonia.Matrix Transform { get; }
        Avalonia.Visual Visual { get; }
        void BeginRender(Avalonia.Platform.IDrawingContextImpl context, bool skipOpacity);
        void EndRender(Avalonia.Platform.IDrawingContextImpl context, bool skipOpacity);
        bool HitTest(Avalonia.Point p);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Scene
    {
        public Scene(Avalonia.Visual rootVisual) { throw null; }
        public int Generation { get { throw null; } }
        public Avalonia.Rendering.SceneGraph.SceneLayers Layers { get { throw null; } }
        public System.Threading.Tasks.Task Rendered { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public System.Collections.Generic.List<System.Action>? RenderThreadJobs { get { throw null; } set { throw null; } }
        public Avalonia.Rendering.SceneGraph.IVisualNode Root { get { throw null; } }
        public double Scaling { get { throw null; } set { throw null; } }
        public Avalonia.Size Size { get { throw null; } set { throw null; } }
        public void Add(Avalonia.Rendering.SceneGraph.IVisualNode node) { throw null; }
        public Avalonia.Rendering.SceneGraph.Scene CloneScene() { throw null; }
        public void Dispose() { throw null; }
        public Avalonia.Rendering.SceneGraph.IVisualNode? FindNode(Avalonia.Visual visual) { throw null; }
        public System.Collections.Generic.IEnumerable<Avalonia.Visual> HitTest(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public Avalonia.Visual? HitTestFirst(Avalonia.Point p, Avalonia.Visual root, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public void MarkAsRendered() { throw null; }
        public void Remove(Avalonia.Rendering.SceneGraph.IVisualNode node) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SceneBuilder : Avalonia.Rendering.SceneGraph.ISceneBuilder
    {
        public SceneBuilder() { throw null; }
        public bool Update(Avalonia.Rendering.SceneGraph.Scene scene, Avalonia.Visual visual) { throw null; }
        public void UpdateAll(Avalonia.Rendering.SceneGraph.Scene scene) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SceneLayer
    {
        public SceneLayer(Avalonia.Visual layerRoot, int distanceFromRoot) { throw null; }
        public int DistanceFromRoot { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Platform.IGeometryImpl? GeometryClip { get { throw null; } set { throw null; } }
        public Avalonia.Visual LayerRoot { get { throw null; } }
        public double Opacity { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Media.IBrush? OpacityMask { get { throw null; } set { throw null; } }
        public Avalonia.Rect OpacityMaskRect { get { throw null; } set { throw null; } }
        public Avalonia.Rendering.SceneGraph.SceneLayer Clone() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class SceneLayers
    {
        public SceneLayers(Avalonia.Visual root) { throw null; }
        public SceneLayers(Avalonia.Visual root, int capacity) { throw null; }
        public int Count { get { throw null; } }
        public bool HasDirty { get { throw null; } }
        public Avalonia.Rendering.SceneGraph.SceneLayer this[int index] { get { throw null; } }
        public Avalonia.Rendering.SceneGraph.SceneLayer this[Avalonia.Visual visual] { get { throw null; } }
        public Avalonia.Rendering.SceneGraph.SceneLayer Add(Avalonia.Visual layerRoot) { throw null; }
        public Avalonia.Rendering.SceneGraph.SceneLayers Clone() { throw null; }
        public bool Exists(Avalonia.Visual layerRoot) { throw null; }
        public Avalonia.Rendering.SceneGraph.SceneLayer? Find(Avalonia.Visual layerRoot) { throw null; }
        public System.Collections.Generic.IEnumerator<Avalonia.Rendering.SceneGraph.SceneLayer> GetEnumerator() { throw null; }
        public Avalonia.Rendering.SceneGraph.SceneLayer GetOrAdd(Avalonia.Visual layerRoot) { throw null; }
        public bool Remove(Avalonia.Visual layerRoot) { throw null; }
        public bool Remove(Avalonia.Rendering.SceneGraph.SceneLayer layer) { throw null; }
    }
}
namespace Avalonia.Rendering.Utilities
{
    public partial class TileBrushCalculator
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public TileBrushCalculator(Avalonia.Media.ITileBrush brush, Avalonia.Size contentSize, Avalonia.Size targetSize) { throw null; }
        public TileBrushCalculator(Avalonia.Media.TileMode tileMode, Avalonia.Media.Stretch stretch, Avalonia.Media.AlignmentX alignmentX, Avalonia.Media.AlignmentY alignmentY, Avalonia.RelativeRect sourceRect, Avalonia.RelativeRect destinationRect, Avalonia.Size contentSize, Avalonia.Size targetSize) { throw null; }
        public Avalonia.Rect DestinationRect { get { throw null; } }
        public Avalonia.Rect IntermediateClip { get { throw null; } }
        public Avalonia.Size IntermediateSize { get { throw null; } }
        public Avalonia.Matrix IntermediateTransform { get { throw null; } }
        public bool IsValid { get { throw null; } }
        public bool NeedsIntermediate { get { throw null; } }
        public Avalonia.Rect SourceRect { get { throw null; } }
        public static Avalonia.Matrix CalculateIntermediateTransform(Avalonia.Media.TileMode tileMode, Avalonia.Rect sourceRect, Avalonia.Rect destinationRect, Avalonia.Vector scale, Avalonia.Vector translate, out Avalonia.Rect drawRect) { throw null; }
        public static Avalonia.Vector CalculateTranslate(Avalonia.Media.AlignmentX alignmentX, Avalonia.Media.AlignmentY alignmentY, Avalonia.Rect sourceRect, Avalonia.Rect destinationRect, Avalonia.Vector scale) { throw null; }
    }
}
namespace Avalonia.Styling
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ControlTheme : Avalonia.Styling.StyleBase
    {
        public ControlTheme() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ControlTheme(System.Type targetType) { throw null; }
        public Avalonia.Styling.ControlTheme? BasedOn { get { throw null; } set { throw null; } }
        public System.Type? TargetType { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IGlobalStyles : Avalonia.Styling.IStyleHost
    {
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public event System.Action<System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle>>? GlobalStylesAdded;
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
        public event System.Action<System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle>>? GlobalStylesRemoved;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ISetter
    {
        Avalonia.Styling.ISetterInstance Instance(Avalonia.Styling.IStyleInstance styleInstance, Avalonia.StyledElement target);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ISetterInstance
    {
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ISetterValue
    {
        void Initialize(Avalonia.Styling.ISetter setter);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStyle : Avalonia.Controls.IResourceNode
    {
        System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle> Children { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStyleable : Avalonia.INamed
    {
        Avalonia.Collections.IAvaloniaReadOnlyList<string> Classes { get; }
        System.Type StyleKey { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.AvaloniaObject? TemplatedParent { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IStyleHost
    {
        bool IsStylesInitialized { get; }
        Avalonia.Styling.Styles Styles { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        Avalonia.Styling.IStyleHost? StylingParent { get; }
        void StylesAdded(System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle> styles);
        void StylesRemoved(System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle> styles);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IStyleInstance
    {
        bool HasActivator { get; }
        bool IsActive { get; }
        Avalonia.Styling.IStyle Source { get; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface ITemplate
    {
        object Build();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class NthChildSelector : Avalonia.Styling.Selector
    {
        public NthChildSelector(Avalonia.Styling.Selector? previous, int? step, int? offset) { throw null; }
        protected internal NthChildSelector(Avalonia.Styling.Selector? previous, int? step, int? offset, bool? reversed) { throw null; }
        public override bool? InTemplate { get { throw null; } }
        public override bool? IsCombinator { get { throw null; } }
        public int? Offset { get { throw null; } }
        public int? Step { get { throw null; } }
        public override System.Type? TargetType { get { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString(Avalonia.Styling.Style? owner) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected override Avalonia.Styling.SelectorMatch Evaluate(Avalonia.StyledElement control, Avalonia.Styling.IStyle? parent, bool subscribe) { throw null; }
        protected override Avalonia.Styling.Selector? MovePrevious() { throw null; }
        protected override Avalonia.Styling.Selector? MovePreviousOrParent() { throw null; }
    }
    public partial class NthLastChildSelector : Avalonia.Styling.NthChildSelector
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public NthLastChildSelector(Avalonia.Styling.Selector? previous, int? step, int? offset) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class Selector
    {
        protected Selector() { throw null; }
        public abstract bool InTemplate { get; }
        public abstract bool IsCombinator { get; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public abstract System.Type? TargetType { get; }
        public Avalonia.Styling.SelectorMatch Match(Avalonia.StyledElement control, Avalonia.Styling.IStyle? parent = null, bool subscribe = true) { throw null; }
        public override string ToString() { throw null; }
        public abstract string ToString(Avalonia.Styling.Style? owner);
        protected abstract Avalonia.Styling.SelectorMatch Evaluate(Avalonia.StyledElement control, Avalonia.Styling.IStyle? parent, bool subscribe);
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected abstract Avalonia.Styling.Selector? MovePrevious();
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        protected abstract Avalonia.Styling.Selector? MovePreviousOrParent();
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class SelectorMatch
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public SelectorMatch(Avalonia.Styling.Activators.IStyleActivator match) { throw null; }
        public SelectorMatch(Avalonia.Styling.SelectorMatchResult result) { throw null; }
        public static readonly Avalonia.Styling.SelectorMatch AlwaysThisInstance;
        public static readonly Avalonia.Styling.SelectorMatch AlwaysThisType;
        public static readonly Avalonia.Styling.SelectorMatch NeverThisInstance;
        public static readonly Avalonia.Styling.SelectorMatch NeverThisType;
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Styling.Activators.IStyleActivator? Activator { get { throw null; } }
        public bool IsMatch { get { throw null; } }
        public Avalonia.Styling.SelectorMatchResult Result { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Styling.SelectorMatch left, Avalonia.Styling.SelectorMatch right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Styling.SelectorMatch left, Avalonia.Styling.SelectorMatch right) { throw null; }
        public Avalonia.Styling.SelectorMatch And(in Avalonia.Styling.SelectorMatch other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Styling.SelectorMatch other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    public sealed partial class SelectorMatchResult
    {
        public const Avalonia.Styling.SelectorMatchResult AlwaysThisInstance = 3;
        public const Avalonia.Styling.SelectorMatchResult AlwaysThisType = 4;
        public const Avalonia.Styling.SelectorMatchResult NeverThisInstance = 1;
        public const Avalonia.Styling.SelectorMatchResult NeverThisType = 0;
        public const Avalonia.Styling.SelectorMatchResult Sometimes = 2;
        public int value__;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class Selectors
    {
        public static Avalonia.Styling.Selector Child(this Avalonia.Styling.Selector previous) { throw null; }
        public static Avalonia.Styling.Selector Class(this Avalonia.Styling.Selector? previous, string name) { throw null; }
        public static Avalonia.Styling.Selector Descendant(this Avalonia.Styling.Selector? previous) { throw null; }
        public static Avalonia.Styling.Selector Is(this Avalonia.Styling.Selector? previous, System.Type type) { throw null; }
        public static Avalonia.Styling.Selector Is<T>(this Avalonia.Styling.Selector? previous) where T : Avalonia.Styling.IStyleable { throw null; }
        public static Avalonia.Styling.Selector Name(this Avalonia.Styling.Selector? previous, string name) { throw null; }
        public static Avalonia.Styling.Selector Nesting(this Avalonia.Styling.Selector? previous) { throw null; }
        public static Avalonia.Styling.Selector Not(this Avalonia.Styling.Selector? previous, System.Func<Avalonia.Styling.Selector?, Avalonia.Styling.Selector> argument) { throw null; }
        public static Avalonia.Styling.Selector Not(this Avalonia.Styling.Selector? previous, Avalonia.Styling.Selector argument) { throw null; }
        public static Avalonia.Styling.Selector NthChild(this Avalonia.Styling.Selector? previous, int step, int offset) { throw null; }
        public static Avalonia.Styling.Selector NthLastChild(this Avalonia.Styling.Selector? previous, int step, int offset) { throw null; }
        public static Avalonia.Styling.Selector OfType(this Avalonia.Styling.Selector? previous, System.Type type) { throw null; }
        public static Avalonia.Styling.Selector OfType<T>(this Avalonia.Styling.Selector? previous) where T : Avalonia.Styling.IStyleable { throw null; }
        public static Avalonia.Styling.Selector Or(params Avalonia.Styling.Selector[] selectors) { throw null; }
        public static Avalonia.Styling.Selector Or(System.Collections.Generic.IReadOnlyList<Avalonia.Styling.Selector> selectors) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static Avalonia.Styling.Selector PropertyEquals<T>(this Avalonia.Styling.Selector? previous, Avalonia.AvaloniaProperty<T> property, object? value) { throw null; }
        public static Avalonia.Styling.Selector PropertyEquals(this Avalonia.Styling.Selector? previous, Avalonia.AvaloniaProperty property, object? value) { throw null; }
        public static Avalonia.Styling.Selector Template(this Avalonia.Styling.Selector previous) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Setter : Avalonia.Styling.ISetter, Avalonia.Styling.ISetterInstance, Avalonia.Animation.IAnimationSetter
    {
        public Setter() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Setter(Avalonia.AvaloniaProperty property, object? value) { throw null; }
        public Avalonia.AvaloniaProperty? Property { get { throw null; } set { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Data.AssignBindingAttribute]
        [Avalonia.Metadata.DependsOnAttribute(null)]
        public object? Value { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Style : Avalonia.Styling.StyleBase
    {
        public Style() { throw null; }
        public Style(System.Func<Avalonia.Styling.Selector?, Avalonia.Styling.Selector> selector) { throw null; }
        public Avalonia.Styling.Selector? Selector { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public abstract partial class StyleBase : Avalonia.AvaloniaObject, Avalonia.Styling.IStyle, Avalonia.Controls.IResourceNode, Avalonia.Controls.IResourceProvider
    {
        protected StyleBase() { throw null; }
        public System.Collections.Generic.IList<Avalonia.Animation.IAnimation> Animations { get { throw null; } }
        public System.Collections.Generic.IList<Avalonia.Styling.IStyle> Children { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Controls.IResourceHost? Owner { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Styling.IStyle? Parent { get { throw null; } }
        public Avalonia.Controls.IResourceDictionary Resources { get { throw null; } set { throw null; } }
        public System.Collections.Generic.IList<Avalonia.Styling.ISetter> Setters { get { throw null; } }
        public void Add(Avalonia.Styling.ISetter setter) { throw null; }
        public void Add(Avalonia.Styling.IStyle style) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? OwnerChanged { add { throw null; } remove { throw null; } }
        public bool TryGetResource(object key, out object? result) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public partial class Styles : Avalonia.AvaloniaObject, Avalonia.Collections.IAvaloniaList<Avalonia.Styling.IStyle>, Avalonia.Collections.IAvaloniaReadOnlyList<Avalonia.Styling.IStyle>, Avalonia.Styling.IStyle, Avalonia.Controls.IResourceNode, Avalonia.Controls.IResourceProvider
    {
        public Styles() { throw null; }
        public Styles(Avalonia.Controls.IResourceHost owner) { throw null; }
        public int Count { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public Avalonia.Controls.IResourceHost? Owner { get { throw null; } }
        public Avalonia.Controls.IResourceDictionary Resources { get { throw null; } set { throw null; } }
        public Avalonia.Styling.IStyle this[int index] { get { throw null; } set { throw null; } }
        public void Add(Avalonia.Styling.IStyle item) { throw null; }
        public void AddRange(System.Collections.Generic.IEnumerable<Avalonia.Styling.IStyle> items) { throw null; }
        public void Clear() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler? CollectionChanged { add { throw null; } remove { throw null; } }
        public bool Contains(Avalonia.Styling.IStyle item) { throw null; }
        public void CopyTo(Avalonia.Styling.IStyle[] array, int arrayIndex) { throw null; }
        public Avalonia.Collections.AvaloniaList<Avalonia.Styling.IStyle>.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(Avalonia.Styling.IStyle item) { throw null; }
        public void Insert(int index, Avalonia.Styling.IStyle item) { throw null; }
        public void InsertRange(int index, System.Collections.Generic.IEnumerable<Avalonia.Styling.IStyle> items) { throw null; }
        public void Move(int oldIndex, int newIndex) { throw null; }
        public void MoveRange(int oldIndex, int count, int newIndex) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public event System.EventHandler? OwnerChanged { add { throw null; } remove { throw null; } }
        public bool Remove(Avalonia.Styling.IStyle item) { throw null; }
        public void RemoveAll(System.Collections.Generic.IEnumerable<Avalonia.Styling.IStyle> items) { throw null; }
        public void RemoveAt(int index) { throw null; }
        public void RemoveRange(int index, int count) { throw null; }
        public bool TryGetResource(object key, out object? value) { throw null; }
    }
}
namespace Avalonia.Styling.Activators
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IStyleActivator
    {
        bool IsSubscribed { get; }
        bool GetIsActive();
        void Subscribe(Avalonia.Styling.Activators.IStyleActivatorSink sink);
        void Unsubscribe(Avalonia.Styling.Activators.IStyleActivatorSink sink);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IStyleActivatorSink
    {
        void OnNext(bool value);
    }
}
namespace Avalonia.Threading
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AvaloniaSynchronizationContext
    {
        public AvaloniaSynchronizationContext() { throw null; }
        public static bool AutoInstall { get { throw null; } set { throw null; } }
        public static void InstallIfNeeded() { throw null; }
        public override void Post(System.Threading.SendOrPostCallback d, object? state) { throw null; }
        public override void Send(System.Threading.SendOrPostCallback d, object? state) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class Dispatcher : Avalonia.Threading.IDispatcher
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Dispatcher(Avalonia.Platform.IPlatformThreadingInterface? platform) { throw null; }
        public static Avalonia.Threading.Dispatcher UIThread { get { throw null; } }
        public bool CheckAccess() { throw null; }
        public bool HasJobsWithPriority(Avalonia.Threading.DispatcherPriority minimumPriority) { throw null; }
        public System.Threading.Tasks.Task InvokeAsync(System.Action action, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public System.Threading.Tasks.Task<TResult> InvokeAsync<TResult>(System.Func<TResult> function, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public System.Threading.Tasks.Task InvokeAsync(System.Func<System.Threading.Tasks.Task> function, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public System.Threading.Tasks.Task<TResult> InvokeAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public void MainLoop(System.Threading.CancellationToken cancellationToken) { throw null; }
        public void Post(System.Action action, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public void Post(System.Threading.SendOrPostCallback action, object? arg, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public void RunJobs() { throw null; }
        public void RunJobs(Avalonia.Threading.DispatcherPriority minimumPriority) { throw null; }
        public void VerifyAccess() { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class DispatcherPriority
    {
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.Threading.DispatcherPriority ApplicationIdle;
        public static readonly Avalonia.Threading.DispatcherPriority Background;
        public static readonly Avalonia.Threading.DispatcherPriority Composition;
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.Threading.DispatcherPriority ContextIdle;
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.Threading.DispatcherPriority DataBind;
        public static readonly Avalonia.Threading.DispatcherPriority Input;
        public static readonly Avalonia.Threading.DispatcherPriority Layout;
        public static readonly Avalonia.Threading.DispatcherPriority Loaded;
        public static readonly Avalonia.Threading.DispatcherPriority MaxValue;
        public static readonly Avalonia.Threading.DispatcherPriority MinValue;
        public static readonly Avalonia.Threading.DispatcherPriority Normal;
        public static readonly Avalonia.Threading.DispatcherPriority PreComposition;
        public static readonly Avalonia.Threading.DispatcherPriority Render;
        public static readonly Avalonia.Threading.DispatcherPriority Send;
        [System.ObsoleteAttribute[missing](null)]
        public static readonly Avalonia.Threading.DispatcherPriority SystemIdle;
        public int Value { get { throw null; } }
        public static Avalonia.Threading.DispatcherPriority FromValue(int value) { throw null; }
        public static bool operator ==(Avalonia.Threading.DispatcherPriority left, Avalonia.Threading.DispatcherPriority right) { throw null; }
        public static bool operator >(Avalonia.Threading.DispatcherPriority left, Avalonia.Threading.DispatcherPriority right) { throw null; }
        public static bool operator >=(Avalonia.Threading.DispatcherPriority left, Avalonia.Threading.DispatcherPriority right) { throw null; }
        public static implicit operator int(Avalonia.Threading.DispatcherPriority priority) { throw null; }
        public static implicit operator Avalonia.Threading.DispatcherPriority(int value) { throw null; }
        public static bool operator !=(Avalonia.Threading.DispatcherPriority left, Avalonia.Threading.DispatcherPriority right) { throw null; }
        public static bool operator <(Avalonia.Threading.DispatcherPriority left, Avalonia.Threading.DispatcherPriority right) { throw null; }
        public static bool operator <=(Avalonia.Threading.DispatcherPriority left, Avalonia.Threading.DispatcherPriority right) { throw null; }
        public int CompareTo(Avalonia.Threading.DispatcherPriority other) { throw null; }
        public bool Equals(Avalonia.Threading.DispatcherPriority other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class DispatcherTimer
    {
        public DispatcherTimer() { throw null; }
        public DispatcherTimer(Avalonia.Threading.DispatcherPriority? priority) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public DispatcherTimer(System.TimeSpan interval, Avalonia.Threading.DispatcherPriority priority, System.EventHandler callback) { throw null; }
        public System.TimeSpan? Interval { get { throw null; } set { throw null; } }
        public bool? IsEnabled { get { throw null; } set { throw null; } }
        public object? Tag { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static System.IDisposable Run(System.Func<bool> action, System.TimeSpan interval, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static System.IDisposable RunOnce(System.Action action, System.TimeSpan interval, Avalonia.Threading.DispatcherPriority priority = null) { throw null; }
        public void Start() { throw null; }
        public void Stop() { throw null; }
        public event System.EventHandler? Tick { add { throw null; } remove { throw null; } }
        protected override void Finalize() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IDispatcher
    {
        bool CheckAccess();
        System.Threading.Tasks.Task InvokeAsync(System.Action action, Avalonia.Threading.DispatcherPriority priority = null);
        System.Threading.Tasks.Task InvokeAsync(System.Func<System.Threading.Tasks.Task> function, Avalonia.Threading.DispatcherPriority priority = null);
        void Post(System.Action action, Avalonia.Threading.DispatcherPriority priority = null);
        void Post(System.Threading.SendOrPostCallback action, object? arg, Avalonia.Threading.DispatcherPriority priority = null);
        void VerifyAccess();
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class ThreadSafeObjectPool<T> where T : class, new()
    {
        public ThreadSafeObjectPool() { throw null; }
        public static Avalonia.Threading.ThreadSafeObjectPool<T> Default { get { throw null; } }
        public T Get() { throw null; }
        public void Return(T obj) { throw null; }
    }
}
namespace Avalonia.Utilities
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class AvaloniaResourcesIndexEntry
    {
        public AvaloniaResourcesIndexEntry() { throw null; }
        public int? Offset { get { throw null; } set { throw null; } }
        public string? Path { get { throw null; } set { throw null; } }
        public int? Size { get { throw null; } set { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class AvaloniaResourcesIndexReaderWriter
    {
        public static System.Collections.Generic.List<Avalonia.Utilities.AvaloniaResourcesIndexEntry> ReadIndex(System.IO.Stream stream) { throw null; }
        public static void WriteIndex(System.IO.Stream output, System.Collections.Generic.List<Avalonia.Utilities.AvaloniaResourcesIndexEntry> entries) { throw null; }
        public static void WriteResources(System.IO.Stream output, System.Collections.Generic.List<(string, int, System.Func<System.IO.Stream>)> resources) { throw null; }
    }
    [System.Runtime.CompilerServices.IsByRefLikeAttribute[missing]]
    [System.ObsoleteAttribute[missing](null, null)]
    public sealed partial class CharacterReader
    {
        public CharacterReader(System.ReadOnlySpan<char> s) { throw null; }
        public bool End { get { throw null; } }
        public char Peek { get { throw null; } }
        public int Position { get { throw null; } }
        public System.ReadOnlySpan<char> PeekWhitespace() { throw null; }
        public void Skip(int count) { throw null; }
        public void SkipWhitespace() { throw null; }
        public char Take() { throw null; }
        public bool TakeIf(char c) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public bool TakeIf(System.Func<char, bool> condition) { throw null; }
        public System.ReadOnlySpan<char> TakeUntil(char c) { throw null; }
        public System.ReadOnlySpan<char> TakeWhile(System.Func<char, bool> condition) { throw null; }
        public System.ReadOnlySpan<char> TryPeek(int count) { throw null; }
    }
    public partial class DisposableLock
    {
        public DisposableLock() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable Lock() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public System.IDisposable? TryLock() { throw null; }
    }
    public static partial class IdentifierParser
    {
        public static System.ReadOnlySpan<char> ParseIdentifier(this ref Avalonia.Utilities.CharacterReader r) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class ImmutableReadOnlyListStructEnumerator<T>
    {
        public ImmutableReadOnlyListStructEnumerator(System.Collections.Generic.IReadOnlyList<T> readOnlyList) { throw null; }
        public T Current { get { throw null; } }
        public void Dispose() { throw null; }
        public bool MoveNext() { throw null; }
        public void Reset() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Reflection.DefaultMemberAttribute[missing](null)]
    public sealed partial class InlineDictionary<TKey, TValue> where TKey : class  where TValue : class
    {
        public sealed partial class Enumerator
        {
            public Enumerator(Avalonia.Utilities.InlineDictionary<TKey, TValue> parent) { throw null; }
            [System.Runtime.CompilerServices.NullableAttribute({null, null, null})]
            public System.Collections.Generic.KeyValuePair<TKey, TValue> Current { get { throw null; } }
            public void Dispose() { throw null; }
            public bool MoveNext() { throw null; }
            public void Reset() { throw null; }
        }
        public TValue this[TKey key] { get { throw null; } set { throw null; } }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Utilities.InlineDictionary<TKey, TValue> left, Avalonia.Utilities.InlineDictionary<TKey, TValue> right) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Utilities.InlineDictionary<TKey, TValue> left, Avalonia.Utilities.InlineDictionary<TKey, TValue> right) { throw null; }
        public void Add(TKey key, TValue value) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Utilities.InlineDictionary<TKey, TValue> other) { throw null; }
        public TValue GetAndRemove(TKey key) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public Avalonia.Utilities.InlineDictionary<TKey, TValue>.Enumerator GetEnumerator() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        public bool Remove(TKey key) { throw null; }
        public void Set(TKey key, TValue value) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
        public bool TryGetAndRemoveValue(TKey key, out TValue value) { throw null; }
        public bool TryGetValue(TKey key, out TValue value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IRef<out T> where T : class
    {
        T Item { get; }
        int RefCount { get; }
        Avalonia.Utilities.IRef<out T> Clone();
        Avalonia.Utilities.IRef<TResult> CloneAs<TResult>() where TResult : class;
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IWeakEventSubscriber<in TEventArgs> where TEventArgs : System.EventArgs
    {
        void OnEvent(object? sender, Avalonia.Utilities.WeakEvent ev, TEventArgs e);
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class KeywordParser
    {
        public static bool CheckKeyword(this ref Avalonia.Utilities.CharacterReader r, string keyword) { throw null; }
        public static bool TakeIfKeyword(this ref Avalonia.Utilities.CharacterReader r, string keyword) { throw null; }
    }
    public static partial class MathUtilities
    {
        public static bool AreClose(double value1, double value2) { throw null; }
        public static bool AreClose(double value1, double value2, double eps) { throw null; }
        public static bool AreClose(float value1, float value2) { throw null; }
        public static double Clamp(double val, double min, double max) { throw null; }
        public static System.Decimal Clamp(System.Decimal val, System.Decimal min, System.Decimal max) { throw null; }
        public static float Clamp(float value, float min, float max) { throw null; }
        public static int Clamp(int val, int min, int max) { throw null; }
        public static double Deg2Rad(double angle) { throw null; }
        public static Avalonia.Point GetEllipsePoint(Avalonia.Point centre, double radiusX, double radiusY, double angle) { throw null; }
        public static (double, double) GetMinMax(double a, double b) { throw null; }
        public static (double, double) GetMinMaxFromDelta(double initialValue, double delta) { throw null; }
        public static double Grad2Rad(double angle) { throw null; }
        public static bool GreaterThan(double value1, double value2) { throw null; }
        public static bool GreaterThan(float value1, float value2) { throw null; }
        public static bool GreaterThanOrClose(double value1, double value2) { throw null; }
        public static bool GreaterThanOrClose(float value1, float value2) { throw null; }
        public static bool IsOne(double value) { throw null; }
        public static bool IsOne(float value) { throw null; }
        public static bool IsZero(double value) { throw null; }
        public static bool IsZero(float value) { throw null; }
        public static bool LessThan(double value1, double value2) { throw null; }
        public static bool LessThan(float value1, float value2) { throw null; }
        public static bool LessThanOrClose(double value1, double value2) { throw null; }
        public static bool LessThanOrClose(float value1, float value2) { throw null; }
        public static double Turn2Rad(double angle) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class NonPumpingLockHelper
    {
        public partial interface IHelperImpl
        {
            System.IDisposable? Use();
        }
        public NonPumpingLockHelper() { throw null; }
        public static System.IDisposable? Use() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class RefCountable
    {
        public static Avalonia.Utilities.IRef<T> Create<T>(T item) where T : class, System.IDisposable { throw null; }
        public static Avalonia.Utilities.IRef<T> CreateUnownedNotClonable<T>(T item) where T : class { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SingleOrDictionary<TKey, TValue> where TKey : notnull
    {
        public SingleOrDictionary() { throw null; }
        public System.Collections.Generic.IEnumerable<TValue> Values { get { throw null; } }
        public void Add(TKey key, TValue value) { throw null; }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
        public bool TryGetValue(TKey key, out TValue value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SingleOrQueue<T>
    {
        public SingleOrQueue() { throw null; }
        public bool Empty { get { throw null; } }
        public T Dequeue() { throw null; }
        public void Enqueue(T value) { throw null; }
    }
    public static partial class SpanHelpers
    {
        public static bool TryParseByte(this System.ReadOnlySpan<char> span, System.Globalization.NumberStyles style, System.IFormatProvider provider, out byte value) { throw null; }
        public static bool TryParseDouble(this System.ReadOnlySpan<char> span, System.Globalization.NumberStyles style, System.IFormatProvider provider, out double value) { throw null; }
        public static bool TryParseInt(this System.ReadOnlySpan<char> span, out int value) { throw null; }
        public static bool TryParseUInt(this System.ReadOnlySpan<char> span, System.Globalization.NumberStyles style, System.IFormatProvider provider, out uint value) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class StringTokenizer
    {
        public StringTokenizer(string s, System.IFormatProvider formatProvider, string? exceptionMessage = null) { throw null; }
        public StringTokenizer(string s, char separator = ',', string? exceptionMessage = null) { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public string? CurrentToken { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Utilities.StringTokenizer left, Avalonia.Utilities.StringTokenizer right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Utilities.StringTokenizer left, Avalonia.Utilities.StringTokenizer right) { throw null; }
        public void Dispose() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Utilities.StringTokenizer other) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        public double ReadDouble(System.Nullable<char> separator = null) { throw null; }
        public int ReadInt32(System.Nullable<char> separator = null) { throw null; }
        public string ReadString(System.Nullable<char> separator = null) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
        public bool TryReadDouble(out double result, System.Nullable<char> separator = null) { throw null; }
        public bool TryReadInt32(out int result, System.Nullable<char> separator = null) { throw null; }
        public bool TryReadString(out string result, System.Nullable<char> separator = null) { throw null; }
    }
    public static partial class StyleClassParser
    {
        public static System.ReadOnlySpan<char> ParseStyleClass(this ref Avalonia.Utilities.CharacterReader r) { throw null; }
    }
    public sealed partial class SynchronousCompletionAsyncResult<T>
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public SynchronousCompletionAsyncResult(T result) { throw null; }
        public bool IsCompleted { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Utilities.SynchronousCompletionAsyncResult<T> left, Avalonia.Utilities.SynchronousCompletionAsyncResult<T> right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Utilities.SynchronousCompletionAsyncResult<T> left, Avalonia.Utilities.SynchronousCompletionAsyncResult<T> right) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Utilities.SynchronousCompletionAsyncResult<T> other) { throw null; }
        public Avalonia.Utilities.SynchronousCompletionAsyncResult<T> GetAwaiter() { throw null; }
        [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public T GetResult() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public void OnCompleted(System.Action continuation) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class SynchronousCompletionAsyncResultSource<T>
    {
        public SynchronousCompletionAsyncResultSource() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null})]
        public Avalonia.Utilities.SynchronousCompletionAsyncResult<T> AsyncResult { get { throw null; } }
        public void SetResult(T result) { throw null; }
        public void TrySetResult(T result) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public sealed partial class TargetWeakEventSubscriber<TTarget, TEventArgs> : Avalonia.Utilities.IWeakEventSubscriber<TEventArgs> where TEventArgs : System.EventArgs
    {
        public TargetWeakEventSubscriber(TTarget target, System.Action<TTarget, object?, Avalonia.Utilities.WeakEvent, TEventArgs> dispatchFunc) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class TypeUtilities
    {
        public static bool AcceptsNull(System.Type type) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? AcceptsNull<T>() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public static bool? CanCast<T>(object? value) { throw null; }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static T ConvertImplicit<T>(object value) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static object? ConvertImplicitOrDefault(object? value, System.Type type) { throw null; }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static object? ConvertOrDefault(object? value, System.Type type, System.Globalization.CultureInfo culture) { throw null; }
        [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute[missing](null, null, Justification = null)]
        public static object? Default(System.Type type) { throw null; }
        public static bool IsNumeric(System.Type type) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static bool? TryConvert(System.Type to, object? value, System.Globalization.CultureInfo? culture, out object? result) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute[missing](null)]
        public static bool? TryConvertImplicit(System.Type to, object? value, out object? result) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    [System.Runtime.CompilerServices.IsByRefLikeAttribute[missing]]
    [System.ObsoleteAttribute[missing](null, null)]
    public sealed partial class ValueSingleOrList<T>
    {
        public bool HasList { get { throw null; } }
        public bool IsSingle { get { throw null; } }
        public System.Collections.Generic.List<T> List { get { throw null; } }
        public T Single { get { throw null; } }
        public void Add(T value) { throw null; }
        public bool Remove(T value) { throw null; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class ValueSpan<T>
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public ValueSpan(int start, int length, T value) { throw null; }
        public int Length { get { throw null; } }
        public int Start { get { throw null; } }
        [System.Runtime.CompilerServices.NullableAttribute(null)]
        public T Value { get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator ==(Avalonia.Utilities.ValueSpan<T> left, Avalonia.Utilities.ValueSpan<T> right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public static bool operator !=(Avalonia.Utilities.ValueSpan<T> left, Avalonia.Utilities.ValueSpan<T> right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public bool Equals(Avalonia.Utilities.ValueSpan<T> other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute[missing]]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class WeakEvent<TSender, TEventArgs> : Avalonia.Utilities.WeakEvent where TSender : class  where TEventArgs : System.EventArgs
    {
        public void Subscribe(TSender target, Avalonia.Utilities.IWeakEventSubscriber<TEventArgs> subscriber) { throw null; }
        public void Unsubscribe(TSender target, Avalonia.Utilities.IWeakEventSubscriber<TEventArgs> subscriber) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class WeakEvent
    {
        public WeakEvent() { throw null; }
        public static Avalonia.Utilities.WeakEvent<TSender, TEventArgs> Register<TSender, TEventArgs>(System.Action<TSender, System.EventHandler<TEventArgs>> subscribe, System.Action<TSender, System.EventHandler<TEventArgs>> unsubscribe) where TSender : class where TEventArgs : System.EventArgs { throw null; }
        public static Avalonia.Utilities.WeakEvent<TSender, TEventArgs> Register<TSender, TEventArgs>(System.Func<TSender, System.EventHandler<TEventArgs>, System.Action> subscribe) where TSender : class where TEventArgs : System.EventArgs { throw null; }
        public static Avalonia.Utilities.WeakEvent<TSender, System.EventArgs> Register<TSender>(System.Action<TSender, System.EventHandler> subscribe, System.Action<TSender, System.EventHandler> unsubscribe) where TSender : class { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class WeakEventHandlerManager
    {
        public static void Subscribe<TTarget, TEventArgs, TSubscriber>(TTarget target, string eventName, System.EventHandler<TEventArgs> subscriber) where TEventArgs : System.EventArgs where TSubscriber : class { throw null; }
        public static void Unsubscribe<TEventArgs, TSubscriber>(object target, string eventName, System.EventHandler<TEventArgs> subscriber) where TEventArgs : System.EventArgs where TSubscriber : class { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class WeakEvents
    {
        public WeakEvents() { throw null; }
        public static readonly Avalonia.Utilities.WeakEvent<Avalonia.AvaloniaObject, Avalonia.AvaloniaPropertyChangedEventArgs> AvaloniaPropertyChanged;
        public static readonly Avalonia.Utilities.WeakEvent<System.Collections.Specialized.INotifyCollectionChanged, System.Collections.Specialized.NotifyCollectionChangedEventArgs> CollectionChanged;
        public static readonly Avalonia.Utilities.WeakEvent<System.Windows.Input.ICommand, System.EventArgs> CommandCanExecuteChanged;
        public static readonly Avalonia.Utilities.WeakEvent<System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.PropertyChangedEventArgs> PropertyChanged;
    }
    public sealed partial class WeakEventSubscriber<TEventArgs> : Avalonia.Utilities.IWeakEventSubscriber<TEventArgs> where TEventArgs : System.EventArgs
    {
        public WeakEventSubscriber() { throw null; }
        [System.Runtime.CompilerServices.NullableAttribute({null, null, null, null})]
        public event System.Action<object?, Avalonia.Utilities.WeakEvent, TEventArgs>? Event { add { throw null; } remove { throw null; } }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class WeakTimer
    {
        public partial interface IWeakTimerSubscriber
        {
            bool Tick();
        }
        public WeakTimer(Avalonia.Utilities.WeakTimer.IWeakTimerSubscriber subscriber) { throw null; }
        public System.TimeSpan Interval { get { throw null; } set { throw null; } }
        public static Avalonia.Utilities.WeakTimer StartWeakTimer(Avalonia.Utilities.WeakTimer.IWeakTimerSubscriber subscriber, System.TimeSpan interval) { throw null; }
        public void Start() { throw null; }
        public void Stop() { throw null; }
    }
}
namespace Avalonia.Visuals.Platform
{
    public partial class PathGeometryContext : Avalonia.Platform.IGeometryContext
    {
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public PathGeometryContext(Avalonia.Media.PathGeometry pathGeometry) { throw null; }
        public void ArcTo(Avalonia.Point point, Avalonia.Size size, double rotationAngle, bool isLargeArc, Avalonia.Media.SweepDirection sweepDirection) { throw null; }
        public void BeginFigure(Avalonia.Point startPoint, bool isFilled) { throw null; }
        public void CubicBezierTo(Avalonia.Point point1, Avalonia.Point point2, Avalonia.Point point3) { throw null; }
        public void Dispose() { throw null; }
        public void EndFigure(bool isClosed) { throw null; }
        public void LineTo(Avalonia.Point point) { throw null; }
        public void QuadraticBezierTo(Avalonia.Point control, Avalonia.Point endPoint) { throw null; }
        public void SetFillRule(Avalonia.Media.FillRule fillRule) { throw null; }
    }
}
namespace Avalonia.VisualTree
{
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    public partial interface IHostedVisualTreeRoot
    {
        Avalonia.Visual? Host { get; }
    }
    [System.ObsoleteAttribute[missing](null)]
    public partial interface IVisualWithRoundRectClip
    {
        [System.ObsoleteAttribute[missing](null)]
        Avalonia.CornerRadius ClipToBoundsRadius { get; }
    }
    [System.Runtime.CompilerServices.IsReadOnlyAttribute[missing]]
    public sealed partial class TransformedBounds
    {
        public TransformedBounds(Avalonia.Rect bounds, Avalonia.Rect clip, Avalonia.Matrix transform) { throw null; }
        public Avalonia.Rect Bounds { get { throw null; } }
        public Avalonia.Rect Clip { get { throw null; } }
        public Avalonia.Matrix Transform { get { throw null; } }
        public static bool operator ==(Avalonia.VisualTree.TransformedBounds left, Avalonia.VisualTree.TransformedBounds right) { throw null; }
        public static bool operator !=(Avalonia.VisualTree.TransformedBounds left, Avalonia.VisualTree.TransformedBounds right) { throw null; }
        public bool Contains(Avalonia.Point point) { throw null; }
        public bool Equals(Avalonia.VisualTree.TransformedBounds other) { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override bool? Equals(object? obj) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.NullableContextAttribute(null)]
        public override string ToString() { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public static partial class VisualExtensions
    {
        public static int CalculateDistanceFromAncestor(this Avalonia.Visual visual, Avalonia.Visual? ancestor) { throw null; }
        public static int CalculateDistanceFromRoot(Avalonia.Visual visual) { throw null; }
        public static T? FindAncestorOfType<T>(this Avalonia.Visual visual, bool includeSelf = false) where T : class { throw null; }
        public static Avalonia.Visual? FindCommonVisualAncestor(this Avalonia.Visual visual, Avalonia.Visual target) { throw null; }
        public static T? FindDescendantOfType<T>(this Avalonia.Visual visual, bool includeSelf = false) where T : class { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetSelfAndVisualAncestors(this Avalonia.Visual visual) { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetSelfAndVisualDescendants(this Avalonia.Visual visual) { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetVisualAncestors(this Avalonia.Visual visual) { throw null; }
        public static Avalonia.Visual? GetVisualAt(this Avalonia.Visual visual, Avalonia.Point p) { throw null; }
        public static Avalonia.Visual? GetVisualAt(this Avalonia.Visual visual, Avalonia.Point p, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetVisualChildren(this Avalonia.Visual visual) { throw null; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute[missing]]
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetVisualDescendants(this Avalonia.Visual visual) { throw null; }
        public static Avalonia.Visual? GetVisualParent(this Avalonia.Visual visual) { throw null; }
        public static T? GetVisualParent<T>(this Avalonia.Visual visual) where T : class { throw null; }
        public static Avalonia.Rendering.IRenderRoot? GetVisualRoot(this Avalonia.Visual visual) { throw null; }
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetVisualsAt(this Avalonia.Visual visual, Avalonia.Point p) { throw null; }
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> GetVisualsAt(this Avalonia.Visual visual, Avalonia.Point p, System.Func<Avalonia.Visual, bool> filter) { throw null; }
        public static bool IsAttachedToVisualTree(this Avalonia.Visual visual) { throw null; }
        public static bool IsVisualAncestorOf(this Avalonia.Visual visual, Avalonia.Visual target) { throw null; }
        public static System.Collections.Generic.IEnumerable<Avalonia.Visual> SortByZIndex(this System.Collections.Generic.IEnumerable<Avalonia.Visual> elements) { throw null; }
    }
    [System.Runtime.CompilerServices.NullableContextAttribute(null)]
    [System.Runtime.CompilerServices.NullableAttribute(null)]
    public partial class VisualLocator
    {
        public VisualLocator() { throw null; }
        public static System.IObservable<Avalonia.Visual?> Track(Avalonia.Visual relativeTo, int ancestorLevel, System.Type? ancestorType = null) { throw null; }
    }
}
